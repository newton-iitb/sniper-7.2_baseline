Opening output files
FE:EMIT_FILE obj/xed-operand-ctype-enum.txt
FE:EMIT_FILE obj/xed-operand-ctype-enum.c
FE:EMIT_FILE obj/xed-operand-ctype-enum.h
FE:EMIT_FILE obj/xed-operand-ctype-map.h
FE:EMIT_FILE obj/xed-operand-ctype-map.c
LER: Comparing YMM0 and ZMM0 for XMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for XMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for XMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for XMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for XMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for XMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for XMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for XMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for XMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for XMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for XMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for XMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for XMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for XMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for XMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for XMM15
	taking new wider version
LER: Comparing YMM0 and ZMM0 for YMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for YMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for YMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for YMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for YMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for YMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for YMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for YMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for YMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for YMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for YMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for YMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for YMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for YMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for YMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for YMM15
	taking new wider version
[RGROUPS] ['BNDCFG', 'BNDSTAT', 'BOUND', 'CR', 'DR', 'FLAGS', 'GPR16', 'GPR32', 'GPR64', 'GPR8', 'GPR8h', 'INVALID', 'IP', 'MASK', 'MMX', 'MSR', 'MXCSR', 'PSEUDO', 'PSEUDOX87', 'SR', 'TMP', 'X87', 'XCR', 'XMM', 'YMM', 'ZMM']
FE:EMIT_FILE obj/xed-reg-enum.txt
FE:EMIT_FILE obj/xed-reg-enum.c
FE:EMIT_FILE obj/xed-reg-enum.h
FE:EMIT_FILE obj/xed-reg-class-enum.txt
FE:EMIT_FILE obj/xed-reg-class-enum.c
FE:EMIT_FILE obj/xed-reg-class-enum.h
FE:EMIT_FILE obj/xed-init-reg-class.c
FE:EMIT_FILE obj/xed-operand-width-enum.txt
FE:EMIT_FILE obj/xed-operand-width-enum.c
FE:EMIT_FILE obj/xed-operand-width-enum.h
FE:EMIT_FILE obj/xed-init-width.c
Adding scalable width:  ASZ
Adding scalable width:  SSZ
Adding scalable width:  P
Adding scalable width:  P2
Adding scalable width:  S
Adding scalable width:  V
Adding scalable width:  Y
Adding scalable width:  Z
Adding scalable width:  SPW8
Adding scalable width:  SPW
Adding scalable width:  SPW5
Adding scalable width:  SPW3
Adding scalable width:  SPW2
MAKING ELEMENT BASE TYPE ENUM
FE:EMIT_FILE obj/xed-operand-element-type-enum.c
FE:EMIT_FILE obj/xed-operand-element-type-enum.h
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.txt
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.c
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.h
FE:EMIT_FILE obj/xed-init-operand-type-mappings.c
FE:EMIT_FILE obj/xed-init-pointer-names.h
FE:EMIT_FILE obj/xed-init-pointer-names.c
Reading state bits
Done reading state bits
Reading structured input
Reading Instructions (ISA) input
=============================================
Creating a generator 0
=============================================
ALines (lines before reading input) = 66091
read_input 0
NONTERMINAL: ISA notype
Adding ISA to nonterminal dict
Nonterminal ISA()::
Nonterminal name ISA
read_flat_input 0
Hit a nonterminal, returning at: REMOVE_SEGMENT()::
BLines (lines remaining after reading input) = 66089
=============================================
Creating a generator 1
=============================================
ALines (lines before reading input) = 66089
read_input 1
NONTERMINAL: REMOVE_SEGMENT notype
Adding REMOVE_SEGMENT to nonterminal dict
Nonterminal REMOVE_SEGMENT()::
Nonterminal name REMOVE_SEGMENT
read_flat_input 1
Hit a nonterminal, returning at: PREFIXES()::
BLines (lines remaining after reading input) = 66085
=============================================
Creating a generator 2
=============================================
ALines (lines before reading input) = 66085
read_input 4
NONTERMINAL: PREFIXES notype
Adding PREFIXES to nonterminal dict
Nonterminal PREFIXES()::
Nonterminal name PREFIXES
read_flat_input 4
Hit a nonterminal, returning at: BRANCH_HINT()::
BLines (lines remaining after reading input) = 66037
=============================================
Creating a generator 3
=============================================
ALines (lines before reading input) = 66037
read_input 50
NONTERMINAL: BRANCH_HINT notype
Adding BRANCH_HINT to nonterminal dict
Nonterminal BRANCH_HINT()::
Nonterminal name BRANCH_HINT
read_flat_input 50
Hit a nonterminal, returning at: xed_reg_enum_t ArAX()::
BLines (lines remaining after reading input) = 66033
=============================================
Creating a generator 4
=============================================
ALines (lines before reading input) = 66033
read_input 53
NONTERMINAL: ArAX type= xed_reg_enum_t
Adding ArAX to nonterminal dict
Nonterminal xed_reg_enum_t ArAX()::
Nonterminal name ArAX
read_flat_input 53
Hit a nonterminal, returning at: xed_reg_enum_t ArBX()::
BLines (lines remaining after reading input) = 66029
=============================================
Creating a generator 5
=============================================
ALines (lines before reading input) = 66029
read_input 56
NONTERMINAL: ArBX type= xed_reg_enum_t
Adding ArBX to nonterminal dict
Nonterminal xed_reg_enum_t ArBX()::
Nonterminal name ArBX
read_flat_input 56
Hit a nonterminal, returning at: xed_reg_enum_t ArCX()::
BLines (lines remaining after reading input) = 66025
=============================================
Creating a generator 6
=============================================
ALines (lines before reading input) = 66025
read_input 59
NONTERMINAL: ArCX type= xed_reg_enum_t
Adding ArCX to nonterminal dict
Nonterminal xed_reg_enum_t ArCX()::
Nonterminal name ArCX
read_flat_input 59
Hit a nonterminal, returning at: xed_reg_enum_t ArDX()::
BLines (lines remaining after reading input) = 66021
=============================================
Creating a generator 7
=============================================
ALines (lines before reading input) = 66021
read_input 62
NONTERMINAL: ArDX type= xed_reg_enum_t
Adding ArDX to nonterminal dict
Nonterminal xed_reg_enum_t ArDX()::
Nonterminal name ArDX
read_flat_input 62
Hit a nonterminal, returning at: xed_reg_enum_t ArSI()::
BLines (lines remaining after reading input) = 66017
=============================================
Creating a generator 8
=============================================
ALines (lines before reading input) = 66017
read_input 65
NONTERMINAL: ArSI type= xed_reg_enum_t
Adding ArSI to nonterminal dict
Nonterminal xed_reg_enum_t ArSI()::
Nonterminal name ArSI
read_flat_input 65
Hit a nonterminal, returning at: xed_reg_enum_t ArDI()::
BLines (lines remaining after reading input) = 66013
=============================================
Creating a generator 9
=============================================
ALines (lines before reading input) = 66013
read_input 68
NONTERMINAL: ArDI type= xed_reg_enum_t
Adding ArDI to nonterminal dict
Nonterminal xed_reg_enum_t ArDI()::
Nonterminal name ArDI
read_flat_input 68
Hit a nonterminal, returning at: xed_reg_enum_t ArSP()::
BLines (lines remaining after reading input) = 66009
=============================================
Creating a generator 10
=============================================
ALines (lines before reading input) = 66009
read_input 71
NONTERMINAL: ArSP type= xed_reg_enum_t
Adding ArSP to nonterminal dict
Nonterminal xed_reg_enum_t ArSP()::
Nonterminal name ArSP
read_flat_input 71
Hit a nonterminal, returning at: xed_reg_enum_t ArBP()::
BLines (lines remaining after reading input) = 66005
=============================================
Creating a generator 11
=============================================
ALines (lines before reading input) = 66005
read_input 74
NONTERMINAL: ArBP type= xed_reg_enum_t
Adding ArBP to nonterminal dict
Nonterminal xed_reg_enum_t ArBP()::
Nonterminal name ArBP
read_flat_input 74
Hit a nonterminal, returning at: xed_reg_enum_t SrSP()::
BLines (lines remaining after reading input) = 66001
=============================================
Creating a generator 12
=============================================
ALines (lines before reading input) = 66001
read_input 77
NONTERMINAL: SrSP type= xed_reg_enum_t
Adding SrSP to nonterminal dict
Nonterminal xed_reg_enum_t SrSP()::
Nonterminal name SrSP
read_flat_input 77
Hit a nonterminal, returning at: xed_reg_enum_t SrBP()::
BLines (lines remaining after reading input) = 65997
=============================================
Creating a generator 13
=============================================
ALines (lines before reading input) = 65997
read_input 80
NONTERMINAL: SrBP type= xed_reg_enum_t
Adding SrBP to nonterminal dict
Nonterminal xed_reg_enum_t SrBP()::
Nonterminal name SrBP
read_flat_input 80
Hit a nonterminal, returning at: xed_reg_enum_t Ar8()::
BLines (lines remaining after reading input) = 65993
=============================================
Creating a generator 14
=============================================
ALines (lines before reading input) = 65993
read_input 83
NONTERMINAL: Ar8 type= xed_reg_enum_t
Adding Ar8 to nonterminal dict
Nonterminal xed_reg_enum_t Ar8()::
Nonterminal name Ar8
read_flat_input 83
Hit a nonterminal, returning at: xed_reg_enum_t Ar9()::
BLines (lines remaining after reading input) = 65989
=============================================
Creating a generator 15
=============================================
ALines (lines before reading input) = 65989
read_input 86
NONTERMINAL: Ar9 type= xed_reg_enum_t
Adding Ar9 to nonterminal dict
Nonterminal xed_reg_enum_t Ar9()::
Nonterminal name Ar9
read_flat_input 86
Hit a nonterminal, returning at: xed_reg_enum_t Ar10()::
BLines (lines remaining after reading input) = 65985
=============================================
Creating a generator 16
=============================================
ALines (lines before reading input) = 65985
read_input 89
NONTERMINAL: Ar10 type= xed_reg_enum_t
Adding Ar10 to nonterminal dict
Nonterminal xed_reg_enum_t Ar10()::
Nonterminal name Ar10
read_flat_input 89
Hit a nonterminal, returning at: xed_reg_enum_t Ar11()::
BLines (lines remaining after reading input) = 65981
=============================================
Creating a generator 17
=============================================
ALines (lines before reading input) = 65981
read_input 92
NONTERMINAL: Ar11 type= xed_reg_enum_t
Adding Ar11 to nonterminal dict
Nonterminal xed_reg_enum_t Ar11()::
Nonterminal name Ar11
read_flat_input 92
Hit a nonterminal, returning at: xed_reg_enum_t Ar12()::
BLines (lines remaining after reading input) = 65977
=============================================
Creating a generator 18
=============================================
ALines (lines before reading input) = 65977
read_input 95
NONTERMINAL: Ar12 type= xed_reg_enum_t
Adding Ar12 to nonterminal dict
Nonterminal xed_reg_enum_t Ar12()::
Nonterminal name Ar12
read_flat_input 95
Hit a nonterminal, returning at: xed_reg_enum_t Ar13()::
BLines (lines remaining after reading input) = 65973
=============================================
Creating a generator 19
=============================================
ALines (lines before reading input) = 65973
read_input 98
NONTERMINAL: Ar13 type= xed_reg_enum_t
Adding Ar13 to nonterminal dict
Nonterminal xed_reg_enum_t Ar13()::
Nonterminal name Ar13
read_flat_input 98
Hit a nonterminal, returning at: xed_reg_enum_t Ar14()::
BLines (lines remaining after reading input) = 65969
=============================================
Creating a generator 20
=============================================
ALines (lines before reading input) = 65969
read_input 101
NONTERMINAL: Ar14 type= xed_reg_enum_t
Adding Ar14 to nonterminal dict
Nonterminal xed_reg_enum_t Ar14()::
Nonterminal name Ar14
read_flat_input 101
Hit a nonterminal, returning at: xed_reg_enum_t Ar15()::
BLines (lines remaining after reading input) = 65965
=============================================
Creating a generator 21
=============================================
ALines (lines before reading input) = 65965
read_input 104
NONTERMINAL: Ar15 type= xed_reg_enum_t
Adding Ar15 to nonterminal dict
Nonterminal xed_reg_enum_t Ar15()::
Nonterminal name Ar15
read_flat_input 104
Hit a nonterminal, returning at: xed_reg_enum_t rIP()::
BLines (lines remaining after reading input) = 65961
=============================================
Creating a generator 22
=============================================
ALines (lines before reading input) = 65961
read_input 107
NONTERMINAL: rIP type= xed_reg_enum_t
Adding rIP to nonterminal dict
Nonterminal xed_reg_enum_t rIP()::
Nonterminal name rIP
read_flat_input 107
Hit a nonterminal, returning at: xed_reg_enum_t rIPa()::
BLines (lines remaining after reading input) = 65957
=============================================
Creating a generator 23
=============================================
ALines (lines before reading input) = 65957
read_input 110
NONTERMINAL: rIPa type= xed_reg_enum_t
Adding rIPa to nonterminal dict
Nonterminal xed_reg_enum_t rIPa()::
Nonterminal name rIPa
read_flat_input 110
Hit a nonterminal, returning at: xed_reg_enum_t OeAX()::
BLines (lines remaining after reading input) = 65954
=============================================
Creating a generator 24
=============================================
ALines (lines before reading input) = 65954
read_input 112
NONTERMINAL: OeAX type= xed_reg_enum_t
Adding OeAX to nonterminal dict
Nonterminal xed_reg_enum_t OeAX()::
Nonterminal name OeAX
read_flat_input 112
Hit a nonterminal, returning at: xed_reg_enum_t OrAX()::
BLines (lines remaining after reading input) = 65950
=============================================
Creating a generator 25
=============================================
ALines (lines before reading input) = 65950
read_input 115
NONTERMINAL: OrAX type= xed_reg_enum_t
Adding OrAX to nonterminal dict
Nonterminal xed_reg_enum_t OrAX()::
Nonterminal name OrAX
read_flat_input 115
Hit a nonterminal, returning at: xed_reg_enum_t OrDX()::
BLines (lines remaining after reading input) = 65946
=============================================
Creating a generator 26
=============================================
ALines (lines before reading input) = 65946
read_input 118
NONTERMINAL: OrDX type= xed_reg_enum_t
Adding OrDX to nonterminal dict
Nonterminal xed_reg_enum_t OrDX()::
Nonterminal name OrDX
read_flat_input 118
Hit a nonterminal, returning at: xed_reg_enum_t OrSP()::
BLines (lines remaining after reading input) = 65942
=============================================
Creating a generator 27
=============================================
ALines (lines before reading input) = 65942
read_input 121
NONTERMINAL: OrSP type= xed_reg_enum_t
Adding OrSP to nonterminal dict
Nonterminal xed_reg_enum_t OrSP()::
Nonterminal name OrSP
read_flat_input 121
Hit a nonterminal, returning at: xed_reg_enum_t OrBP()::
BLines (lines remaining after reading input) = 65938
=============================================
Creating a generator 28
=============================================
ALines (lines before reading input) = 65938
read_input 124
NONTERMINAL: OrBP type= xed_reg_enum_t
Adding OrBP to nonterminal dict
Nonterminal xed_reg_enum_t OrBP()::
Nonterminal name OrBP
read_flat_input 124
Hit a nonterminal, returning at: xed_reg_enum_t rFLAGS()::
BLines (lines remaining after reading input) = 65934
=============================================
Creating a generator 29
=============================================
ALines (lines before reading input) = 65934
read_input 127
NONTERMINAL: rFLAGS type= xed_reg_enum_t
Adding rFLAGS to nonterminal dict
Nonterminal xed_reg_enum_t rFLAGS()::
Nonterminal name rFLAGS
read_flat_input 127
Hit a nonterminal, returning at: xed_reg_enum_t MMX_R()::
BLines (lines remaining after reading input) = 65930
=============================================
Creating a generator 30
=============================================
ALines (lines before reading input) = 65930
read_input 130
NONTERMINAL: MMX_R type= xed_reg_enum_t
Adding MMX_R to nonterminal dict
Nonterminal xed_reg_enum_t MMX_R()::
Nonterminal name MMX_R
read_flat_input 130
Hit a nonterminal, returning at: xed_reg_enum_t MMX_B()::
BLines (lines remaining after reading input) = 65921
=============================================
Creating a generator 31
=============================================
ALines (lines before reading input) = 65921
read_input 138
NONTERMINAL: MMX_B type= xed_reg_enum_t
Adding MMX_B to nonterminal dict
Nonterminal xed_reg_enum_t MMX_B()::
Nonterminal name MMX_B
read_flat_input 138
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_R()::
BLines (lines remaining after reading input) = 65912
=============================================
Creating a generator 32
=============================================
ALines (lines before reading input) = 65912
read_input 146
NONTERMINAL: GPRv_R type= xed_reg_enum_t
Adding GPRv_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_R()::
Nonterminal name GPRv_R
read_flat_input 146
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_SB()::
BLines (lines remaining after reading input) = 65908
=============================================
Creating a generator 33
=============================================
ALines (lines before reading input) = 65908
read_input 149
NONTERMINAL: GPRv_SB type= xed_reg_enum_t
Adding GPRv_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_SB()::
Nonterminal name GPRv_SB
read_flat_input 149
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_R()::
BLines (lines remaining after reading input) = 65904
=============================================
Creating a generator 34
=============================================
ALines (lines before reading input) = 65904
read_input 152
NONTERMINAL: GPRz_R type= xed_reg_enum_t
Adding GPRz_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_R()::
Nonterminal name GPRz_R
read_flat_input 152
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_B()::
BLines (lines remaining after reading input) = 65900
=============================================
Creating a generator 35
=============================================
ALines (lines before reading input) = 65900
read_input 155
NONTERMINAL: GPRv_B type= xed_reg_enum_t
Adding GPRv_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_B()::
Nonterminal name GPRv_B
read_flat_input 155
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_B()::
BLines (lines remaining after reading input) = 65896
=============================================
Creating a generator 36
=============================================
ALines (lines before reading input) = 65896
read_input 158
NONTERMINAL: GPRz_B type= xed_reg_enum_t
Adding GPRz_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_B()::
Nonterminal name GPRz_B
read_flat_input 158
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_B()::
BLines (lines remaining after reading input) = 65892
=============================================
Creating a generator 37
=============================================
ALines (lines before reading input) = 65892
read_input 161
NONTERMINAL: GPRy_B type= xed_reg_enum_t
Adding GPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_B()::
Nonterminal name GPRy_B
read_flat_input 161
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_R()::
BLines (lines remaining after reading input) = 65888
=============================================
Creating a generator 38
=============================================
ALines (lines before reading input) = 65888
read_input 164
NONTERMINAL: GPRy_R type= xed_reg_enum_t
Adding GPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_R()::
Nonterminal name GPRy_R
read_flat_input 164
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_R()::
BLines (lines remaining after reading input) = 65884
=============================================
Creating a generator 39
=============================================
ALines (lines before reading input) = 65884
read_input 167
NONTERMINAL: GPR64_R type= xed_reg_enum_t
Adding GPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_R()::
Nonterminal name GPR64_R
read_flat_input 167
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_B()::
BLines (lines remaining after reading input) = 65867
=============================================
Creating a generator 40
=============================================
ALines (lines before reading input) = 65867
read_input 183
NONTERMINAL: GPR64_B type= xed_reg_enum_t
Adding GPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_B()::
Nonterminal name GPR64_B
read_flat_input 183
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_SB()::
BLines (lines remaining after reading input) = 65850
=============================================
Creating a generator 41
=============================================
ALines (lines before reading input) = 65850
read_input 199
NONTERMINAL: GPR64_SB type= xed_reg_enum_t
Adding GPR64_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_SB()::
Nonterminal name GPR64_SB
read_flat_input 199
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_X()::
BLines (lines remaining after reading input) = 65833
=============================================
Creating a generator 42
=============================================
ALines (lines before reading input) = 65833
read_input 215
NONTERMINAL: GPR64_X type= xed_reg_enum_t
Adding GPR64_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_X()::
Nonterminal name GPR64_X
read_flat_input 215
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_R()::
BLines (lines remaining after reading input) = 65816
=============================================
Creating a generator 43
=============================================
ALines (lines before reading input) = 65816
read_input 231
NONTERMINAL: GPR32_R type= xed_reg_enum_t
Adding GPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_R()::
Nonterminal name GPR32_R
read_flat_input 231
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_B()::
BLines (lines remaining after reading input) = 65799
=============================================
Creating a generator 44
=============================================
ALines (lines before reading input) = 65799
read_input 247
NONTERMINAL: GPR32_B type= xed_reg_enum_t
Adding GPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_B()::
Nonterminal name GPR32_B
read_flat_input 247
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_SB()::
BLines (lines remaining after reading input) = 65782
=============================================
Creating a generator 45
=============================================
ALines (lines before reading input) = 65782
read_input 263
NONTERMINAL: GPR32_SB type= xed_reg_enum_t
Adding GPR32_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_SB()::
Nonterminal name GPR32_SB
read_flat_input 263
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_X()::
BLines (lines remaining after reading input) = 65765
=============================================
Creating a generator 46
=============================================
ALines (lines before reading input) = 65765
read_input 279
NONTERMINAL: GPR32_X type= xed_reg_enum_t
Adding GPR32_X to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_X()::
Nonterminal name GPR32_X
read_flat_input 279
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_R()::
BLines (lines remaining after reading input) = 65748
=============================================
Creating a generator 47
=============================================
ALines (lines before reading input) = 65748
read_input 295
NONTERMINAL: GPR16_R type= xed_reg_enum_t
Adding GPR16_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_R()::
Nonterminal name GPR16_R
read_flat_input 295
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_B()::
BLines (lines remaining after reading input) = 65731
=============================================
Creating a generator 48
=============================================
ALines (lines before reading input) = 65731
read_input 311
NONTERMINAL: GPR16_B type= xed_reg_enum_t
Adding GPR16_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_B()::
Nonterminal name GPR16_B
read_flat_input 311
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_SB()::
BLines (lines remaining after reading input) = 65714
=============================================
Creating a generator 49
=============================================
ALines (lines before reading input) = 65714
read_input 327
NONTERMINAL: GPR16_SB type= xed_reg_enum_t
Adding GPR16_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_SB()::
Nonterminal name GPR16_SB
read_flat_input 327
Hit a nonterminal, returning at: xed_reg_enum_t CR_R()::
BLines (lines remaining after reading input) = 65697
=============================================
Creating a generator 50
=============================================
ALines (lines before reading input) = 65697
read_input 343
NONTERMINAL: CR_R type= xed_reg_enum_t
Adding CR_R to nonterminal dict
Nonterminal xed_reg_enum_t CR_R()::
Nonterminal name CR_R
read_flat_input 343
Hit a nonterminal, returning at: xed_reg_enum_t CR_B()::
BLines (lines remaining after reading input) = 65680
=============================================
Creating a generator 51
=============================================
ALines (lines before reading input) = 65680
read_input 359
NONTERMINAL: CR_B type= xed_reg_enum_t
Adding CR_B to nonterminal dict
Nonterminal xed_reg_enum_t CR_B()::
Nonterminal name CR_B
read_flat_input 359
Hit a nonterminal, returning at: xed_reg_enum_t DR_R()::
BLines (lines remaining after reading input) = 65663
=============================================
Creating a generator 52
=============================================
ALines (lines before reading input) = 65663
read_input 375
NONTERMINAL: DR_R type= xed_reg_enum_t
Adding DR_R to nonterminal dict
Nonterminal xed_reg_enum_t DR_R()::
Nonterminal name DR_R
read_flat_input 375
Hit a nonterminal, returning at: xed_reg_enum_t X87()::
BLines (lines remaining after reading input) = 65646
=============================================
Creating a generator 53
=============================================
ALines (lines before reading input) = 65646
read_input 391
NONTERMINAL: X87 type= xed_reg_enum_t
Adding X87 to nonterminal dict
Nonterminal xed_reg_enum_t X87()::
Nonterminal name X87
read_flat_input 391
Hit a nonterminal, returning at: xed_reg_enum_t SEG()::
BLines (lines remaining after reading input) = 65637
=============================================
Creating a generator 54
=============================================
ALines (lines before reading input) = 65637
read_input 399
NONTERMINAL: SEG type= xed_reg_enum_t
Adding SEG to nonterminal dict
Nonterminal xed_reg_enum_t SEG()::
Nonterminal name SEG
read_flat_input 399
Hit a nonterminal, returning at: xed_reg_enum_t SEG_MOV()::
BLines (lines remaining after reading input) = 65628
=============================================
Creating a generator 55
=============================================
ALines (lines before reading input) = 65628
read_input 407
NONTERMINAL: SEG_MOV type= xed_reg_enum_t
Adding SEG_MOV to nonterminal dict
Nonterminal xed_reg_enum_t SEG_MOV()::
Nonterminal name SEG_MOV
read_flat_input 407
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG()::
BLines (lines remaining after reading input) = 65619
=============================================
Creating a generator 56
=============================================
ALines (lines before reading input) = 65619
read_input 415
NONTERMINAL: FINAL_DSEG type= xed_reg_enum_t
Adding FINAL_DSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG()::
Nonterminal name FINAL_DSEG
read_flat_input 415
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_NOT64()::
BLines (lines remaining after reading input) = 65615
=============================================
Creating a generator 57
=============================================
ALines (lines before reading input) = 65615
read_input 418
NONTERMINAL: FINAL_DSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_NOT64()::
Nonterminal name FINAL_DSEG_NOT64
read_flat_input 418
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_MODE64()::
BLines (lines remaining after reading input) = 65607
=============================================
Creating a generator 58
=============================================
ALines (lines before reading input) = 65607
read_input 425
NONTERMINAL: FINAL_DSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_MODE64()::
Nonterminal name FINAL_DSEG_MODE64
read_flat_input 425
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1()::
BLines (lines remaining after reading input) = 65599
=============================================
Creating a generator 59
=============================================
ALines (lines before reading input) = 65599
read_input 432
NONTERMINAL: FINAL_DSEG1 type= xed_reg_enum_t
Adding FINAL_DSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1()::
Nonterminal name FINAL_DSEG1
read_flat_input 432
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_NOT64()::
BLines (lines remaining after reading input) = 65595
=============================================
Creating a generator 60
=============================================
ALines (lines before reading input) = 65595
read_input 435
NONTERMINAL: FINAL_DSEG1_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG1_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_NOT64()::
Nonterminal name FINAL_DSEG1_NOT64
read_flat_input 435
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_MODE64()::
BLines (lines remaining after reading input) = 65587
=============================================
Creating a generator 61
=============================================
ALines (lines before reading input) = 65587
read_input 442
NONTERMINAL: FINAL_DSEG1_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG1_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_MODE64()::
Nonterminal name FINAL_DSEG1_MODE64
read_flat_input 442
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG()::
BLines (lines remaining after reading input) = 65579
=============================================
Creating a generator 62
=============================================
ALines (lines before reading input) = 65579
read_input 449
NONTERMINAL: FINAL_ESEG type= xed_reg_enum_t
Adding FINAL_ESEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG()::
Nonterminal name FINAL_ESEG
read_flat_input 449
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG1()::
BLines (lines remaining after reading input) = 65575
=============================================
Creating a generator 63
=============================================
ALines (lines before reading input) = 65575
read_input 452
NONTERMINAL: FINAL_ESEG1 type= xed_reg_enum_t
Adding FINAL_ESEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG1()::
Nonterminal name FINAL_ESEG1
read_flat_input 452
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG1()::
BLines (lines remaining after reading input) = 65571
=============================================
Creating a generator 64
=============================================
ALines (lines before reading input) = 65571
read_input 455
NONTERMINAL: FINAL_SSEG1 type= xed_reg_enum_t
Adding FINAL_SSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG1()::
Nonterminal name FINAL_SSEG1
read_flat_input 455
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG0()::
BLines (lines remaining after reading input) = 65567
=============================================
Creating a generator 65
=============================================
ALines (lines before reading input) = 65567
read_input 458
NONTERMINAL: FINAL_SSEG0 type= xed_reg_enum_t
Adding FINAL_SSEG0 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG0()::
Nonterminal name FINAL_SSEG0
read_flat_input 458
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG()::
BLines (lines remaining after reading input) = 65563
=============================================
Creating a generator 66
=============================================
ALines (lines before reading input) = 65563
read_input 461
NONTERMINAL: FINAL_SSEG type= xed_reg_enum_t
Adding FINAL_SSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG()::
Nonterminal name FINAL_SSEG
read_flat_input 461
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_NOT64()::
BLines (lines remaining after reading input) = 65559
=============================================
Creating a generator 67
=============================================
ALines (lines before reading input) = 65559
read_input 464
NONTERMINAL: FINAL_SSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_SSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_NOT64()::
Nonterminal name FINAL_SSEG_NOT64
read_flat_input 464
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_MODE64()::
BLines (lines remaining after reading input) = 65551
=============================================
Creating a generator 68
=============================================
ALines (lines before reading input) = 65551
read_input 471
NONTERMINAL: FINAL_SSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_SSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_MODE64()::
Nonterminal name FINAL_SSEG_MODE64
read_flat_input 471
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_R()::
BLines (lines remaining after reading input) = 65543
=============================================
Creating a generator 69
=============================================
ALines (lines before reading input) = 65543
read_input 478
NONTERMINAL: GPR8_R type= xed_reg_enum_t
Adding GPR8_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_R()::
Nonterminal name GPR8_R
read_flat_input 478
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_B()::
BLines (lines remaining after reading input) = 65522
=============================================
Creating a generator 70
=============================================
ALines (lines before reading input) = 65522
read_input 498
NONTERMINAL: GPR8_B type= xed_reg_enum_t
Adding GPR8_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_B()::
Nonterminal name GPR8_B
read_flat_input 498
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_SB()::
BLines (lines remaining after reading input) = 65501
=============================================
Creating a generator 71
=============================================
ALines (lines before reading input) = 65501
read_input 518
NONTERMINAL: GPR8_SB type= xed_reg_enum_t
Adding GPR8_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_SB()::
Nonterminal name GPR8_SB
read_flat_input 518
Hit a nonterminal, returning at: OSZ_NONTERM()::
BLines (lines remaining after reading input) = 65480
=============================================
Creating a generator 72
=============================================
ALines (lines before reading input) = 65480
read_input 538
NONTERMINAL: OSZ_NONTERM notype
Adding OSZ_NONTERM to nonterminal dict
Nonterminal OSZ_NONTERM()::
Nonterminal name OSZ_NONTERM
read_flat_input 538
Hit a nonterminal, returning at: DF64()::
BLines (lines remaining after reading input) = 65471
=============================================
Creating a generator 73
=============================================
ALines (lines before reading input) = 65471
read_input 546
NONTERMINAL: DF64 notype
Adding DF64 to nonterminal dict
Nonterminal DF64()::
Nonterminal name DF64
read_flat_input 546
Hit a nonterminal, returning at: REFINING66()::
BLines (lines remaining after reading input) = 65464
=============================================
Creating a generator 74
=============================================
ALines (lines before reading input) = 65464
read_input 552
NONTERMINAL: REFINING66 notype
Adding REFINING66 to nonterminal dict
Nonterminal REFINING66()::
Nonterminal name REFINING66
read_flat_input 552
Hit a nonterminal, returning at: IGNORE66()::
BLines (lines remaining after reading input) = 65459
=============================================
Creating a generator 75
=============================================
ALines (lines before reading input) = 65459
read_input 556
NONTERMINAL: IGNORE66 notype
Adding IGNORE66 to nonterminal dict
Nonterminal IGNORE66()::
Nonterminal name IGNORE66
read_flat_input 556
Hit a nonterminal, returning at: IMMUNE66()::
BLines (lines remaining after reading input) = 65454
=============================================
Creating a generator 76
=============================================
ALines (lines before reading input) = 65454
read_input 560
NONTERMINAL: IMMUNE66 notype
Adding IMMUNE66 to nonterminal dict
Nonterminal IMMUNE66()::
Nonterminal name IMMUNE66
read_flat_input 560
Hit a nonterminal, returning at: CR_WIDTH()::
BLines (lines remaining after reading input) = 65449
=============================================
Creating a generator 77
=============================================
ALines (lines before reading input) = 65449
read_input 564
NONTERMINAL: CR_WIDTH notype
Adding CR_WIDTH to nonterminal dict
Nonterminal CR_WIDTH()::
Nonterminal name CR_WIDTH
read_flat_input 564
Hit a nonterminal, returning at: IMMUNE66_LOOP64()::
BLines (lines remaining after reading input) = 65445
=============================================
Creating a generator 78
=============================================
ALines (lines before reading input) = 65445
read_input 567
NONTERMINAL: IMMUNE66_LOOP64 notype
Adding IMMUNE66_LOOP64 to nonterminal dict
Nonterminal IMMUNE66_LOOP64()::
Nonterminal name IMMUNE66_LOOP64
read_flat_input 567
Hit a nonterminal, returning at: IMMUNE_REXW()::
BLines (lines remaining after reading input) = 65441
=============================================
Creating a generator 79
=============================================
ALines (lines before reading input) = 65441
read_input 570
NONTERMINAL: IMMUNE_REXW notype
Adding IMMUNE_REXW to nonterminal dict
Nonterminal IMMUNE_REXW()::
Nonterminal name IMMUNE_REXW
read_flat_input 570
Hit a nonterminal, returning at: FORCE64()::
BLines (lines remaining after reading input) = 65435
=============================================
Creating a generator 80
=============================================
ALines (lines before reading input) = 65435
read_input 575
NONTERMINAL: FORCE64 notype
Adding FORCE64 to nonterminal dict
Nonterminal FORCE64()::
Nonterminal name FORCE64
read_flat_input 575
Hit a nonterminal, returning at: ASZ_NONTERM()::
BLines (lines remaining after reading input) = 65432
=============================================
Creating a generator 81
=============================================
ALines (lines before reading input) = 65432
read_input 576
NONTERMINAL: ASZ_NONTERM notype
Adding ASZ_NONTERM to nonterminal dict
Nonterminal ASZ_NONTERM()::
Nonterminal name ASZ_NONTERM
read_flat_input 576
Hit a nonterminal, returning at: ONE()::
BLines (lines remaining after reading input) = 65425
=============================================
Creating a generator 82
=============================================
ALines (lines before reading input) = 65425
read_input 582
NONTERMINAL: ONE notype
Adding ONE to nonterminal dict
Nonterminal ONE()::
Nonterminal name ONE
read_flat_input 582
Hit a nonterminal, returning at: UIMMv()::
BLines (lines remaining after reading input) = 65421
=============================================
Creating a generator 83
=============================================
ALines (lines before reading input) = 65421
read_input 585
NONTERMINAL: UIMMv notype
Adding UIMMv to nonterminal dict
Nonterminal UIMMv()::
Nonterminal name UIMMv
read_flat_input 585
Hit a nonterminal, returning at: SIMMz()::
BLines (lines remaining after reading input) = 65417
=============================================
Creating a generator 84
=============================================
ALines (lines before reading input) = 65417
read_input 588
NONTERMINAL: SIMMz notype
Adding SIMMz to nonterminal dict
Nonterminal SIMMz()::
Nonterminal name SIMMz
read_flat_input 588
Hit a nonterminal, returning at: SIMM8()::
BLines (lines remaining after reading input) = 65413
=============================================
Creating a generator 85
=============================================
ALines (lines before reading input) = 65413
read_input 591
NONTERMINAL: SIMM8 notype
Adding SIMM8 to nonterminal dict
Nonterminal SIMM8()::
Nonterminal name SIMM8
read_flat_input 591
Hit a nonterminal, returning at: UIMM8()::
BLines (lines remaining after reading input) = 65411
=============================================
Creating a generator 86
=============================================
ALines (lines before reading input) = 65411
read_input 592
NONTERMINAL: UIMM8 notype
Adding UIMM8 to nonterminal dict
Nonterminal UIMM8()::
Nonterminal name UIMM8
read_flat_input 592
Hit a nonterminal, returning at: UIMM8_1()::
BLines (lines remaining after reading input) = 65409
=============================================
Creating a generator 87
=============================================
ALines (lines before reading input) = 65409
read_input 593
NONTERMINAL: UIMM8_1 notype
Adding UIMM8_1 to nonterminal dict
Nonterminal UIMM8_1()::
Nonterminal name UIMM8_1
read_flat_input 593
Hit a nonterminal, returning at: UIMM16()::
BLines (lines remaining after reading input) = 65407
=============================================
Creating a generator 88
=============================================
ALines (lines before reading input) = 65407
read_input 594
NONTERMINAL: UIMM16 notype
Adding UIMM16 to nonterminal dict
Nonterminal UIMM16()::
Nonterminal name UIMM16
read_flat_input 594
Hit a nonterminal, returning at: UIMM32()::
BLines (lines remaining after reading input) = 65405
=============================================
Creating a generator 89
=============================================
ALines (lines before reading input) = 65405
read_input 595
NONTERMINAL: UIMM32 notype
Adding UIMM32 to nonterminal dict
Nonterminal UIMM32()::
Nonterminal name UIMM32
read_flat_input 595
Hit a nonterminal, returning at: BRDISP8()::
BLines (lines remaining after reading input) = 65403
=============================================
Creating a generator 90
=============================================
ALines (lines before reading input) = 65403
read_input 596
NONTERMINAL: BRDISP8 notype
Adding BRDISP8 to nonterminal dict
Nonterminal BRDISP8()::
Nonterminal name BRDISP8
read_flat_input 596
Hit a nonterminal, returning at: BRDISP32()::
BLines (lines remaining after reading input) = 65401
=============================================
Creating a generator 91
=============================================
ALines (lines before reading input) = 65401
read_input 597
NONTERMINAL: BRDISP32 notype
Adding BRDISP32 to nonterminal dict
Nonterminal BRDISP32()::
Nonterminal name BRDISP32
read_flat_input 597
Hit a nonterminal, returning at: BRDISPz()::
BLines (lines remaining after reading input) = 65399
=============================================
Creating a generator 92
=============================================
ALines (lines before reading input) = 65399
read_input 598
NONTERMINAL: BRDISPz notype
Adding BRDISPz to nonterminal dict
Nonterminal BRDISPz()::
Nonterminal name BRDISPz
read_flat_input 598
Hit a nonterminal, returning at: MEMDISPv()::
BLines (lines remaining after reading input) = 65395
=============================================
Creating a generator 93
=============================================
ALines (lines before reading input) = 65395
read_input 601
NONTERMINAL: MEMDISPv notype
Adding MEMDISPv to nonterminal dict
Nonterminal MEMDISPv()::
Nonterminal name MEMDISPv
read_flat_input 601
Hit a nonterminal, returning at: MEMDISP32()::
BLines (lines remaining after reading input) = 65391
=============================================
Creating a generator 94
=============================================
ALines (lines before reading input) = 65391
read_input 604
NONTERMINAL: MEMDISP32 notype
Adding MEMDISP32 to nonterminal dict
Nonterminal MEMDISP32()::
Nonterminal name MEMDISP32
read_flat_input 604
Hit a nonterminal, returning at: MEMDISP16()::
BLines (lines remaining after reading input) = 65389
=============================================
Creating a generator 95
=============================================
ALines (lines before reading input) = 65389
read_input 605
NONTERMINAL: MEMDISP16 notype
Adding MEMDISP16 to nonterminal dict
Nonterminal MEMDISP16()::
Nonterminal name MEMDISP16
read_flat_input 605
Hit a nonterminal, returning at: MEMDISP8()::
BLines (lines remaining after reading input) = 65387
=============================================
Creating a generator 96
=============================================
ALines (lines before reading input) = 65387
read_input 606
NONTERMINAL: MEMDISP8 notype
Adding MEMDISP8 to nonterminal dict
Nonterminal MEMDISP8()::
Nonterminal name MEMDISP8
read_flat_input 606
Hit a nonterminal, returning at: MEMDISP()::
BLines (lines remaining after reading input) = 65385
=============================================
Creating a generator 97
=============================================
ALines (lines before reading input) = 65385
read_input 607
NONTERMINAL: MEMDISP notype
Adding MEMDISP to nonterminal dict
Nonterminal MEMDISP()::
Nonterminal name MEMDISP
read_flat_input 607
Hit a nonterminal, returning at: MODRM()::
BLines (lines remaining after reading input) = 65380
=============================================
Creating a generator 98
=============================================
ALines (lines before reading input) = 65380
read_input 611
NONTERMINAL: MODRM notype
Adding MODRM to nonterminal dict
Nonterminal MODRM()::
Nonterminal name MODRM
read_flat_input 611
Hit a nonterminal, returning at: MODRM64alt32()::
BLines (lines remaining after reading input) = 65373
=============================================
Creating a generator 99
=============================================
ALines (lines before reading input) = 65373
read_input 617
NONTERMINAL: MODRM64alt32 notype
Adding MODRM64alt32 to nonterminal dict
Nonterminal MODRM64alt32()::
Nonterminal name MODRM64alt32
read_flat_input 617
Hit a nonterminal, returning at: MODRM32()::
BLines (lines remaining after reading input) = 65324
=============================================
Creating a generator 100
=============================================
ALines (lines before reading input) = 65324
read_input 665
NONTERMINAL: MODRM32 notype
Adding MODRM32 to nonterminal dict
Nonterminal MODRM32()::
Nonterminal name MODRM32
read_flat_input 665
Hit a nonterminal, returning at: MODRM16()::
BLines (lines remaining after reading input) = 65299
=============================================
Creating a generator 101
=============================================
ALines (lines before reading input) = 65299
read_input 689
NONTERMINAL: MODRM16 notype
Adding MODRM16 to nonterminal dict
Nonterminal MODRM16()::
Nonterminal name MODRM16
read_flat_input 689
Hit a nonterminal, returning at: SIB()::
BLines (lines remaining after reading input) = 65274
=============================================
Creating a generator 102
=============================================
ALines (lines before reading input) = 65274
read_input 713
NONTERMINAL: SIB notype
Adding SIB to nonterminal dict
Nonterminal SIB()::
Nonterminal name SIB
read_flat_input 713
Hit a nonterminal, returning at: SIB_BASE0()::
BLines (lines remaining after reading input) = 65209
=============================================
Creating a generator 103
=============================================
ALines (lines before reading input) = 65209
read_input 777
NONTERMINAL: SIB_BASE0 notype
Adding SIB_BASE0 to nonterminal dict
Nonterminal SIB_BASE0()::
Nonterminal name SIB_BASE0
read_flat_input 777
Hit a nonterminal, returning at: OVERRIDE_SEG0()::
BLines (lines remaining after reading input) = 65188
=============================================
Creating a generator 104
=============================================
ALines (lines before reading input) = 65188
read_input 797
NONTERMINAL: OVERRIDE_SEG0 notype
Adding OVERRIDE_SEG0 to nonterminal dict
Nonterminal OVERRIDE_SEG0()::
Nonterminal name OVERRIDE_SEG0
read_flat_input 797
Hit a nonterminal, returning at: OVERRIDE_SEG1()::
BLines (lines remaining after reading input) = 65184
=============================================
Creating a generator 105
=============================================
ALines (lines before reading input) = 65184
read_input 800
NONTERMINAL: OVERRIDE_SEG1 notype
Adding OVERRIDE_SEG1 to nonterminal dict
Nonterminal OVERRIDE_SEG1()::
Nonterminal name OVERRIDE_SEG1
read_flat_input 800
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R()::
BLines (lines remaining after reading input) = 65180
=============================================
Creating a generator 106
=============================================
ALines (lines before reading input) = 65180
read_input 803
NONTERMINAL: XMM_R type= xed_reg_enum_t
Adding XMM_R to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R()::
Nonterminal name XMM_R
read_flat_input 803
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_32()::
BLines (lines remaining after reading input) = 65176
=============================================
Creating a generator 107
=============================================
ALines (lines before reading input) = 65176
read_input 806
NONTERMINAL: XMM_R_32 type= xed_reg_enum_t
Adding XMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_32()::
Nonterminal name XMM_R_32
read_flat_input 806
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_64()::
BLines (lines remaining after reading input) = 65167
=============================================
Creating a generator 108
=============================================
ALines (lines before reading input) = 65167
read_input 814
NONTERMINAL: XMM_R_64 type= xed_reg_enum_t
Adding XMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_64()::
Nonterminal name XMM_R_64
read_flat_input 814
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B()::
BLines (lines remaining after reading input) = 65150
=============================================
Creating a generator 109
=============================================
ALines (lines before reading input) = 65150
read_input 830
NONTERMINAL: XMM_B type= xed_reg_enum_t
Adding XMM_B to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B()::
Nonterminal name XMM_B
read_flat_input 830
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_32()::
BLines (lines remaining after reading input) = 65146
=============================================
Creating a generator 110
=============================================
ALines (lines before reading input) = 65146
read_input 833
NONTERMINAL: XMM_B_32 type= xed_reg_enum_t
Adding XMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_32()::
Nonterminal name XMM_B_32
read_flat_input 833
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_64()::
BLines (lines remaining after reading input) = 65137
=============================================
Creating a generator 111
=============================================
ALines (lines before reading input) = 65137
read_input 841
NONTERMINAL: XMM_B_64 type= xed_reg_enum_t
Adding XMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_64()::
Nonterminal name XMM_B_64
read_flat_input 841
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 65120
=============================================
Creating a generator 112
=============================================
ALines (lines before reading input) = 65120
read_input 857
NONTERMINAL: AVX_SPLITTER notype
Adding AVX_SPLITTER to nonterminal dict
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 857
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 65118
=============================================
Creating a generator 113
=============================================
ALines (lines before reading input) = 65118
read_input 858
NONTERMINAL: EVEX_SPLITTER notype
Adding EVEX_SPLITTER to nonterminal dict
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 858
Hit a nonterminal, returning at: BND_R_CHECK()::
BLines (lines remaining after reading input) = 65116
=============================================
Creating a generator 114
=============================================
ALines (lines before reading input) = 65116
read_input 859
NONTERMINAL: BND_R_CHECK notype
Adding BND_R_CHECK to nonterminal dict
Nonterminal BND_R_CHECK()::
Nonterminal name BND_R_CHECK
read_flat_input 859
Hit a nonterminal, returning at: BND_B_CHECK()::
BLines (lines remaining after reading input) = 65099
=============================================
Creating a generator 115
=============================================
ALines (lines before reading input) = 65099
read_input 875
NONTERMINAL: BND_B_CHECK notype
Adding BND_B_CHECK to nonterminal dict
Nonterminal BND_B_CHECK()::
Nonterminal name BND_B_CHECK
read_flat_input 875
Hit a nonterminal, returning at: xed_reg_enum_t BND_R()::
BLines (lines remaining after reading input) = 65082
=============================================
Creating a generator 116
=============================================
ALines (lines before reading input) = 65082
read_input 891
NONTERMINAL: BND_R type= xed_reg_enum_t
Adding BND_R to nonterminal dict
Nonterminal xed_reg_enum_t BND_R()::
Nonterminal name BND_R
read_flat_input 891
Hit a nonterminal, returning at: xed_reg_enum_t BND_B()::
BLines (lines remaining after reading input) = 65065
=============================================
Creating a generator 117
=============================================
ALines (lines before reading input) = 65065
read_input 907
NONTERMINAL: BND_B type= xed_reg_enum_t
Adding BND_B to nonterminal dict
Nonterminal xed_reg_enum_t BND_B()::
Nonterminal name BND_B
read_flat_input 907
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_R()::
BLines (lines remaining after reading input) = 65048
=============================================
Creating a generator 118
=============================================
ALines (lines before reading input) = 65048
read_input 923
NONTERMINAL: A_GPR_R type= xed_reg_enum_t
Adding A_GPR_R to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_R()::
Nonterminal name A_GPR_R
read_flat_input 923
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_B()::
BLines (lines remaining after reading input) = 65031
=============================================
Creating a generator 119
=============================================
ALines (lines before reading input) = 65031
read_input 939
NONTERMINAL: A_GPR_B type= xed_reg_enum_t
Adding A_GPR_B to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_B()::
Nonterminal name A_GPR_B
read_flat_input 939
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE()::
BLines (lines remaining after reading input) = 65014
=============================================
Creating a generator 120
=============================================
ALines (lines before reading input) = 65014
read_input 955
NONTERMINAL: XMM_SE type= xed_reg_enum_t
Adding XMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE()::
Nonterminal name XMM_SE
read_flat_input 955
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE64()::
BLines (lines remaining after reading input) = 65010
=============================================
Creating a generator 121
=============================================
ALines (lines before reading input) = 65010
read_input 958
NONTERMINAL: XMM_SE64 type= xed_reg_enum_t
Adding XMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE64()::
Nonterminal name XMM_SE64
read_flat_input 958
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE32()::
BLines (lines remaining after reading input) = 64993
=============================================
Creating a generator 122
=============================================
ALines (lines before reading input) = 64993
read_input 974
NONTERMINAL: XMM_SE32 type= xed_reg_enum_t
Adding XMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE32()::
Nonterminal name XMM_SE32
read_flat_input 974
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE()::
BLines (lines remaining after reading input) = 64976
=============================================
Creating a generator 123
=============================================
ALines (lines before reading input) = 64976
read_input 990
NONTERMINAL: YMM_SE type= xed_reg_enum_t
Adding YMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE()::
Nonterminal name YMM_SE
read_flat_input 990
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE64()::
BLines (lines remaining after reading input) = 64972
=============================================
Creating a generator 124
=============================================
ALines (lines before reading input) = 64972
read_input 993
NONTERMINAL: YMM_SE64 type= xed_reg_enum_t
Adding YMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE64()::
Nonterminal name YMM_SE64
read_flat_input 993
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE32()::
BLines (lines remaining after reading input) = 64955
=============================================
Creating a generator 125
=============================================
ALines (lines before reading input) = 64955
read_input 1009
NONTERMINAL: YMM_SE32 type= xed_reg_enum_t
Adding YMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE32()::
Nonterminal name YMM_SE32
read_flat_input 1009
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N()::
BLines (lines remaining after reading input) = 64938
=============================================
Creating a generator 126
=============================================
ALines (lines before reading input) = 64938
read_input 1025
NONTERMINAL: XMM_N type= xed_reg_enum_t
Adding XMM_N to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N()::
Nonterminal name XMM_N
read_flat_input 1025
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_32()::
BLines (lines remaining after reading input) = 64934
=============================================
Creating a generator 127
=============================================
ALines (lines before reading input) = 64934
read_input 1028
NONTERMINAL: XMM_N_32 type= xed_reg_enum_t
Adding XMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_32()::
Nonterminal name XMM_N_32
read_flat_input 1028
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_64()::
BLines (lines remaining after reading input) = 64925
=============================================
Creating a generator 128
=============================================
ALines (lines before reading input) = 64925
read_input 1036
NONTERMINAL: XMM_N_64 type= xed_reg_enum_t
Adding XMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_64()::
Nonterminal name XMM_N_64
read_flat_input 1036
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N()::
BLines (lines remaining after reading input) = 64908
=============================================
Creating a generator 129
=============================================
ALines (lines before reading input) = 64908
read_input 1052
NONTERMINAL: YMM_N type= xed_reg_enum_t
Adding YMM_N to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N()::
Nonterminal name YMM_N
read_flat_input 1052
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_32()::
BLines (lines remaining after reading input) = 64904
=============================================
Creating a generator 130
=============================================
ALines (lines before reading input) = 64904
read_input 1055
NONTERMINAL: YMM_N_32 type= xed_reg_enum_t
Adding YMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_32()::
Nonterminal name YMM_N_32
read_flat_input 1055
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_64()::
BLines (lines remaining after reading input) = 64895
=============================================
Creating a generator 131
=============================================
ALines (lines before reading input) = 64895
read_input 1063
NONTERMINAL: YMM_N_64 type= xed_reg_enum_t
Adding YMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_64()::
Nonterminal name YMM_N_64
read_flat_input 1063
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R()::
BLines (lines remaining after reading input) = 64878
=============================================
Creating a generator 132
=============================================
ALines (lines before reading input) = 64878
read_input 1079
NONTERMINAL: YMM_R type= xed_reg_enum_t
Adding YMM_R to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R()::
Nonterminal name YMM_R
read_flat_input 1079
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_32()::
BLines (lines remaining after reading input) = 64874
=============================================
Creating a generator 133
=============================================
ALines (lines before reading input) = 64874
read_input 1082
NONTERMINAL: YMM_R_32 type= xed_reg_enum_t
Adding YMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_32()::
Nonterminal name YMM_R_32
read_flat_input 1082
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_64()::
BLines (lines remaining after reading input) = 64865
=============================================
Creating a generator 134
=============================================
ALines (lines before reading input) = 64865
read_input 1090
NONTERMINAL: YMM_R_64 type= xed_reg_enum_t
Adding YMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_64()::
Nonterminal name YMM_R_64
read_flat_input 1090
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B()::
BLines (lines remaining after reading input) = 64848
=============================================
Creating a generator 135
=============================================
ALines (lines before reading input) = 64848
read_input 1106
NONTERMINAL: YMM_B type= xed_reg_enum_t
Adding YMM_B to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B()::
Nonterminal name YMM_B
read_flat_input 1106
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_32()::
BLines (lines remaining after reading input) = 64844
=============================================
Creating a generator 136
=============================================
ALines (lines before reading input) = 64844
read_input 1109
NONTERMINAL: YMM_B_32 type= xed_reg_enum_t
Adding YMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_32()::
Nonterminal name YMM_B_32
read_flat_input 1109
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_64()::
BLines (lines remaining after reading input) = 64835
=============================================
Creating a generator 137
=============================================
ALines (lines before reading input) = 64835
read_input 1117
NONTERMINAL: YMM_B_64 type= xed_reg_enum_t
Adding YMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_64()::
Nonterminal name YMM_B_64
read_flat_input 1117
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 64818
=============================================
Creating a generator 138
=============================================
ALines (lines before reading input) = 64818
read_input 1133
NONTERMINAL: AVX_SPLITTER notype
FOUND OLD PARSER FOR AVX_SPLITTER
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 1133
Hit a nonterminal, returning at: SE_IMM8()::
BLines (lines remaining after reading input) = 64815
=============================================
Creating a generator 138
=============================================
ALines (lines before reading input) = 64815
read_input 1135
NONTERMINAL: SE_IMM8 notype
Adding SE_IMM8 to nonterminal dict
Nonterminal SE_IMM8()::
Nonterminal name SE_IMM8
read_flat_input 1135
Hit a nonterminal, returning at: VMODRM_YMM()::
BLines (lines remaining after reading input) = 64813
=============================================
Creating a generator 139
=============================================
ALines (lines before reading input) = 64813
read_input 1136
NONTERMINAL: VMODRM_YMM notype
Adding VMODRM_YMM to nonterminal dict
Nonterminal VMODRM_YMM()::
Nonterminal name VMODRM_YMM
read_flat_input 1136
Hit a nonterminal, returning at: VMODRM_XMM()::
BLines (lines remaining after reading input) = 64809
=============================================
Creating a generator 140
=============================================
ALines (lines before reading input) = 64809
read_input 1139
NONTERMINAL: VMODRM_XMM notype
Adding VMODRM_XMM to nonterminal dict
Nonterminal VMODRM_XMM()::
Nonterminal name VMODRM_XMM
read_flat_input 1139
Hit a nonterminal, returning at: VSIB_YMM()::
BLines (lines remaining after reading input) = 64805
=============================================
Creating a generator 141
=============================================
ALines (lines before reading input) = 64805
read_input 1142
NONTERMINAL: VSIB_YMM notype
Adding VSIB_YMM to nonterminal dict
Nonterminal VSIB_YMM()::
Nonterminal name VSIB_YMM
read_flat_input 1142
Hit a nonterminal, returning at: VSIB_XMM()::
BLines (lines remaining after reading input) = 64800
=============================================
Creating a generator 142
=============================================
ALines (lines before reading input) = 64800
read_input 1146
NONTERMINAL: VSIB_XMM notype
Adding VSIB_XMM to nonterminal dict
Nonterminal VSIB_XMM()::
Nonterminal name VSIB_XMM
read_flat_input 1146
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 64795
=============================================
Creating a generator 143
=============================================
ALines (lines before reading input) = 64795
read_input 1150
NONTERMINAL: VSIB_INDEX_YMM type= xed_reg_enum_t
Adding VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_YMM()::
Nonterminal name VSIB_INDEX_YMM
read_flat_input 1150
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 64778
=============================================
Creating a generator 144
=============================================
ALines (lines before reading input) = 64778
read_input 1166
NONTERMINAL: VSIB_INDEX_XMM type= xed_reg_enum_t
Adding VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_XMM()::
Nonterminal name VSIB_INDEX_XMM
read_flat_input 1166
Hit a nonterminal, returning at: VSIB_BASE()::
BLines (lines remaining after reading input) = 64761
=============================================
Creating a generator 145
=============================================
ALines (lines before reading input) = 64761
read_input 1182
NONTERMINAL: VSIB_BASE notype
Adding VSIB_BASE to nonterminal dict
Nonterminal VSIB_BASE()::
Nonterminal name VSIB_BASE
read_flat_input 1182
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_N()::
BLines (lines remaining after reading input) = 64742
=============================================
Creating a generator 146
=============================================
ALines (lines before reading input) = 64742
read_input 1200
NONTERMINAL: VGPRy_N type= xed_reg_enum_t
Adding VGPRy_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_N()::
Nonterminal name VGPRy_N
read_flat_input 1200
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N()::
BLines (lines remaining after reading input) = 64738
=============================================
Creating a generator 147
=============================================
ALines (lines before reading input) = 64738
read_input 1203
NONTERMINAL: VGPR32_N type= xed_reg_enum_t
Adding VGPR32_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N()::
Nonterminal name VGPR32_N
read_flat_input 1203
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B()::
BLines (lines remaining after reading input) = 64734
=============================================
Creating a generator 148
=============================================
ALines (lines before reading input) = 64734
read_input 1206
NONTERMINAL: VGPR32_B type= xed_reg_enum_t
Adding VGPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B()::
Nonterminal name VGPR32_B
read_flat_input 1206
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R()::
BLines (lines remaining after reading input) = 64730
=============================================
Creating a generator 149
=============================================
ALines (lines before reading input) = 64730
read_input 1209
NONTERMINAL: VGPR32_R type= xed_reg_enum_t
Adding VGPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R()::
Nonterminal name VGPR32_R
read_flat_input 1209
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_32()::
BLines (lines remaining after reading input) = 64726
=============================================
Creating a generator 150
=============================================
ALines (lines before reading input) = 64726
read_input 1212
NONTERMINAL: VGPR32_N_32 type= xed_reg_enum_t
Adding VGPR32_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_32()::
Nonterminal name VGPR32_N_32
read_flat_input 1212
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_64()::
BLines (lines remaining after reading input) = 64717
=============================================
Creating a generator 151
=============================================
ALines (lines before reading input) = 64717
read_input 1220
NONTERMINAL: VGPR32_N_64 type= xed_reg_enum_t
Adding VGPR32_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_64()::
Nonterminal name VGPR32_N_64
read_flat_input 1220
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_N()::
BLines (lines remaining after reading input) = 64700
=============================================
Creating a generator 152
=============================================
ALines (lines before reading input) = 64700
read_input 1236
NONTERMINAL: VGPR64_N type= xed_reg_enum_t
Adding VGPR64_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_N()::
Nonterminal name VGPR64_N
read_flat_input 1236
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_32()::
BLines (lines remaining after reading input) = 64683
=============================================
Creating a generator 153
=============================================
ALines (lines before reading input) = 64683
read_input 1252
NONTERMINAL: VGPR32_R_32 type= xed_reg_enum_t
Adding VGPR32_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_32()::
Nonterminal name VGPR32_R_32
read_flat_input 1252
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_64()::
BLines (lines remaining after reading input) = 64674
=============================================
Creating a generator 154
=============================================
ALines (lines before reading input) = 64674
read_input 1260
NONTERMINAL: VGPR32_R_64 type= xed_reg_enum_t
Adding VGPR32_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_64()::
Nonterminal name VGPR32_R_64
read_flat_input 1260
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_R()::
BLines (lines remaining after reading input) = 64657
=============================================
Creating a generator 155
=============================================
ALines (lines before reading input) = 64657
read_input 1276
NONTERMINAL: VGPR64_R type= xed_reg_enum_t
Adding VGPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_R()::
Nonterminal name VGPR64_R
read_flat_input 1276
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_32()::
BLines (lines remaining after reading input) = 64640
=============================================
Creating a generator 156
=============================================
ALines (lines before reading input) = 64640
read_input 1292
NONTERMINAL: VGPR32_B_32 type= xed_reg_enum_t
Adding VGPR32_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_32()::
Nonterminal name VGPR32_B_32
read_flat_input 1292
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_64()::
BLines (lines remaining after reading input) = 64631
=============================================
Creating a generator 157
=============================================
ALines (lines before reading input) = 64631
read_input 1300
NONTERMINAL: VGPR32_B_64 type= xed_reg_enum_t
Adding VGPR32_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_64()::
Nonterminal name VGPR32_B_64
read_flat_input 1300
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_B()::
BLines (lines remaining after reading input) = 64614
=============================================
Creating a generator 158
=============================================
ALines (lines before reading input) = 64614
read_input 1316
NONTERMINAL: VGPR64_B type= xed_reg_enum_t
Adding VGPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_B()::
Nonterminal name VGPR64_B
read_flat_input 1316
Hit a nonterminal, returning at: NELEM_TUPLE1_4X()::
BLines (lines remaining after reading input) = 64597
=============================================
Creating a generator 159
=============================================
ALines (lines before reading input) = 64597
read_input 1332
NONTERMINAL: NELEM_TUPLE1_4X notype
Adding NELEM_TUPLE1_4X to nonterminal dict
Nonterminal NELEM_TUPLE1_4X()::
Nonterminal name NELEM_TUPLE1_4X
read_flat_input 1332
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 64593
=============================================
Creating a generator 160
=============================================
ALines (lines before reading input) = 64593
read_input 1335
NONTERMINAL: EVEX_SPLITTER notype
FOUND OLD PARSER FOR EVEX_SPLITTER
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 1335
Hit a nonterminal, returning at: AVX512_ROUND()::
BLines (lines remaining after reading input) = 64589
=============================================
Creating a generator 160
=============================================
ALines (lines before reading input) = 64589
read_input 1338
NONTERMINAL: AVX512_ROUND notype
Adding AVX512_ROUND to nonterminal dict
Nonterminal AVX512_ROUND()::
Nonterminal name AVX512_ROUND
read_flat_input 1338
Hit a nonterminal, returning at: SAE()::
BLines (lines remaining after reading input) = 64584
=============================================
Creating a generator 161
=============================================
ALines (lines before reading input) = 64584
read_input 1342
NONTERMINAL: SAE notype
Adding SAE to nonterminal dict
Nonterminal SAE()::
Nonterminal name SAE
read_flat_input 1342
Hit a nonterminal, returning at: ESIZE_128_BITS()::
BLines (lines remaining after reading input) = 64581
=============================================
Creating a generator 162
=============================================
ALines (lines before reading input) = 64581
read_input 1344
NONTERMINAL: ESIZE_128_BITS notype
Adding ESIZE_128_BITS to nonterminal dict
Nonterminal ESIZE_128_BITS()::
Nonterminal name ESIZE_128_BITS
read_flat_input 1344
Hit a nonterminal, returning at: ESIZE_64_BITS()::
BLines (lines remaining after reading input) = 64579
=============================================
Creating a generator 163
=============================================
ALines (lines before reading input) = 64579
read_input 1345
NONTERMINAL: ESIZE_64_BITS notype
Adding ESIZE_64_BITS to nonterminal dict
Nonterminal ESIZE_64_BITS()::
Nonterminal name ESIZE_64_BITS
read_flat_input 1345
Hit a nonterminal, returning at: ESIZE_32_BITS()::
BLines (lines remaining after reading input) = 64577
=============================================
Creating a generator 164
=============================================
ALines (lines before reading input) = 64577
read_input 1346
NONTERMINAL: ESIZE_32_BITS notype
Adding ESIZE_32_BITS to nonterminal dict
Nonterminal ESIZE_32_BITS()::
Nonterminal name ESIZE_32_BITS
read_flat_input 1346
Hit a nonterminal, returning at: ESIZE_16_BITS()::
BLines (lines remaining after reading input) = 64575
=============================================
Creating a generator 165
=============================================
ALines (lines before reading input) = 64575
read_input 1347
NONTERMINAL: ESIZE_16_BITS notype
Adding ESIZE_16_BITS to nonterminal dict
Nonterminal ESIZE_16_BITS()::
Nonterminal name ESIZE_16_BITS
read_flat_input 1347
Hit a nonterminal, returning at: ESIZE_8_BITS()::
BLines (lines remaining after reading input) = 64573
=============================================
Creating a generator 166
=============================================
ALines (lines before reading input) = 64573
read_input 1348
NONTERMINAL: ESIZE_8_BITS notype
Adding ESIZE_8_BITS to nonterminal dict
Nonterminal ESIZE_8_BITS()::
Nonterminal name ESIZE_8_BITS
read_flat_input 1348
Hit a nonterminal, returning at: ESIZE_4_BITS()::
BLines (lines remaining after reading input) = 64571
=============================================
Creating a generator 167
=============================================
ALines (lines before reading input) = 64571
read_input 1349
NONTERMINAL: ESIZE_4_BITS notype
Adding ESIZE_4_BITS to nonterminal dict
Nonterminal ESIZE_4_BITS()::
Nonterminal name ESIZE_4_BITS
read_flat_input 1349
Hit a nonterminal, returning at: ESIZE_2_BITS()::
BLines (lines remaining after reading input) = 64569
=============================================
Creating a generator 168
=============================================
ALines (lines before reading input) = 64569
read_input 1350
NONTERMINAL: ESIZE_2_BITS notype
Adding ESIZE_2_BITS to nonterminal dict
Nonterminal ESIZE_2_BITS()::
Nonterminal name ESIZE_2_BITS
read_flat_input 1350
Hit a nonterminal, returning at: ESIZE_1_BITS()::
BLines (lines remaining after reading input) = 64567
=============================================
Creating a generator 169
=============================================
ALines (lines before reading input) = 64567
read_input 1351
NONTERMINAL: ESIZE_1_BITS notype
Adding ESIZE_1_BITS to nonterminal dict
Nonterminal ESIZE_1_BITS()::
Nonterminal name ESIZE_1_BITS
read_flat_input 1351
Hit a nonterminal, returning at: NELEM_MOVDDUP()::
BLines (lines remaining after reading input) = 64565
=============================================
Creating a generator 170
=============================================
ALines (lines before reading input) = 64565
read_input 1352
NONTERMINAL: NELEM_MOVDDUP notype
Adding NELEM_MOVDDUP to nonterminal dict
Nonterminal NELEM_MOVDDUP()::
Nonterminal name NELEM_MOVDDUP
read_flat_input 1352
Hit a nonterminal, returning at: NELEM_FULLMEM()::
BLines (lines remaining after reading input) = 64561
=============================================
Creating a generator 171
=============================================
ALines (lines before reading input) = 64561
read_input 1355
NONTERMINAL: NELEM_FULLMEM notype
Adding NELEM_FULLMEM to nonterminal dict
Nonterminal NELEM_FULLMEM()::
Nonterminal name NELEM_FULLMEM
read_flat_input 1355
Hit a nonterminal, returning at: NELEM_HALFMEM()::
BLines (lines remaining after reading input) = 64530
=============================================
Creating a generator 172
=============================================
ALines (lines before reading input) = 64530
read_input 1385
NONTERMINAL: NELEM_HALFMEM notype
Adding NELEM_HALFMEM to nonterminal dict
Nonterminal NELEM_HALFMEM()::
Nonterminal name NELEM_HALFMEM
read_flat_input 1385
Hit a nonterminal, returning at: NELEM_QUARTERMEM()::
BLines (lines remaining after reading input) = 64499
=============================================
Creating a generator 173
=============================================
ALines (lines before reading input) = 64499
read_input 1415
NONTERMINAL: NELEM_QUARTERMEM notype
Adding NELEM_QUARTERMEM to nonterminal dict
Nonterminal NELEM_QUARTERMEM()::
Nonterminal name NELEM_QUARTERMEM
read_flat_input 1415
Hit a nonterminal, returning at: NELEM_EIGHTHMEM()::
BLines (lines remaining after reading input) = 64468
=============================================
Creating a generator 174
=============================================
ALines (lines before reading input) = 64468
read_input 1445
NONTERMINAL: NELEM_EIGHTHMEM notype
Adding NELEM_EIGHTHMEM to nonterminal dict
Nonterminal NELEM_EIGHTHMEM()::
Nonterminal name NELEM_EIGHTHMEM
read_flat_input 1445
Hit a nonterminal, returning at: NELEM_GPR_READER_BYTE()::
BLines (lines remaining after reading input) = 64437
=============================================
Creating a generator 175
=============================================
ALines (lines before reading input) = 64437
read_input 1475
NONTERMINAL: NELEM_GPR_READER_BYTE notype
Adding NELEM_GPR_READER_BYTE to nonterminal dict
Nonterminal NELEM_GPR_READER_BYTE()::
Nonterminal name NELEM_GPR_READER_BYTE
read_flat_input 1475
Hit a nonterminal, returning at: NELEM_GPR_READER_WORD()::
BLines (lines remaining after reading input) = 64433
=============================================
Creating a generator 176
=============================================
ALines (lines before reading input) = 64433
read_input 1478
NONTERMINAL: NELEM_GPR_READER_WORD notype
Adding NELEM_GPR_READER_WORD to nonterminal dict
Nonterminal NELEM_GPR_READER_WORD()::
Nonterminal name NELEM_GPR_READER_WORD
read_flat_input 1478
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_D()::
BLines (lines remaining after reading input) = 64429
=============================================
Creating a generator 177
=============================================
ALines (lines before reading input) = 64429
read_input 1481
NONTERMINAL: NELEM_GPR_WRITER_LDOP_D notype
Adding NELEM_GPR_WRITER_LDOP_D to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_D()::
Nonterminal name NELEM_GPR_WRITER_LDOP_D
read_flat_input 1481
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_Q()::
BLines (lines remaining after reading input) = 64425
=============================================
Creating a generator 178
=============================================
ALines (lines before reading input) = 64425
read_input 1484
NONTERMINAL: NELEM_GPR_WRITER_LDOP_Q notype
Adding NELEM_GPR_WRITER_LDOP_Q to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_Q()::
Nonterminal name NELEM_GPR_WRITER_LDOP_Q
read_flat_input 1484
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_BYTE()::
BLines (lines remaining after reading input) = 64421
=============================================
Creating a generator 179
=============================================
ALines (lines before reading input) = 64421
read_input 1487
NONTERMINAL: NELEM_GPR_WRITER_STORE_BYTE notype
Adding NELEM_GPR_WRITER_STORE_BYTE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_BYTE()::
Nonterminal name NELEM_GPR_WRITER_STORE_BYTE
read_flat_input 1487
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_WORD()::
BLines (lines remaining after reading input) = 64417
=============================================
Creating a generator 180
=============================================
ALines (lines before reading input) = 64417
read_input 1490
NONTERMINAL: NELEM_GPR_WRITER_STORE_WORD notype
Adding NELEM_GPR_WRITER_STORE_WORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_WORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_WORD
read_flat_input 1490
Hit a nonterminal, returning at: NELEM_TUPLE1_BYTE()::
BLines (lines remaining after reading input) = 64413
=============================================
Creating a generator 181
=============================================
ALines (lines before reading input) = 64413
read_input 1493
NONTERMINAL: NELEM_TUPLE1_BYTE notype
Adding NELEM_TUPLE1_BYTE to nonterminal dict
Nonterminal NELEM_TUPLE1_BYTE()::
Nonterminal name NELEM_TUPLE1_BYTE
read_flat_input 1493
Hit a nonterminal, returning at: NELEM_TUPLE1_WORD()::
BLines (lines remaining after reading input) = 64409
=============================================
Creating a generator 182
=============================================
ALines (lines before reading input) = 64409
read_input 1496
NONTERMINAL: NELEM_TUPLE1_WORD notype
Adding NELEM_TUPLE1_WORD to nonterminal dict
Nonterminal NELEM_TUPLE1_WORD()::
Nonterminal name NELEM_TUPLE1_WORD
read_flat_input 1496
Hit a nonterminal, returning at: NELEM_SCALAR()::
BLines (lines remaining after reading input) = 64405
=============================================
Creating a generator 183
=============================================
ALines (lines before reading input) = 64405
read_input 1499
NONTERMINAL: NELEM_SCALAR notype
Adding NELEM_SCALAR to nonterminal dict
Nonterminal NELEM_SCALAR()::
Nonterminal name NELEM_SCALAR
read_flat_input 1499
Hit a nonterminal, returning at: NELEM_TUPLE1_SUBDWORD()::
BLines (lines remaining after reading input) = 64401
=============================================
Creating a generator 184
=============================================
ALines (lines before reading input) = 64401
read_input 1502
NONTERMINAL: NELEM_TUPLE1_SUBDWORD notype
Adding NELEM_TUPLE1_SUBDWORD to nonterminal dict
Nonterminal NELEM_TUPLE1_SUBDWORD()::
Nonterminal name NELEM_TUPLE1_SUBDWORD
read_flat_input 1502
Hit a nonterminal, returning at: NELEM_GPR_READER()::
BLines (lines remaining after reading input) = 64397
=============================================
Creating a generator 185
=============================================
ALines (lines before reading input) = 64397
read_input 1505
NONTERMINAL: NELEM_GPR_READER notype
Adding NELEM_GPR_READER to nonterminal dict
Nonterminal NELEM_GPR_READER()::
Nonterminal name NELEM_GPR_READER
read_flat_input 1505
Hit a nonterminal, returning at: NELEM_GPR_READER_SUBDWORD()::
BLines (lines remaining after reading input) = 64393
=============================================
Creating a generator 186
=============================================
ALines (lines before reading input) = 64393
read_input 1508
NONTERMINAL: NELEM_GPR_READER_SUBDWORD notype
Adding NELEM_GPR_READER_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_READER_SUBDWORD()::
Nonterminal name NELEM_GPR_READER_SUBDWORD
read_flat_input 1508
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP()::
BLines (lines remaining after reading input) = 64389
=============================================
Creating a generator 187
=============================================
ALines (lines before reading input) = 64389
read_input 1511
NONTERMINAL: NELEM_GPR_WRITER_LDOP notype
Adding NELEM_GPR_WRITER_LDOP to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP()::
Nonterminal name NELEM_GPR_WRITER_LDOP
read_flat_input 1511
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE()::
BLines (lines remaining after reading input) = 64385
=============================================
Creating a generator 188
=============================================
ALines (lines before reading input) = 64385
read_input 1514
NONTERMINAL: NELEM_GPR_WRITER_STORE notype
Adding NELEM_GPR_WRITER_STORE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE()::
Nonterminal name NELEM_GPR_WRITER_STORE
read_flat_input 1514
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_SUBDWORD()::
BLines (lines remaining after reading input) = 64381
=============================================
Creating a generator 189
=============================================
ALines (lines before reading input) = 64381
read_input 1517
NONTERMINAL: NELEM_GPR_WRITER_STORE_SUBDWORD notype
Adding NELEM_GPR_WRITER_STORE_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_SUBDWORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_SUBDWORD
read_flat_input 1517
Hit a nonterminal, returning at: NELEM_TUPLE1()::
BLines (lines remaining after reading input) = 64377
=============================================
Creating a generator 190
=============================================
ALines (lines before reading input) = 64377
read_input 1520
NONTERMINAL: NELEM_TUPLE1 notype
Adding NELEM_TUPLE1 to nonterminal dict
Nonterminal NELEM_TUPLE1()::
Nonterminal name NELEM_TUPLE1
read_flat_input 1520
Hit a nonterminal, returning at: NELEM_GSCAT()::
BLines (lines remaining after reading input) = 64373
=============================================
Creating a generator 191
=============================================
ALines (lines before reading input) = 64373
read_input 1523
NONTERMINAL: NELEM_GSCAT notype
Adding NELEM_GSCAT to nonterminal dict
Nonterminal NELEM_GSCAT()::
Nonterminal name NELEM_GSCAT
read_flat_input 1523
Hit a nonterminal, returning at: NELEM_TUPLE2()::
BLines (lines remaining after reading input) = 64369
=============================================
Creating a generator 192
=============================================
ALines (lines before reading input) = 64369
read_input 1526
NONTERMINAL: NELEM_TUPLE2 notype
Adding NELEM_TUPLE2 to nonterminal dict
Nonterminal NELEM_TUPLE2()::
Nonterminal name NELEM_TUPLE2
read_flat_input 1526
Hit a nonterminal, returning at: NELEM_TUPLE4()::
BLines (lines remaining after reading input) = 64365
=============================================
Creating a generator 193
=============================================
ALines (lines before reading input) = 64365
read_input 1529
NONTERMINAL: NELEM_TUPLE4 notype
Adding NELEM_TUPLE4 to nonterminal dict
Nonterminal NELEM_TUPLE4()::
Nonterminal name NELEM_TUPLE4
read_flat_input 1529
Hit a nonterminal, returning at: NELEM_TUPLE8()::
BLines (lines remaining after reading input) = 64361
=============================================
Creating a generator 194
=============================================
ALines (lines before reading input) = 64361
read_input 1532
NONTERMINAL: NELEM_TUPLE8 notype
Adding NELEM_TUPLE8 to nonterminal dict
Nonterminal NELEM_TUPLE8()::
Nonterminal name NELEM_TUPLE8
read_flat_input 1532
Hit a nonterminal, returning at: NELEM_MEM128()::
BLines (lines remaining after reading input) = 64357
=============================================
Creating a generator 195
=============================================
ALines (lines before reading input) = 64357
read_input 1535
NONTERMINAL: NELEM_MEM128 notype
Adding NELEM_MEM128 to nonterminal dict
Nonterminal NELEM_MEM128()::
Nonterminal name NELEM_MEM128
read_flat_input 1535
Hit a nonterminal, returning at: NELEM_FULL()::
BLines (lines remaining after reading input) = 64354
=============================================
Creating a generator 196
=============================================
ALines (lines before reading input) = 64354
read_input 1537
NONTERMINAL: NELEM_FULL notype
Adding NELEM_FULL to nonterminal dict
Nonterminal NELEM_FULL()::
Nonterminal name NELEM_FULL
read_flat_input 1537
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 64335
=============================================
Creating a generator 197
=============================================
ALines (lines before reading input) = 64335
read_input 1555
NONTERMINAL: NELEM_HALF notype
Adding NELEM_HALF to nonterminal dict
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 1555
Hit a nonterminal, returning at: FIX_ROUND_LEN512()::
BLines (lines remaining after reading input) = 64328
=============================================
Creating a generator 198
=============================================
ALines (lines before reading input) = 64328
read_input 1561
NONTERMINAL: FIX_ROUND_LEN512 notype
Adding FIX_ROUND_LEN512 to nonterminal dict
Nonterminal FIX_ROUND_LEN512()::
Nonterminal name FIX_ROUND_LEN512
read_flat_input 1561
Hit a nonterminal, returning at: FIX_ROUND_LEN128()::
BLines (lines remaining after reading input) = 64324
=============================================
Creating a generator 199
=============================================
ALines (lines before reading input) = 64324
read_input 1564
NONTERMINAL: FIX_ROUND_LEN128 notype
Adding FIX_ROUND_LEN128 to nonterminal dict
Nonterminal FIX_ROUND_LEN128()::
Nonterminal name FIX_ROUND_LEN128
read_flat_input 1564
Hit a nonterminal, returning at: UISA_VMODRM_ZMM()::
BLines (lines remaining after reading input) = 64320
=============================================
Creating a generator 200
=============================================
ALines (lines before reading input) = 64320
read_input 1567
NONTERMINAL: UISA_VMODRM_ZMM notype
Adding UISA_VMODRM_ZMM to nonterminal dict
Nonterminal UISA_VMODRM_ZMM()::
Nonterminal name UISA_VMODRM_ZMM
read_flat_input 1567
Hit a nonterminal, returning at: UISA_VMODRM_YMM()::
BLines (lines remaining after reading input) = 64316
=============================================
Creating a generator 201
=============================================
ALines (lines before reading input) = 64316
read_input 1570
NONTERMINAL: UISA_VMODRM_YMM notype
Adding UISA_VMODRM_YMM to nonterminal dict
Nonterminal UISA_VMODRM_YMM()::
Nonterminal name UISA_VMODRM_YMM
read_flat_input 1570
Hit a nonterminal, returning at: UISA_VMODRM_XMM()::
BLines (lines remaining after reading input) = 64312
=============================================
Creating a generator 202
=============================================
ALines (lines before reading input) = 64312
read_input 1573
NONTERMINAL: UISA_VMODRM_XMM notype
Adding UISA_VMODRM_XMM to nonterminal dict
Nonterminal UISA_VMODRM_XMM()::
Nonterminal name UISA_VMODRM_XMM
read_flat_input 1573
Hit a nonterminal, returning at: UISA_VSIB_ZMM()::
BLines (lines remaining after reading input) = 64308
=============================================
Creating a generator 203
=============================================
ALines (lines before reading input) = 64308
read_input 1576
NONTERMINAL: UISA_VSIB_ZMM notype
Adding UISA_VSIB_ZMM to nonterminal dict
Nonterminal UISA_VSIB_ZMM()::
Nonterminal name UISA_VSIB_ZMM
read_flat_input 1576
Hit a nonterminal, returning at: UISA_VSIB_YMM()::
BLines (lines remaining after reading input) = 64303
=============================================
Creating a generator 204
=============================================
ALines (lines before reading input) = 64303
read_input 1580
NONTERMINAL: UISA_VSIB_YMM notype
Adding UISA_VSIB_YMM to nonterminal dict
Nonterminal UISA_VSIB_YMM()::
Nonterminal name UISA_VSIB_YMM
read_flat_input 1580
Hit a nonterminal, returning at: UISA_VSIB_XMM()::
BLines (lines remaining after reading input) = 64298
=============================================
Creating a generator 205
=============================================
ALines (lines before reading input) = 64298
read_input 1584
NONTERMINAL: UISA_VSIB_XMM notype
Adding UISA_VSIB_XMM to nonterminal dict
Nonterminal UISA_VSIB_XMM()::
Nonterminal name UISA_VSIB_XMM
read_flat_input 1584
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
BLines (lines remaining after reading input) = 64293
=============================================
Creating a generator 206
=============================================
ALines (lines before reading input) = 64293
read_input 1588
NONTERMINAL: UISA_VSIB_INDEX_ZMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_ZMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
Nonterminal name UISA_VSIB_INDEX_ZMM
read_flat_input 1588
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 64260
=============================================
Creating a generator 207
=============================================
ALines (lines before reading input) = 64260
read_input 1620
NONTERMINAL: UISA_VSIB_INDEX_YMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
Nonterminal name UISA_VSIB_INDEX_YMM
read_flat_input 1620
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 64227
=============================================
Creating a generator 208
=============================================
ALines (lines before reading input) = 64227
read_input 1652
NONTERMINAL: UISA_VSIB_INDEX_XMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
Nonterminal name UISA_VSIB_INDEX_XMM
read_flat_input 1652
Hit a nonterminal, returning at: UISA_VSIB_BASE()::
BLines (lines remaining after reading input) = 64194
=============================================
Creating a generator 209
=============================================
ALines (lines before reading input) = 64194
read_input 1684
NONTERMINAL: UISA_VSIB_BASE notype
Adding UISA_VSIB_BASE to nonterminal dict
Nonterminal UISA_VSIB_BASE()::
Nonterminal name UISA_VSIB_BASE
read_flat_input 1684
Hit a nonterminal, returning at: xed_reg_enum_t MASK1()::
BLines (lines remaining after reading input) = 64175
=============================================
Creating a generator 210
=============================================
ALines (lines before reading input) = 64175
read_input 1702
NONTERMINAL: MASK1 type= xed_reg_enum_t
Adding MASK1 to nonterminal dict
Nonterminal xed_reg_enum_t MASK1()::
Nonterminal name MASK1
read_flat_input 1702
Hit a nonterminal, returning at: xed_reg_enum_t MASKNOT0()::
BLines (lines remaining after reading input) = 64166
=============================================
Creating a generator 211
=============================================
ALines (lines before reading input) = 64166
read_input 1710
NONTERMINAL: MASKNOT0 type= xed_reg_enum_t
Adding MASKNOT0 to nonterminal dict
Nonterminal xed_reg_enum_t MASKNOT0()::
Nonterminal name MASKNOT0
read_flat_input 1710
Hit a nonterminal, returning at: xed_reg_enum_t MASK_R()::
BLines (lines remaining after reading input) = 64157
=============================================
Creating a generator 212
=============================================
ALines (lines before reading input) = 64157
read_input 1718
NONTERMINAL: MASK_R type= xed_reg_enum_t
Adding MASK_R to nonterminal dict
Nonterminal xed_reg_enum_t MASK_R()::
Nonterminal name MASK_R
read_flat_input 1718
Hit a nonterminal, returning at: xed_reg_enum_t MASK_B()::
BLines (lines remaining after reading input) = 64148
=============================================
Creating a generator 213
=============================================
ALines (lines before reading input) = 64148
read_input 1726
NONTERMINAL: MASK_B type= xed_reg_enum_t
Adding MASK_B to nonterminal dict
Nonterminal xed_reg_enum_t MASK_B()::
Nonterminal name MASK_B
read_flat_input 1726
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N()::
BLines (lines remaining after reading input) = 64139
=============================================
Creating a generator 214
=============================================
ALines (lines before reading input) = 64139
read_input 1734
NONTERMINAL: MASK_N type= xed_reg_enum_t
Adding MASK_N to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N()::
Nonterminal name MASK_N
read_flat_input 1734
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N64()::
BLines (lines remaining after reading input) = 64135
=============================================
Creating a generator 215
=============================================
ALines (lines before reading input) = 64135
read_input 1737
NONTERMINAL: MASK_N64 type= xed_reg_enum_t
Adding MASK_N64 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N64()::
Nonterminal name MASK_N64
read_flat_input 1737
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N32()::
BLines (lines remaining after reading input) = 64126
=============================================
Creating a generator 216
=============================================
ALines (lines before reading input) = 64126
read_input 1745
NONTERMINAL: MASK_N32 type= xed_reg_enum_t
Adding MASK_N32 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N32()::
Nonterminal name MASK_N32
read_flat_input 1745
Hit a nonterminal, returning at: xed_reg_enum_t GPRm_B()::
BLines (lines remaining after reading input) = 64117
=============================================
Creating a generator 217
=============================================
ALines (lines before reading input) = 64117
read_input 1753
NONTERMINAL: GPRm_B type= xed_reg_enum_t
Adding GPRm_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRm_B()::
Nonterminal name GPRm_B
read_flat_input 1753
Hit a nonterminal, returning at: xed_reg_enum_t GPRm_R()::
BLines (lines remaining after reading input) = 64113
=============================================
Creating a generator 218
=============================================
ALines (lines before reading input) = 64113
read_input 1756
NONTERMINAL: GPRm_R type= xed_reg_enum_t
Adding GPRm_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRm_R()::
Nonterminal name GPRm_R
read_flat_input 1756
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3()::
BLines (lines remaining after reading input) = 64109
=============================================
Creating a generator 219
=============================================
ALines (lines before reading input) = 64109
read_input 1759
NONTERMINAL: XMM_R3 type= xed_reg_enum_t
Adding XMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3()::
Nonterminal name XMM_R3
read_flat_input 1759
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_32()::
BLines (lines remaining after reading input) = 64105
=============================================
Creating a generator 220
=============================================
ALines (lines before reading input) = 64105
read_input 1762
NONTERMINAL: XMM_R3_32 type= xed_reg_enum_t
Adding XMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_32()::
Nonterminal name XMM_R3_32
read_flat_input 1762
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_64()::
BLines (lines remaining after reading input) = 64096
=============================================
Creating a generator 221
=============================================
ALines (lines before reading input) = 64096
read_input 1770
NONTERMINAL: XMM_R3_64 type= xed_reg_enum_t
Adding XMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_64()::
Nonterminal name XMM_R3_64
read_flat_input 1770
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3()::
BLines (lines remaining after reading input) = 64063
=============================================
Creating a generator 222
=============================================
ALines (lines before reading input) = 64063
read_input 1802
NONTERMINAL: YMM_R3 type= xed_reg_enum_t
Adding YMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3()::
Nonterminal name YMM_R3
read_flat_input 1802
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_32()::
BLines (lines remaining after reading input) = 64059
=============================================
Creating a generator 223
=============================================
ALines (lines before reading input) = 64059
read_input 1805
NONTERMINAL: YMM_R3_32 type= xed_reg_enum_t
Adding YMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_32()::
Nonterminal name YMM_R3_32
read_flat_input 1805
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_64()::
BLines (lines remaining after reading input) = 64050
=============================================
Creating a generator 224
=============================================
ALines (lines before reading input) = 64050
read_input 1813
NONTERMINAL: YMM_R3_64 type= xed_reg_enum_t
Adding YMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_64()::
Nonterminal name YMM_R3_64
read_flat_input 1813
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3()::
BLines (lines remaining after reading input) = 64017
=============================================
Creating a generator 225
=============================================
ALines (lines before reading input) = 64017
read_input 1845
NONTERMINAL: ZMM_R3 type= xed_reg_enum_t
Adding ZMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3()::
Nonterminal name ZMM_R3
read_flat_input 1845
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_32()::
BLines (lines remaining after reading input) = 64013
=============================================
Creating a generator 226
=============================================
ALines (lines before reading input) = 64013
read_input 1848
NONTERMINAL: ZMM_R3_32 type= xed_reg_enum_t
Adding ZMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_32()::
Nonterminal name ZMM_R3_32
read_flat_input 1848
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_64()::
BLines (lines remaining after reading input) = 64004
=============================================
Creating a generator 227
=============================================
ALines (lines before reading input) = 64004
read_input 1856
NONTERMINAL: ZMM_R3_64 type= xed_reg_enum_t
Adding ZMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_64()::
Nonterminal name ZMM_R3_64
read_flat_input 1856
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3()::
BLines (lines remaining after reading input) = 63971
=============================================
Creating a generator 228
=============================================
ALines (lines before reading input) = 63971
read_input 1888
NONTERMINAL: XMM_B3 type= xed_reg_enum_t
Adding XMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3()::
Nonterminal name XMM_B3
read_flat_input 1888
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_32()::
BLines (lines remaining after reading input) = 63967
=============================================
Creating a generator 229
=============================================
ALines (lines before reading input) = 63967
read_input 1891
NONTERMINAL: XMM_B3_32 type= xed_reg_enum_t
Adding XMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_32()::
Nonterminal name XMM_B3_32
read_flat_input 1891
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_64()::
BLines (lines remaining after reading input) = 63958
=============================================
Creating a generator 230
=============================================
ALines (lines before reading input) = 63958
read_input 1899
NONTERMINAL: XMM_B3_64 type= xed_reg_enum_t
Adding XMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_64()::
Nonterminal name XMM_B3_64
read_flat_input 1899
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3()::
BLines (lines remaining after reading input) = 63925
=============================================
Creating a generator 231
=============================================
ALines (lines before reading input) = 63925
read_input 1931
NONTERMINAL: YMM_B3 type= xed_reg_enum_t
Adding YMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3()::
Nonterminal name YMM_B3
read_flat_input 1931
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_32()::
BLines (lines remaining after reading input) = 63921
=============================================
Creating a generator 232
=============================================
ALines (lines before reading input) = 63921
read_input 1934
NONTERMINAL: YMM_B3_32 type= xed_reg_enum_t
Adding YMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_32()::
Nonterminal name YMM_B3_32
read_flat_input 1934
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_64()::
BLines (lines remaining after reading input) = 63912
=============================================
Creating a generator 233
=============================================
ALines (lines before reading input) = 63912
read_input 1942
NONTERMINAL: YMM_B3_64 type= xed_reg_enum_t
Adding YMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_64()::
Nonterminal name YMM_B3_64
read_flat_input 1942
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3()::
BLines (lines remaining after reading input) = 63879
=============================================
Creating a generator 234
=============================================
ALines (lines before reading input) = 63879
read_input 1974
NONTERMINAL: ZMM_B3 type= xed_reg_enum_t
Adding ZMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3()::
Nonterminal name ZMM_B3
read_flat_input 1974
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_32()::
BLines (lines remaining after reading input) = 63875
=============================================
Creating a generator 235
=============================================
ALines (lines before reading input) = 63875
read_input 1977
NONTERMINAL: ZMM_B3_32 type= xed_reg_enum_t
Adding ZMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_32()::
Nonterminal name ZMM_B3_32
read_flat_input 1977
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_64()::
BLines (lines remaining after reading input) = 63866
=============================================
Creating a generator 236
=============================================
ALines (lines before reading input) = 63866
read_input 1985
NONTERMINAL: ZMM_B3_64 type= xed_reg_enum_t
Adding ZMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_64()::
Nonterminal name ZMM_B3_64
read_flat_input 1985
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3()::
BLines (lines remaining after reading input) = 63833
=============================================
Creating a generator 237
=============================================
ALines (lines before reading input) = 63833
read_input 2017
NONTERMINAL: XMM_N3 type= xed_reg_enum_t
Adding XMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3()::
Nonterminal name XMM_N3
read_flat_input 2017
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_32()::
BLines (lines remaining after reading input) = 63829
=============================================
Creating a generator 238
=============================================
ALines (lines before reading input) = 63829
read_input 2020
NONTERMINAL: XMM_N3_32 type= xed_reg_enum_t
Adding XMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_32()::
Nonterminal name XMM_N3_32
read_flat_input 2020
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_64()::
BLines (lines remaining after reading input) = 63820
=============================================
Creating a generator 239
=============================================
ALines (lines before reading input) = 63820
read_input 2028
NONTERMINAL: XMM_N3_64 type= xed_reg_enum_t
Adding XMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_64()::
Nonterminal name XMM_N3_64
read_flat_input 2028
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3()::
BLines (lines remaining after reading input) = 63787
=============================================
Creating a generator 240
=============================================
ALines (lines before reading input) = 63787
read_input 2060
NONTERMINAL: YMM_N3 type= xed_reg_enum_t
Adding YMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3()::
Nonterminal name YMM_N3
read_flat_input 2060
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_32()::
BLines (lines remaining after reading input) = 63783
=============================================
Creating a generator 241
=============================================
ALines (lines before reading input) = 63783
read_input 2063
NONTERMINAL: YMM_N3_32 type= xed_reg_enum_t
Adding YMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_32()::
Nonterminal name YMM_N3_32
read_flat_input 2063
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_64()::
BLines (lines remaining after reading input) = 63774
=============================================
Creating a generator 242
=============================================
ALines (lines before reading input) = 63774
read_input 2071
NONTERMINAL: YMM_N3_64 type= xed_reg_enum_t
Adding YMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_64()::
Nonterminal name YMM_N3_64
read_flat_input 2071
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3()::
BLines (lines remaining after reading input) = 63741
=============================================
Creating a generator 243
=============================================
ALines (lines before reading input) = 63741
read_input 2103
NONTERMINAL: ZMM_N3 type= xed_reg_enum_t
Adding ZMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3()::
Nonterminal name ZMM_N3
read_flat_input 2103
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_32()::
BLines (lines remaining after reading input) = 63737
=============================================
Creating a generator 244
=============================================
ALines (lines before reading input) = 63737
read_input 2106
NONTERMINAL: ZMM_N3_32 type= xed_reg_enum_t
Adding ZMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_32()::
Nonterminal name ZMM_N3_32
read_flat_input 2106
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_64()::
BLines (lines remaining after reading input) = 63728
=============================================
Creating a generator 245
=============================================
ALines (lines before reading input) = 63728
read_input 2114
NONTERMINAL: ZMM_N3_64 type= xed_reg_enum_t
Adding ZMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_64()::
Nonterminal name ZMM_N3_64
read_flat_input 2114
Hit a nonterminal, returning at: INSTRUCTIONS()::
BLines (lines remaining after reading input) = 63695
=============================================
Creating a generator 246
=============================================
ALines (lines before reading input) = 63695
read_input 2146
NONTERMINAL: INSTRUCTIONS notype
Adding INSTRUCTIONS to nonterminal dict
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49760 lines remaining.
BLines (lines remaining after reading input) = 49760
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49760
read_input 3917
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49681 lines remaining.
BLines (lines remaining after reading input) = 49681
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49681
read_input 3926
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49239 lines remaining.
BLines (lines remaining after reading input) = 49239
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49239
read_input 3975
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49214 lines remaining.
BLines (lines remaining after reading input) = 49214
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49214
read_input 3977
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 49076 lines remaining.
BLines (lines remaining after reading input) = 49076
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49076
read_input 3995
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: XOP_INSTRUCTIONS()::
parser returning with 49039 lines remaining.
BLines (lines remaining after reading input) = 49039
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 49039
read_input 4001
NONTERMINAL: XOP_INSTRUCTIONS notype
Adding XOP_INSTRUCTIONS to nonterminal dict
Nonterminal XOP_INSTRUCTIONS()::
Nonterminal name XOP_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 48067 lines remaining.
BLines (lines remaining after reading input) = 48067
=============================================
Creating a generator 248
=============================================
ALines (lines before reading input) = 48067
read_input 4197
NONTERMINAL: AVX_INSTRUCTIONS notype
Adding AVX_INSTRUCTIONS to nonterminal dict
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 47650 lines remaining.
BLines (lines remaining after reading input) = 47650
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47650
read_input 4325
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47601 lines remaining.
BLines (lines remaining after reading input) = 47601
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47601
read_input 4341
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1A
REGISTERING UDELETE NOP0F1B
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47444 lines remaining.
BLines (lines remaining after reading input) = 47444
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47444
read_input 4374
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1E
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47357 lines remaining.
BLines (lines remaining after reading input) = 47357
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47357
read_input 4394
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47202 lines remaining.
BLines (lines remaining after reading input) = 47202
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47202
read_input 4408
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47191 lines remaining.
BLines (lines remaining after reading input) = 47191
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47191
read_input 4409
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 47015 lines remaining.
BLines (lines remaining after reading input) = 47015
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 47015
read_input 4423
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46994 lines remaining.
BLines (lines remaining after reading input) = 46994
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46994
read_input 4425
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46953 lines remaining.
BLines (lines remaining after reading input) = 46953
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46953
read_input 4429
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46932 lines remaining.
BLines (lines remaining after reading input) = 46932
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46932
read_input 4431
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46921 lines remaining.
BLines (lines remaining after reading input) = 46921
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46921
read_input 4432
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46910 lines remaining.
BLines (lines remaining after reading input) = 46910
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46910
read_input 4433
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46875 lines remaining.
BLines (lines remaining after reading input) = 46875
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46875
read_input 4437
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46856 lines remaining.
BLines (lines remaining after reading input) = 46856
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46856
read_input 4439
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46835 lines remaining.
BLines (lines remaining after reading input) = 46835
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46835
read_input 4441
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46812 lines remaining.
BLines (lines remaining after reading input) = 46812
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46812
read_input 4443
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46801 lines remaining.
BLines (lines remaining after reading input) = 46801
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46801
read_input 4445
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46763 lines remaining.
BLines (lines remaining after reading input) = 46763
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46763
read_input 4449
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46703 lines remaining.
BLines (lines remaining after reading input) = 46703
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46703
read_input 4454
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1C
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46638 lines remaining.
BLines (lines remaining after reading input) = 46638
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46638
read_input 4466
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 46626 lines remaining.
BLines (lines remaining after reading input) = 46626
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46626
read_input 4467
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 46614 lines remaining.
BLines (lines remaining after reading input) = 46614
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 46614
read_input 4468
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43203 lines remaining.
BLines (lines remaining after reading input) = 43203
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43203
read_input 5191
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43172 lines remaining.
BLines (lines remaining after reading input) = 43172
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43172
read_input 5194
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43105 lines remaining.
BLines (lines remaining after reading input) = 43105
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43105
read_input 5206
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43093 lines remaining.
BLines (lines remaining after reading input) = 43093
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43093
read_input 5208
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43058 lines remaining.
BLines (lines remaining after reading input) = 43058
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 43058
read_input 5216
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 42193 lines remaining.
BLines (lines remaining after reading input) = 42193
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 42193
read_input 5408
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 42072 lines remaining.
BLines (lines remaining after reading input) = 42072
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 42072
read_input 5424
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 40592 lines remaining.
BLines (lines remaining after reading input) = 40592
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40592
read_input 5689
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 40516 lines remaining.
BLines (lines remaining after reading input) = 40516
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40516
read_input 5709
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 40505 lines remaining.
BLines (lines remaining after reading input) = 40505
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40505
read_input 5710
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40264 lines remaining.
BLines (lines remaining after reading input) = 40264
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40264
read_input 5788
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40234 lines remaining.
BLines (lines remaining after reading input) = 40234
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40234
read_input 5794
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40223 lines remaining.
BLines (lines remaining after reading input) = 40223
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40223
read_input 5795
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40209 lines remaining.
BLines (lines remaining after reading input) = 40209
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40209
read_input 5797
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40177 lines remaining.
BLines (lines remaining after reading input) = 40177
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40177
read_input 5803
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40139 lines remaining.
BLines (lines remaining after reading input) = 40139
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40139
read_input 5807
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40106 lines remaining.
BLines (lines remaining after reading input) = 40106
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40106
read_input 5815
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40085 lines remaining.
BLines (lines remaining after reading input) = 40085
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40085
read_input 5817
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 40074 lines remaining.
BLines (lines remaining after reading input) = 40074
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40074
read_input 5818
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE PREFETCH_RESERVED_0F0Dr2
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 40072 lines remaining.
BLines (lines remaining after reading input) = 40072
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 40072
read_input 5818
NONTERMINAL: EVEX_INSTRUCTIONS notype
Adding EVEX_INSTRUCTIONS to nonterminal dict
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 39473 lines remaining.
BLines (lines remaining after reading input) = 39473
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39473
read_input 5864
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39460 lines remaining.
BLines (lines remaining after reading input) = 39460
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39460
read_input 5865
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39407 lines remaining.
BLines (lines remaining after reading input) = 39407
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39407
read_input 5869
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39380 lines remaining.
BLines (lines remaining after reading input) = 39380
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39380
read_input 5871
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 39327 lines remaining.
BLines (lines remaining after reading input) = 39327
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 39327
read_input 5875
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 27741 lines remaining.
BLines (lines remaining after reading input) = 27741
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 27741
read_input 6796
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 27544 lines remaining.
BLines (lines remaining after reading input) = 27544
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 27544
read_input 6811
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 27415 lines remaining.
BLines (lines remaining after reading input) = 27415
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 27415
read_input 6821
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 4051 lines remaining.
BLines (lines remaining after reading input) = 4051
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 4051
read_input 8627
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3359 lines remaining.
BLines (lines remaining after reading input) = 3359
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 3359
read_input 8681
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 3202 lines remaining.
BLines (lines remaining after reading input) = 3202
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 3202
read_input 8693
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 2889 lines remaining.
BLines (lines remaining after reading input) = 2889
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2889
read_input 8717
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 2865 lines remaining.
BLines (lines remaining after reading input) = 2865
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2865
read_input 8720
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 2852 lines remaining.
BLines (lines remaining after reading input) = 2852
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2852
read_input 8721
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 2617 lines remaining.
BLines (lines remaining after reading input) = 2617
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 2617
read_input 8739
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 1368 lines remaining.
BLines (lines remaining after reading input) = 1368
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 1368
read_input 8835
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 1055 lines remaining.
BLines (lines remaining after reading input) = 1055
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 1055
read_input 8859
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 982 lines remaining.
BLines (lines remaining after reading input) = 982
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 982
read_input 8865
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 747 lines remaining.
BLines (lines remaining after reading input) = 747
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 747
read_input 8883
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 602 lines remaining.
BLines (lines remaining after reading input) = 602
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 602
read_input 8895
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 226 lines remaining.
BLines (lines remaining after reading input) = 226
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 226
read_input 8925
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 105 lines remaining.
BLines (lines remaining after reading input) = 105
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 105
read_input 8935
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
parser returning with 0 lines remaining.
BLines (lines remaining after reading input) = 0
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1E
DROPPING UNAME NOP0F1E
DROPPING UNAME PREFETCH_RESERVED_0F0Dr2
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
Length error: some instructions done and some are not done simultaneously
ilist len = 20


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:29
bitpos:26  len-pattern:28
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4378  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

	NOP inum=4379  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

	NOP inum=4380  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4381  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

	NOP inum=4382  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4383  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3

	NOP inum=4384  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4385  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4386  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4387  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4388  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4389  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4390  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4391  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4392  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4393  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPQ inum=4400  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

	RDSSPD inum=4399  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	ENDBR32 inum=4395  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4396  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 21
back_split_graph: based on 21
BACKSPLIT  fake bitpos: 21 real bitpos: 20


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4378  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4379  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4381  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

   NOP inum=4383  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 20
NEED TO BACKSPLIT AT POSITION 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4378  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=4381  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4379  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=4383  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 16


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:29
bitpos:26  len-pattern:28
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4380  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4382  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4384  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4385  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4386  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4387  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4388  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4389  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4390  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4391  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=4392  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4393  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPQ inum=4400  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

	RDSSPD inum=4399  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	ENDBR32 inum=4395  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4396  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:29
bitpos:26  len-pattern:28


NODE:
	NOP inum=4382  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=4392  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=4393  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPQ inum=4400  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

	RDSSPD inum=4399  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 11


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4380  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=4384  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4385  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4386  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4387  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4388  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4389  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4390  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4391  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4395  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4396  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 10


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4384  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4385  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4386  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4387  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4388  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4389  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4390  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=4391  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4395  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=4396  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 24
back_split_graph: based on 24
BACKSPLIT  fake bitpos: 24 real bitpos: 23

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4384  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=4386  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=4388  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4390  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4396  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4384  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

   NOP inum=4386  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4388  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=4390  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=4396  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4385  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=4387  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=4389  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4391  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4395  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=4385  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

   NOP inum=4387  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=4389  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=4391  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=4395  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

FUNKY SPOT: bitpos 36
Others: 
MOVDIRI inum=4447  iform_input=MOVDIRI_MEMu32_GPR32u32  isa_set=MOVDIR pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    REXW=0

MOVDIRI inum=4448  iform_input=MOVDIRI_MEMu64_GPR64u64  isa_set=MOVDIR pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING MOVDIRI inum 4447 -- already fine
	REARRANGE needs to juggle: MOVDIRI inum 4448
	REARRANGE one pattern worked for MOVDIRI inum 4448
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 27
Others: 
TPAUSE inum=4449  iform_input=TPAUSE_GPR32u32  isa_set=WAITPKG pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=0 OSZ=1 REXW=0   

TPAUSE inum=4450  iform_input=TPAUSE_GPR64u64  isa_set=WAITPKG pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=0 OSZ=1 MODE=2    REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING TPAUSE inum 4449 -- already fine
	REARRANGE needs to juggle: TPAUSE inum 4450
	REARRANGE one pattern worked for TPAUSE inum 4450
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 27
FUNKY SPOT: bitpos 26
Others: 
UMWAIT inum=4452  iform_input=UMWAIT_GPR32  isa_set=WAITPKG pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=2 REXW=0

UMWAIT inum=4453  iform_input=UMWAIT_GPR64  isa_set=WAITPKG pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    1 0 1 0    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=2 MODE=2 REXW=1   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING UMWAIT inum 4452 -- already fine
	REARRANGE needs to juggle: UMWAIT inum 4453
	REARRANGE one pattern worked for UMWAIT inum 4453
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 26
FUNKY SPOT: bitpos 10
Others: 
LWPINS inum=4193  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 0 n n    n MODRM() UIMM32()

LWPINS inum=4194  isa_set=XOP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 0 n n    n UIMM32()

LLWPCB inum=4191  isa_set=XOP pattern len=24
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 REXW=0 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 MAP=9 1    1 MOD=3 0 0    0 n n n   

LWPVAL inum=4195  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 1 n n    n MODRM() UIMM32()

LWPVAL inum=4196  isa_set=XOP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 1 n n    n UIMM32()

SLWPCB inum=4192  isa_set=XOP pattern len=24
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 REXW=0 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 MAP=9 1    1 MOD=3 0 0    1 n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING LWPINS inum 4193 -- already fine
	SKIPPING LWPINS inum 4194 -- already fine
	REARRANGE needs to juggle: LLWPCB inum 4191
	REARRANGE one pattern worked for LLWPCB inum 4191
	SKIPPING LWPVAL inum 4195 -- already fine
	SKIPPING LWPVAL inum 4196 -- already fine
	REARRANGE needs to juggle: SLWPCB inum 4192
	REARRANGE one pattern worked for SLWPCB inum 4192
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
LWPINS inum=4193  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 0 n n    n MODRM() UIMM32()

LWPINS inum=4194  isa_set=XOP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 0 n n    n UIMM32()

LLWPCB inum=4191  isa_set=XOP pattern len=24
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 MAP=9 1    1 MOD=3 0 0    0 n n n   

LWPVAL inum=4195  isa_set=XOP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 1 n n    n MODRM() UIMM32()

LWPVAL inum=4196  isa_set=XOP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 1 n n    n UIMM32()

SLWPCB inum=4192  isa_set=XOP pattern len=24
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 MAP=9 1    1 MOD=3 0 0    1 n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING LWPINS inum 4193 -- already fine
	SKIPPING LWPINS inum 4194 -- already fine
	REARRANGE needs to juggle: LLWPCB inum 4191
	REARRANGE one pattern worked for LLWPCB inum 4191
	SKIPPING LWPVAL inum 4195 -- already fine
	SKIPPING LWPVAL inum 4196 -- already fine
	REARRANGE needs to juggle: SLWPCB inum 4192
	REARRANGE one pattern worked for SLWPCB inum 4192
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VPERMQ inum=5657  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMQ inum=5658  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

VPSHUFB inum=5546  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSHUFB inum=5547  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPERMQ inum 5657 -- already fine
	SKIPPING VPERMQ inum 5658 -- already fine
	REARRANGE needs to juggle: VPSHUFB inum 5546
	REARRANGE one pattern worked for VPSHUFB inum 5546
	REARRANGE needs to juggle: VPSHUFB inum 5547
	REARRANGE one pattern worked for VPSHUFB inum 5547
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VPHADDW inum=5490  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPHADDW inum=5491  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMPD inum=5659  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMPD inum=5660  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPHADDW inum 5490 -- already fine
	SKIPPING VPHADDW inum 5491 -- already fine
	REARRANGE needs to juggle: VPERMPD inum 5659
	REARRANGE one pattern worked for VPERMPD inum 5659
	REARRANGE needs to juggle: VPERMPD inum 5660
	REARRANGE one pattern worked for VPERMPD inum 5660
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSIGND inum=4888  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=4889  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5552  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5553  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=4940  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=4941  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 4888 -- already fine
	SKIPPING VPSIGND inum 4889 -- already fine
	SKIPPING VPSIGND inum 5552 -- already fine
	SKIPPING VPSIGND inum 5553 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 4940
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPSIGND inum 4888
	REARRANGE one pattern worked for VPSIGND inum 4888
	REARRANGE needs to juggle: VPSIGND inum 4889
	REARRANGE one pattern worked for VPSIGND inum 4889
	REARRANGE needs to juggle: VPSIGND inum 5552
	REARRANGE one pattern worked for VPSIGND inum 5552
	REARRANGE needs to juggle: VPSIGND inum 5553
	REARRANGE one pattern worked for VPSIGND inum 5553
	SKIPPING VROUNDSS inum 4940 -- already fine
	SKIPPING VROUNDSS inum 4941 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSIGND inum=4888  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=4889  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=5552  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5553  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=4940  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=4941  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 4888 -- already fine
	SKIPPING VPSIGND inum 4889 -- already fine
	SKIPPING VPSIGND inum 5552 -- already fine
	SKIPPING VPSIGND inum 5553 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 4940
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPSIGND inum 4888
	REARRANGE one pattern worked for VPSIGND inum 4888
	REARRANGE needs to juggle: VPSIGND inum 4889
	REARRANGE one pattern worked for VPSIGND inum 4889
	REARRANGE needs to juggle: VPSIGND inum 5552
	REARRANGE one pattern worked for VPSIGND inum 5552
	REARRANGE needs to juggle: VPSIGND inum 5553
	REARRANGE one pattern worked for VPSIGND inum 5553
	SKIPPING VROUNDSS inum 4940 -- already fine
	SKIPPING VROUNDSS inum 4941 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMULHRSW inum=4868  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=4869  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5532  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5533  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=4938  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=4939  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 4868 -- already fine
	SKIPPING VPMULHRSW inum 4869 -- already fine
	SKIPPING VPMULHRSW inum 5532 -- already fine
	SKIPPING VPMULHRSW inum 5533 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 4938
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPMULHRSW inum 4868
	REARRANGE one pattern worked for VPMULHRSW inum 4868
	REARRANGE needs to juggle: VPMULHRSW inum 4869
	REARRANGE one pattern worked for VPMULHRSW inum 4869
	REARRANGE needs to juggle: VPMULHRSW inum 5532
	REARRANGE one pattern worked for VPMULHRSW inum 5532
	REARRANGE needs to juggle: VPMULHRSW inum 5533
	REARRANGE one pattern worked for VPMULHRSW inum 5533
	SKIPPING VROUNDSD inum 4938 -- already fine
	SKIPPING VROUNDSD inum 4939 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMULHRSW inum=4868  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=4869  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=5532  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5533  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=4938  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=4939  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 4868 -- already fine
	SKIPPING VPMULHRSW inum 4869 -- already fine
	SKIPPING VPMULHRSW inum 5532 -- already fine
	SKIPPING VPMULHRSW inum 5533 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 4938
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPMULHRSW inum 4868
	REARRANGE one pattern worked for VPMULHRSW inum 4868
	REARRANGE needs to juggle: VPMULHRSW inum 4869
	REARRANGE one pattern worked for VPMULHRSW inum 4869
	REARRANGE needs to juggle: VPMULHRSW inum 5532
	REARRANGE one pattern worked for VPMULHRSW inum 5532
	REARRANGE needs to juggle: VPMULHRSW inum 5533
	REARRANGE one pattern worked for VPMULHRSW inum 5533
	SKIPPING VROUNDSD inum 4938 -- already fine
	SKIPPING VROUNDSD inum 4939 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VINSERTF128 inum=4662  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VINSERTF128 inum=4663  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 1 1 MOD=3    r r r n    n n UIMM8()

VBROADCASTSS inum=4658  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=0 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=4659  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=5685  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VBROADCASTSS inum=5686  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VINSERTF128 inum 4662 -- already fine
	SKIPPING VINSERTF128 inum 4663 -- already fine
	SKIPPING VBROADCASTSS inum 4658 -- already fine
	SKIPPING VBROADCASTSS inum 4659 -- already fine
	REARRANGE needs to juggle: VBROADCASTSS inum 5685
	REARRANGE one pattern worked for VBROADCASTSS inum 5685
	REARRANGE needs to juggle: VBROADCASTSS inum 5686
	REARRANGE one pattern worked for VBROADCASTSS inum 5686
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VEXTRACTF128 inum=4612  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VEXTRACTF128 inum=4613  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

VBROADCASTSD inum=4660  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSD inum=5687  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VEXTRACTF128 inum 4612 -- already fine
	SKIPPING VEXTRACTF128 inum 4613 -- already fine
	SKIPPING VBROADCASTSD inum 4660 -- already fine
	REARRANGE needs to juggle: VBROADCASTSD inum 5687
	REARRANGE one pattern worked for VBROADCASTSD inum 5687
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPABSB inum=4780  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4781  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5424  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5425  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSB inum 4780 -- already fine
	SKIPPING VPABSB inum 4781 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5424
	REARRANGE one pattern worked for VPABSB inum 5424
	REARRANGE needs to juggle: VPABSB inum 5425
	REARRANGE one pattern worked for VPABSB inum 5425
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSB inum=4780  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=4781  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=5424  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5425  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSB inum 4780 -- already fine
	SKIPPING VPABSB inum 4781 -- already fine
	REARRANGE needs to juggle: VPABSB inum 5424
	REARRANGE one pattern worked for VPABSB inum 5424
	REARRANGE needs to juggle: VPABSB inum 5425
	REARRANGE one pattern worked for VPABSB inum 5425
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSW inum=4782  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4783  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5426  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5427  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=5212  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5213  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=5214  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5215  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSW inum 4782 -- already fine
	SKIPPING VPABSW inum 4783 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5426
	REARRANGE one pattern worked for VPABSW inum 5426
	REARRANGE needs to juggle: VPABSW inum 5427
	REARRANGE one pattern worked for VPABSW inum 5427
	REARRANGE needs to juggle: VCVTPS2PH inum 5212
	REARRANGE one pattern worked for VCVTPS2PH inum 5212
	REARRANGE needs to juggle: VCVTPS2PH inum 5213
	REARRANGE one pattern worked for VCVTPS2PH inum 5213
	REARRANGE needs to juggle: VCVTPS2PH inum 5214
	REARRANGE one pattern worked for VCVTPS2PH inum 5214
	REARRANGE needs to juggle: VCVTPS2PH inum 5215
	REARRANGE one pattern worked for VCVTPS2PH inum 5215
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSW inum=4782  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=4783  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=5426  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5427  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=5212  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5213  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=5214  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=5215  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSW inum 4782 -- already fine
	SKIPPING VPABSW inum 4783 -- already fine
	REARRANGE needs to juggle: VPABSW inum 5426
	REARRANGE one pattern worked for VPABSW inum 5426
	REARRANGE needs to juggle: VPABSW inum 5427
	REARRANGE one pattern worked for VPABSW inum 5427
	REARRANGE needs to juggle: VCVTPS2PH inum 5212
	REARRANGE one pattern worked for VCVTPS2PH inum 5212
	REARRANGE needs to juggle: VCVTPS2PH inum 5213
	REARRANGE one pattern worked for VCVTPS2PH inum 5213
	REARRANGE needs to juggle: VCVTPS2PH inum 5214
	REARRANGE one pattern worked for VCVTPS2PH inum 5214
	REARRANGE needs to juggle: VCVTPS2PH inum 5215
	REARRANGE one pattern worked for VCVTPS2PH inum 5215
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSD inum=4784  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4785  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5428  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5429  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSD inum 4784 -- already fine
	SKIPPING VPABSD inum 4785 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5428
	REARRANGE one pattern worked for VPABSD inum 5428
	REARRANGE needs to juggle: VPABSD inum 5429
	REARRANGE one pattern worked for VPABSD inum 5429
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSD inum=4784  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=4785  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=5428  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5429  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSD inum 4784 -- already fine
	SKIPPING VPABSD inum 4785 -- already fine
	REARRANGE needs to juggle: VPABSD inum 5428
	REARRANGE one pattern worked for VPABSD inum 5428
	REARRANGE needs to juggle: VPABSD inum 5429
	REARRANGE one pattern worked for VPABSD inum 5429
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBW inum=5121  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5122  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBW inum=5631  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=5632  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRW inum=6807  iform_input=KSHIFTRW_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRB inum=8666  iform_input=KSHIFTRB_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBW inum 5121 -- already fine
	SKIPPING VPMOVZXBW inum 5122 -- already fine
	SKIPPING VPMOVZXBW inum 5631 -- already fine
	SKIPPING VPMOVZXBW inum 5632 -- already fine
	REARRANGE needs to juggle: KSHIFTRW inum 6807
	REARRANGE one pattern worked for KSHIFTRW inum 6807
	REARRANGE needs to juggle: KSHIFTRB inum 8666
	REARRANGE one pattern worked for KSHIFTRB inum 8666
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
KSHIFTRQ inum=8668  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

VPMOVZXBD inum=5123  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5124  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=5633  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5634  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRD inum=8667  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KSHIFTRQ inum 8668 -- already fine
	REARRANGE needs to juggle: VPMOVZXBD inum 5123
	REARRANGE one pattern worked for VPMOVZXBD inum 5123
	REARRANGE needs to juggle: VPMOVZXBD inum 5124
	REARRANGE one pattern worked for VPMOVZXBD inum 5124
	REARRANGE needs to juggle: VPMOVZXBD inum 5633
	REARRANGE one pattern worked for VPMOVZXBD inum 5633
	REARRANGE needs to juggle: VPMOVZXBD inum 5634
	REARRANGE one pattern worked for VPMOVZXBD inum 5634
	SKIPPING KSHIFTRD inum 8667 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KSHIFTRQ inum=8668  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

VPMOVZXBD inum=5123  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5124  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=5633  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=5634  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRD inum=8667  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KSHIFTRQ inum 8668 -- already fine
	REARRANGE needs to juggle: VPMOVZXBD inum 5123
	REARRANGE one pattern worked for VPMOVZXBD inum 5123
	REARRANGE needs to juggle: VPMOVZXBD inum 5124
	REARRANGE one pattern worked for VPMOVZXBD inum 5124
	REARRANGE needs to juggle: VPMOVZXBD inum 5633
	REARRANGE one pattern worked for VPMOVZXBD inum 5633
	REARRANGE needs to juggle: VPMOVZXBD inum 5634
	REARRANGE one pattern worked for VPMOVZXBD inum 5634
	SKIPPING KSHIFTRD inum 8667 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VDPPD inum=4614  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VDPPD inum=4615  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

KANDB inum=8631  iform_input=KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDW inum=6797  iform_input=KANDW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDQ inum=8636  iform_input=KANDQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDD inum=8632  iform_input=KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPHMINPOSUW inum=4786  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPHMINPOSUW inum=4787  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VDPPD inum 4614 -- already fine
	SKIPPING VDPPD inum 4615 -- already fine
	REARRANGE needs to juggle: KANDB inum 8631
	REARRANGE one pattern worked for KANDB inum 8631
	REARRANGE needs to juggle: KANDW inum 6797
	REARRANGE one pattern worked for KANDW inum 6797
	REARRANGE needs to juggle: KANDQ inum 8636
	REARRANGE one pattern worked for KANDQ inum 8636
	REARRANGE needs to juggle: KANDD inum 8632
	REARRANGE one pattern worked for KANDD inum 8632
	REARRANGE needs to juggle: VPHMINPOSUW inum 4786
	REARRANGE one pattern worked for VPHMINPOSUW inum 4786
	REARRANGE needs to juggle: VPHMINPOSUW inum 4787
	REARRANGE one pattern worked for VPHMINPOSUW inum 4787
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
KANDNB inum=8633  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=8634  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDNQ inum=8635  iform_input=KANDNQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDNW inum=6796  iform_input=KANDNW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VMPSADBW inum=5042  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5043  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=5590  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5591  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KANDNB inum 8633 -- already fine
	SKIPPING KANDND inum 8634 -- already fine
	SKIPPING KANDNQ inum 8635 -- already fine
	SKIPPING KANDNW inum 6796 -- already fine
	REARRANGE needs to juggle: VMPSADBW inum 5042
	REARRANGE one pattern worked for VMPSADBW inum 5042
	REARRANGE needs to juggle: VMPSADBW inum 5043
	REARRANGE one pattern worked for VMPSADBW inum 5043
	REARRANGE needs to juggle: VMPSADBW inum 5590
	REARRANGE one pattern worked for VMPSADBW inum 5590
	REARRANGE needs to juggle: VMPSADBW inum 5591
	REARRANGE one pattern worked for VMPSADBW inum 5591
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KANDNB inum=8633  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=8634  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VMPSADBW inum=5042  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5043  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=0 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=5590  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5591  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 VL=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KANDNB inum 8633 -- already fine
	SKIPPING KANDND inum 8634 -- already fine
	REARRANGE needs to juggle: VMPSADBW inum 5042
	REARRANGE one pattern worked for VMPSADBW inum 5042
	REARRANGE needs to juggle: VMPSADBW inum 5043
	REARRANGE one pattern worked for VMPSADBW inum 5043
	REARRANGE needs to juggle: VMPSADBW inum 5590
	REARRANGE one pattern worked for VMPSADBW inum 5590
	REARRANGE needs to juggle: VMPSADBW inum 5591
	REARRANGE one pattern worked for VMPSADBW inum 5591
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSRLVQ inum=5701  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5702  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=5703  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5704  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5697  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5698  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5699  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5700  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

KORD inum=8658  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KORQ inum=8659  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KORB inum=8657  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORW inum=6805  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRLVQ inum 5701 -- already fine
	SKIPPING VPSRLVQ inum 5702 -- already fine
	SKIPPING VPSRLVQ inum 5703 -- already fine
	SKIPPING VPSRLVQ inum 5704 -- already fine
	SKIPPING VPSRLVD inum 5697 -- already fine
	SKIPPING VPSRLVD inum 5698 -- already fine
	SKIPPING VPSRLVD inum 5699 -- already fine
	SKIPPING VPSRLVD inum 5700 -- already fine
	REARRANGE needs to juggle: KORD inum 8658
	REARRANGE one pattern worked for KORD inum 8658
	REARRANGE needs to juggle: KORQ inum 8659
	REARRANGE one pattern worked for KORQ inum 8659
	REARRANGE needs to juggle: KORB inum 8657
	REARRANGE one pattern worked for KORB inum 8657
	REARRANGE needs to juggle: KORW inum 6805
	REARRANGE one pattern worked for KORW inum 6805
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSRLVQ inum=5703  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=5704  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVD inum=5699  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=5700  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

KORD inum=8658  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KORQ inum=8659  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KORB inum=8657  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORW inum=6805  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSRLVQ inum 5703 -- already fine
	SKIPPING VPSRLVQ inum 5704 -- already fine
	SKIPPING VPSRLVD inum 5699 -- already fine
	SKIPPING VPSRLVD inum 5700 -- already fine
	REARRANGE needs to juggle: KORD inum 8658
	REARRANGE one pattern worked for KORD inum 8658
	REARRANGE needs to juggle: KORQ inum 8659
	REARRANGE one pattern worked for KORQ inum 8659
	REARRANGE needs to juggle: KORB inum 8657
	REARRANGE one pattern worked for KORB inum 8657
	REARRANGE needs to juggle: KORW inum 6805
	REARRANGE one pattern worked for KORW inum 6805
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KXNORQ inum=8677  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXNORW inum=6809  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORB inum=8675  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORD inum=8676  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSRAVD inum=5705  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5706  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRAVD inum=5707  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5708  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPERM2I128 inum=5655  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5656  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KXNORQ inum 8677 -- already fine
	SKIPPING KXNORW inum 6809 -- already fine
	SKIPPING KXNORB inum 8675 -- already fine
	SKIPPING KXNORD inum 8676 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5705
	REARRANGE one pattern worked for VPSRAVD inum 5705
	REARRANGE needs to juggle: VPSRAVD inum 5706
	REARRANGE one pattern worked for VPSRAVD inum 5706
	REARRANGE needs to juggle: VPSRAVD inum 5707
	REARRANGE one pattern worked for VPSRAVD inum 5707
	REARRANGE needs to juggle: VPSRAVD inum 5708
	REARRANGE one pattern worked for VPSRAVD inum 5708
	REARRANGE needs to juggle: VPERM2I128 inum 5655
	REARRANGE one pattern worked for VPERM2I128 inum 5655
	REARRANGE needs to juggle: VPERM2I128 inum 5656
	REARRANGE one pattern worked for VPERM2I128 inum 5656
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KXNORB inum=8675  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORD inum=8676  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSRAVD inum=5705  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5706  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VPSRAVD inum=5707  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRAVD inum=5708  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VPERM2I128 inum=5655  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=5656  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 VL=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KXNORB inum 8675 -- already fine
	SKIPPING KXNORD inum 8676 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 5705
	REARRANGE one pattern worked for VPSRAVD inum 5705
	REARRANGE needs to juggle: VPSRAVD inum 5706
	REARRANGE one pattern worked for VPSRAVD inum 5706
	REARRANGE needs to juggle: VPSRAVD inum 5707
	REARRANGE one pattern worked for VPSRAVD inum 5707
	REARRANGE needs to juggle: VPSRAVD inum 5708
	REARRANGE one pattern worked for VPSRAVD inum 5708
	REARRANGE needs to juggle: VPERM2I128 inum 5655
	REARRANGE one pattern worked for VPERM2I128 inum 5655
	REARRANGE needs to juggle: VPERM2I128 inum 5656
	REARRANGE one pattern worked for VPERM2I128 inum 5656
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KXORQ inum=8680  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXORB inum=8678  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORW inum=6810  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORD inum=8679  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSLLVD inum=5689  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5690  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVD inum=5691  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5692  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5693  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5694  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5695  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5696  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KXORQ inum 8680 -- already fine
	SKIPPING KXORB inum 8678 -- already fine
	SKIPPING KXORW inum 6810 -- already fine
	SKIPPING KXORD inum 8679 -- already fine
	REARRANGE needs to juggle: VPSLLVD inum 5689
	REARRANGE one pattern worked for VPSLLVD inum 5689
	REARRANGE needs to juggle: VPSLLVD inum 5690
	REARRANGE one pattern worked for VPSLLVD inum 5690
	REARRANGE needs to juggle: VPSLLVD inum 5691
	REARRANGE one pattern worked for VPSLLVD inum 5691
	REARRANGE needs to juggle: VPSLLVD inum 5692
	REARRANGE one pattern worked for VPSLLVD inum 5692
	REARRANGE needs to juggle: VPSLLVQ inum 5693
	REARRANGE one pattern worked for VPSLLVQ inum 5693
	REARRANGE needs to juggle: VPSLLVQ inum 5694
	REARRANGE one pattern worked for VPSLLVQ inum 5694
	REARRANGE needs to juggle: VPSLLVQ inum 5695
	REARRANGE one pattern worked for VPSLLVQ inum 5695
	REARRANGE needs to juggle: VPSLLVQ inum 5696
	REARRANGE one pattern worked for VPSLLVQ inum 5696
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KXORB inum=8678  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORD inum=8679  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

VPSLLVD inum=5689  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5690  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVD inum=5691  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=5692  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5693  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5694  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=5695  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=5696  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KXORB inum 8678 -- already fine
	SKIPPING KXORD inum 8679 -- already fine
	REARRANGE needs to juggle: VPSLLVD inum 5689
	REARRANGE one pattern worked for VPSLLVD inum 5689
	REARRANGE needs to juggle: VPSLLVD inum 5690
	REARRANGE one pattern worked for VPSLLVD inum 5690
	REARRANGE needs to juggle: VPSLLVD inum 5691
	REARRANGE one pattern worked for VPSLLVD inum 5691
	REARRANGE needs to juggle: VPSLLVD inum 5692
	REARRANGE one pattern worked for VPSLLVD inum 5692
	REARRANGE needs to juggle: VPSLLVQ inum 5693
	REARRANGE one pattern worked for VPSLLVQ inum 5693
	REARRANGE needs to juggle: VPSLLVQ inum 5694
	REARRANGE one pattern worked for VPSLLVQ inum 5694
	REARRANGE needs to juggle: VPSLLVQ inum 5695
	REARRANGE one pattern worked for VPSLLVQ inum 5695
	REARRANGE needs to juggle: VPSLLVQ inum 5696
	REARRANGE one pattern worked for VPSLLVQ inum 5696
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VSQRTSD inum=4970  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSD inum=4971  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSQRTSS inum=4972  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSS inum=4973  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VSQRTPS inum=4966  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=4967  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPS inum=4968  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=4969  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPD inum=4962  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=4963  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=4964  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=4965  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VSQRTSD inum 4970 -- already fine
	SKIPPING VSQRTSD inum 4971 -- already fine
	SKIPPING VSQRTSS inum 4972 -- already fine
	SKIPPING VSQRTSS inum 4973 -- already fine
	REARRANGE needs to juggle: VSQRTPS inum 4966
	REARRANGE one pattern worked for VSQRTPS inum 4966
	REARRANGE needs to juggle: VSQRTPS inum 4967
	REARRANGE one pattern worked for VSQRTPS inum 4967
	REARRANGE needs to juggle: VSQRTPS inum 4968
	REARRANGE one pattern worked for VSQRTPS inum 4968
	REARRANGE needs to juggle: VSQRTPS inum 4969
	REARRANGE one pattern worked for VSQRTPS inum 4969
	REARRANGE needs to juggle: VSQRTPD inum 4962
	REARRANGE one pattern worked for VSQRTPD inum 4962
	REARRANGE needs to juggle: VSQRTPD inum 4963
	REARRANGE one pattern worked for VSQRTPD inum 4963
	REARRANGE needs to juggle: VSQRTPD inum 4964
	REARRANGE one pattern worked for VSQRTPD inum 4964
	REARRANGE needs to juggle: VSQRTPD inum 4965
	REARRANGE one pattern worked for VSQRTPD inum 4965
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VORPD inum=5006  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5007  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPD inum=5008  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5009  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPS inum=5010  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5011  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VORPS inum=5012  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5013  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VORPD inum 5006 -- already fine
	SKIPPING VORPD inum 5007 -- already fine
	SKIPPING VORPD inum 5008 -- already fine
	SKIPPING VORPD inum 5009 -- already fine
	REARRANGE needs to juggle: VORPS inum 5010
	REARRANGE one pattern worked for VORPS inum 5010
	REARRANGE needs to juggle: VORPS inum 5011
	REARRANGE one pattern worked for VORPS inum 5011
	REARRANGE needs to juggle: VORPS inum 5012
	REARRANGE one pattern worked for VORPS inum 5012
	REARRANGE needs to juggle: VORPS inum 5013
	REARRANGE one pattern worked for VORPS inum 5013
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPBROADCASTD inum=5677  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5678  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=5679  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=5680  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VADDPD inum=4468  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4469  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPD inum=4470  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=4471  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4472  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4473  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=4474  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=4475  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDSD inum=4476  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSD inum=4477  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VADDSS inum=4478  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSS inum=4479  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPBROADCASTD inum 5677 -- already fine
	SKIPPING VPBROADCASTD inum 5678 -- already fine
	SKIPPING VPBROADCASTD inum 5679 -- already fine
	SKIPPING VPBROADCASTD inum 5680 -- already fine
	REARRANGE needs to juggle: VADDPD inum 4468
	REARRANGE one pattern worked for VADDPD inum 4468
	REARRANGE needs to juggle: VADDPD inum 4469
	REARRANGE one pattern worked for VADDPD inum 4469
	REARRANGE needs to juggle: VADDPD inum 4470
	REARRANGE one pattern worked for VADDPD inum 4470
	REARRANGE needs to juggle: VADDPD inum 4471
	REARRANGE one pattern worked for VADDPD inum 4471
	REARRANGE needs to juggle: VADDPS inum 4472
	REARRANGE one pattern worked for VADDPS inum 4472
	REARRANGE needs to juggle: VADDPS inum 4473
	REARRANGE one pattern worked for VADDPS inum 4473
	REARRANGE needs to juggle: VADDPS inum 4474
	REARRANGE one pattern worked for VADDPS inum 4474
	REARRANGE needs to juggle: VADDPS inum 4475
	REARRANGE one pattern worked for VADDPS inum 4475
	REARRANGE needs to juggle: VADDSD inum 4476
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPBROADCASTD inum 5677
	REARRANGE one pattern worked for VPBROADCASTD inum 5677
	REARRANGE needs to juggle: VPBROADCASTD inum 5678
	REARRANGE one pattern worked for VPBROADCASTD inum 5678
	REARRANGE needs to juggle: VPBROADCASTD inum 5679
	REARRANGE one pattern worked for VPBROADCASTD inum 5679
	REARRANGE needs to juggle: VPBROADCASTD inum 5680
	REARRANGE one pattern worked for VPBROADCASTD inum 5680
	REARRANGE needs to juggle: VADDPD inum 4468
	REARRANGE one pattern worked for VADDPD inum 4468
	REARRANGE needs to juggle: VADDPD inum 4469
	REARRANGE one pattern worked for VADDPD inum 4469
	REARRANGE needs to juggle: VADDPD inum 4470
	REARRANGE one pattern worked for VADDPD inum 4470
	REARRANGE needs to juggle: VADDPD inum 4471
	REARRANGE one pattern worked for VADDPD inum 4471
	REARRANGE needs to juggle: VADDPS inum 4472
	REARRANGE one pattern worked for VADDPS inum 4472
	REARRANGE needs to juggle: VADDPS inum 4473
	REARRANGE one pattern worked for VADDPS inum 4473
	REARRANGE needs to juggle: VADDPS inum 4474
	REARRANGE one pattern worked for VADDPS inum 4474
	REARRANGE needs to juggle: VADDPS inum 4475
	REARRANGE one pattern worked for VADDPS inum 4475
	SKIPPING VADDSD inum 4476 -- already fine
	SKIPPING VADDSD inum 4477 -- already fine
	SKIPPING VADDSS inum 4478 -- already fine
	SKIPPING VADDSS inum 4479 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMULSS inum=5004  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSS inum=5005  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VMULSD inum=5002  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSD inum=5003  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VMULPS inum=4998  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=4999  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5000  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5001  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPD inum=4994  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=4995  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPD inum=4996  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=4997  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPBROADCASTQ inum=5681  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5682  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=5683  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=5684  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VMULSS inum 5004 -- already fine
	SKIPPING VMULSS inum 5005 -- already fine
	SKIPPING VMULSD inum 5002 -- already fine
	SKIPPING VMULSD inum 5003 -- already fine
	REARRANGE needs to juggle: VMULPS inum 4998
	REARRANGE one pattern worked for VMULPS inum 4998
	REARRANGE needs to juggle: VMULPS inum 4999
	REARRANGE one pattern worked for VMULPS inum 4999
	REARRANGE needs to juggle: VMULPS inum 5000
	REARRANGE one pattern worked for VMULPS inum 5000
	REARRANGE needs to juggle: VMULPS inum 5001
	REARRANGE one pattern worked for VMULPS inum 5001
	REARRANGE needs to juggle: VMULPD inum 4994
	REARRANGE one pattern worked for VMULPD inum 4994
	REARRANGE needs to juggle: VMULPD inum 4995
	REARRANGE one pattern worked for VMULPD inum 4995
	REARRANGE needs to juggle: VMULPD inum 4996
	REARRANGE one pattern worked for VMULPD inum 4996
	REARRANGE needs to juggle: VMULPD inum 4997
	REARRANGE one pattern worked for VMULPD inum 4997
	REARRANGE needs to juggle: VPBROADCASTQ inum 5681
	REARRANGE one pattern worked for VPBROADCASTQ inum 5681
	REARRANGE needs to juggle: VPBROADCASTQ inum 5682
	REARRANGE one pattern worked for VPBROADCASTQ inum 5682
	REARRANGE needs to juggle: VPBROADCASTQ inum 5683
	REARRANGE one pattern worked for VPBROADCASTQ inum 5683
	REARRANGE needs to juggle: VPBROADCASTQ inum 5684
	REARRANGE one pattern worked for VPBROADCASTQ inum 5684
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VCVTSS2SD inum=4598  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSS2SD inum=4599  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VBROADCASTI128 inum=5688  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSD2SS inum=4584  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSD2SS inum=4585  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VCVTPD2PS inum=4544  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4545  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2PS inum=4546  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=4547  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4556  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4557  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=4558  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=4559  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VCVTSS2SD inum 4598 -- already fine
	SKIPPING VCVTSS2SD inum 4599 -- already fine
	REARRANGE needs to juggle: VBROADCASTI128 inum 5688
	REARRANGE one pattern worked for VBROADCASTI128 inum 5688
	SKIPPING VCVTSD2SS inum 4584 -- already fine
	SKIPPING VCVTSD2SS inum 4585 -- already fine
	SKIPPING VCVTPD2PS inum 4544 -- already fine
	SKIPPING VCVTPD2PS inum 4545 -- already fine
	SKIPPING VCVTPD2PS inum 4546 -- already fine
	SKIPPING VCVTPD2PS inum 4547 -- already fine
	SKIPPING VCVTPS2PD inum 4556 -- already fine
	SKIPPING VCVTPS2PD inum 4557 -- already fine
	SKIPPING VCVTPS2PD inum 4558 -- already fine
	SKIPPING VCVTPS2PD inum 4559 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VSUBSD inum=4990  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSD inum=4991  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSUBSS inum=4992  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSS inum=4993  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VFMADDSUBPS inum=4197  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4198  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4199  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4200  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4201  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4202  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4203  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4204  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=4982  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4983  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=4984  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4985  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=4986  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=4987  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=4988  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=4989  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VSUBSD inum 4990 -- already fine
	SKIPPING VSUBSD inum 4991 -- already fine
	SKIPPING VSUBSS inum 4992 -- already fine
	SKIPPING VSUBSS inum 4993 -- already fine
	SKIPPING VFMADDSUBPS inum 4197 -- already fine
	SKIPPING VFMADDSUBPS inum 4198 -- already fine
	SKIPPING VFMADDSUBPS inum 4199 -- already fine
	SKIPPING VFMADDSUBPS inum 4200 -- already fine
	SKIPPING VFMADDSUBPS inum 4201 -- already fine
	SKIPPING VFMADDSUBPS inum 4202 -- already fine
	SKIPPING VFMADDSUBPS inum 4203 -- already fine
	SKIPPING VFMADDSUBPS inum 4204 -- already fine
	SKIPPING VSUBPD inum 4982 -- already fine
	SKIPPING VSUBPD inum 4983 -- already fine
	SKIPPING VSUBPD inum 4984 -- already fine
	SKIPPING VSUBPD inum 4985 -- already fine
	REARRANGE needs to juggle: VSUBPS inum 4986
	REARRANGE one pattern worked for VSUBPS inum 4986
	REARRANGE needs to juggle: VSUBPS inum 4987
	REARRANGE one pattern worked for VSUBPS inum 4987
	REARRANGE needs to juggle: VSUBPS inum 4988
	REARRANGE one pattern worked for VSUBPS inum 4988
	REARRANGE needs to juggle: VSUBPS inum 4989
	REARRANGE one pattern worked for VSUBPS inum 4989
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPS inum=4197  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4198  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4199  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4200  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4201  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4202  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4203  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4204  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=4982  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4983  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=4984  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4985  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4197 -- already fine
	SKIPPING VFMADDSUBPS inum 4198 -- already fine
	SKIPPING VFMADDSUBPS inum 4199 -- already fine
	SKIPPING VFMADDSUBPS inum 4200 -- already fine
	SKIPPING VFMADDSUBPS inum 4201 -- already fine
	SKIPPING VFMADDSUBPS inum 4202 -- already fine
	SKIPPING VFMADDSUBPS inum 4203 -- already fine
	SKIPPING VFMADDSUBPS inum 4204 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 4982
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPS inum 4197
	REARRANGE one pattern worked for VFMADDSUBPS inum 4197
	REARRANGE needs to juggle: VFMADDSUBPS inum 4198
	REARRANGE one pattern worked for VFMADDSUBPS inum 4198
	REARRANGE needs to juggle: VFMADDSUBPS inum 4199
	REARRANGE one pattern worked for VFMADDSUBPS inum 4199
	REARRANGE needs to juggle: VFMADDSUBPS inum 4200
	REARRANGE one pattern worked for VFMADDSUBPS inum 4200
	REARRANGE needs to juggle: VFMADDSUBPS inum 4201
	REARRANGE one pattern worked for VFMADDSUBPS inum 4201
	REARRANGE needs to juggle: VFMADDSUBPS inum 4202
	REARRANGE one pattern worked for VFMADDSUBPS inum 4202
	REARRANGE needs to juggle: VFMADDSUBPS inum 4203
	REARRANGE one pattern worked for VFMADDSUBPS inum 4203
	REARRANGE needs to juggle: VFMADDSUBPS inum 4204
	REARRANGE one pattern worked for VFMADDSUBPS inum 4204
	REARRANGE needs to juggle: VSUBPD inum 4982
	REARRANGE one pattern worked for VSUBPD inum 4982
	REARRANGE needs to juggle: VSUBPD inum 4983
	REARRANGE one pattern worked for VSUBPD inum 4983
	REARRANGE needs to juggle: VSUBPD inum 4984
	REARRANGE one pattern worked for VSUBPD inum 4984
	REARRANGE needs to juggle: VSUBPD inum 4985
	REARRANGE one pattern worked for VSUBPD inum 4985
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=4197  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4198  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4199  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4200  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=4982  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4983  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4197 -- already fine
	SKIPPING VFMADDSUBPS inum 4198 -- already fine
	SKIPPING VFMADDSUBPS inum 4199 -- already fine
	SKIPPING VFMADDSUBPS inum 4200 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 4982
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 4197
	REARRANGE one pattern worked for VFMADDSUBPS inum 4197
	REARRANGE needs to juggle: VFMADDSUBPS inum 4198
	REARRANGE one pattern worked for VFMADDSUBPS inum 4198
	REARRANGE needs to juggle: VFMADDSUBPS inum 4199
	REARRANGE one pattern worked for VFMADDSUBPS inum 4199
	REARRANGE needs to juggle: VFMADDSUBPS inum 4200
	REARRANGE one pattern worked for VFMADDSUBPS inum 4200
	SKIPPING VSUBPD inum 4982 -- already fine
	SKIPPING VSUBPD inum 4983 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=4201  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4202  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=4203  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=4204  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=4984  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=4985  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 4201 -- already fine
	SKIPPING VFMADDSUBPS inum 4202 -- already fine
	SKIPPING VFMADDSUBPS inum 4203 -- already fine
	SKIPPING VFMADDSUBPS inum 4204 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 4984
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 4201
	REARRANGE one pattern worked for VFMADDSUBPS inum 4201
	REARRANGE needs to juggle: VFMADDSUBPS inum 4202
	REARRANGE one pattern worked for VFMADDSUBPS inum 4202
	REARRANGE needs to juggle: VFMADDSUBPS inum 4203
	REARRANGE one pattern worked for VFMADDSUBPS inum 4203
	REARRANGE needs to juggle: VFMADDSUBPS inum 4204
	REARRANGE one pattern worked for VFMADDSUBPS inum 4204
	SKIPPING VSUBPD inum 4984 -- already fine
	SKIPPING VSUBPD inum 4985 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPD inum=4205  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4206  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4207  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4208  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4209  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4210  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4211  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4212  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4700  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4701  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMINPD inum=4702  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4703  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4205 -- already fine
	SKIPPING VFMADDSUBPD inum 4206 -- already fine
	SKIPPING VFMADDSUBPD inum 4207 -- already fine
	SKIPPING VFMADDSUBPD inum 4208 -- already fine
	SKIPPING VFMADDSUBPD inum 4209 -- already fine
	SKIPPING VFMADDSUBPD inum 4210 -- already fine
	SKIPPING VFMADDSUBPD inum 4211 -- already fine
	SKIPPING VFMADDSUBPD inum 4212 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4700
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPD inum 4205
	REARRANGE one pattern worked for VFMADDSUBPD inum 4205
	REARRANGE needs to juggle: VFMADDSUBPD inum 4206
	REARRANGE one pattern worked for VFMADDSUBPD inum 4206
	REARRANGE needs to juggle: VFMADDSUBPD inum 4207
	REARRANGE one pattern worked for VFMADDSUBPD inum 4207
	REARRANGE needs to juggle: VFMADDSUBPD inum 4208
	REARRANGE one pattern worked for VFMADDSUBPD inum 4208
	REARRANGE needs to juggle: VFMADDSUBPD inum 4209
	REARRANGE one pattern worked for VFMADDSUBPD inum 4209
	REARRANGE needs to juggle: VFMADDSUBPD inum 4210
	REARRANGE one pattern worked for VFMADDSUBPD inum 4210
	REARRANGE needs to juggle: VFMADDSUBPD inum 4211
	REARRANGE one pattern worked for VFMADDSUBPD inum 4211
	REARRANGE needs to juggle: VFMADDSUBPD inum 4212
	REARRANGE one pattern worked for VFMADDSUBPD inum 4212
	REARRANGE needs to juggle: VMINPD inum 4700
	REARRANGE one pattern worked for VMINPD inum 4700
	REARRANGE needs to juggle: VMINPD inum 4701
	REARRANGE one pattern worked for VMINPD inum 4701
	REARRANGE needs to juggle: VMINPD inum 4702
	REARRANGE one pattern worked for VMINPD inum 4702
	REARRANGE needs to juggle: VMINPD inum 4703
	REARRANGE one pattern worked for VMINPD inum 4703
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=4205  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4206  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4207  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4208  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4700  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4701  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4205 -- already fine
	SKIPPING VFMADDSUBPD inum 4206 -- already fine
	SKIPPING VFMADDSUBPD inum 4207 -- already fine
	SKIPPING VFMADDSUBPD inum 4208 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4700
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 4205
	REARRANGE one pattern worked for VFMADDSUBPD inum 4205
	REARRANGE needs to juggle: VFMADDSUBPD inum 4206
	REARRANGE one pattern worked for VFMADDSUBPD inum 4206
	REARRANGE needs to juggle: VFMADDSUBPD inum 4207
	REARRANGE one pattern worked for VFMADDSUBPD inum 4207
	REARRANGE needs to juggle: VFMADDSUBPD inum 4208
	REARRANGE one pattern worked for VFMADDSUBPD inum 4208
	SKIPPING VMINPD inum 4700 -- already fine
	SKIPPING VMINPD inum 4701 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=4209  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4210  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=4211  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=4212  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=4702  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=4703  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 4209 -- already fine
	SKIPPING VFMADDSUBPD inum 4210 -- already fine
	SKIPPING VFMADDSUBPD inum 4211 -- already fine
	SKIPPING VFMADDSUBPD inum 4212 -- already fine
	REARRANGE needs to juggle: VMINPD inum 4702
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 4209
	REARRANGE one pattern worked for VFMADDSUBPD inum 4209
	REARRANGE needs to juggle: VFMADDSUBPD inum 4210
	REARRANGE one pattern worked for VFMADDSUBPD inum 4210
	REARRANGE needs to juggle: VFMADDSUBPD inum 4211
	REARRANGE one pattern worked for VFMADDSUBPD inum 4211
	REARRANGE needs to juggle: VFMADDSUBPD inum 4212
	REARRANGE one pattern worked for VFMADDSUBPD inum 4212
	SKIPPING VMINPD inum 4702 -- already fine
	SKIPPING VMINPD inum 4703 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VDIVPD inum=4600  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4601  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VDIVPD inum=4602  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=4603  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VFMSUBADDPS inum=4213  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4214  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4215  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4216  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4217  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4218  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=4219  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=4220  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VDIVPD inum 4600 -- already fine
	SKIPPING VDIVPD inum 4601 -- already fine
	SKIPPING VDIVPD inum 4602 -- already fine
	SKIPPING VDIVPD inum 4603 -- already fine
	REARRANGE needs to juggle: VFMSUBADDPS inum 4213
	REARRANGE one pattern worked for VFMSUBADDPS inum 4213
	REARRANGE needs to juggle: VFMSUBADDPS inum 4214
	REARRANGE one pattern worked for VFMSUBADDPS inum 4214
	REARRANGE needs to juggle: VFMSUBADDPS inum 4215
	REARRANGE one pattern worked for VFMSUBADDPS inum 4215
	REARRANGE needs to juggle: VFMSUBADDPS inum 4216
	REARRANGE one pattern worked for VFMSUBADDPS inum 4216
	REARRANGE needs to juggle: VFMSUBADDPS inum 4217
	REARRANGE one pattern worked for VFMSUBADDPS inum 4217
	REARRANGE needs to juggle: VFMSUBADDPS inum 4218
	REARRANGE one pattern worked for VFMSUBADDPS inum 4218
	REARRANGE needs to juggle: VFMSUBADDPS inum 4219
	REARRANGE one pattern worked for VFMSUBADDPS inum 4219
	REARRANGE needs to juggle: VFMSUBADDPS inum 4220
	REARRANGE one pattern worked for VFMSUBADDPS inum 4220
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VMAXPD inum=4688  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4689  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMAXPD inum=4690  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=4691  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VFMSUBADDPD inum=4221  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4222  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4223  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4224  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4225  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4226  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=4227  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=4228  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VMAXPD inum 4688 -- already fine
	SKIPPING VMAXPD inum 4689 -- already fine
	SKIPPING VMAXPD inum 4690 -- already fine
	SKIPPING VMAXPD inum 4691 -- already fine
	REARRANGE needs to juggle: VFMSUBADDPD inum 4221
	REARRANGE one pattern worked for VFMSUBADDPD inum 4221
	REARRANGE needs to juggle: VFMSUBADDPD inum 4222
	REARRANGE one pattern worked for VFMSUBADDPD inum 4222
	REARRANGE needs to juggle: VFMSUBADDPD inum 4223
	REARRANGE one pattern worked for VFMSUBADDPD inum 4223
	REARRANGE needs to juggle: VFMSUBADDPD inum 4224
	REARRANGE one pattern worked for VFMSUBADDPD inum 4224
	REARRANGE needs to juggle: VFMSUBADDPD inum 4225
	REARRANGE one pattern worked for VFMSUBADDPD inum 4225
	REARRANGE needs to juggle: VFMSUBADDPD inum 4226
	REARRANGE one pattern worked for VFMSUBADDPD inum 4226
	REARRANGE needs to juggle: VFMSUBADDPD inum 4227
	REARRANGE one pattern worked for VFMSUBADDPD inum 4227
	REARRANGE needs to juggle: VFMSUBADDPD inum 4228
	REARRANGE one pattern worked for VFMSUBADDPD inum 4228
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMADDPS inum=4229  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4230  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4231  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4232  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4233  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4234  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4235  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4236  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=4906  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=4907  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=5570  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5571  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPS inum 4229 -- already fine
	SKIPPING VFMADDPS inum 4230 -- already fine
	SKIPPING VFMADDPS inum 4231 -- already fine
	SKIPPING VFMADDPS inum 4232 -- already fine
	SKIPPING VFMADDPS inum 4233 -- already fine
	SKIPPING VFMADDPS inum 4234 -- already fine
	SKIPPING VFMADDPS inum 4235 -- already fine
	SKIPPING VFMADDPS inum 4236 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 4906
	REARRANGE one pattern worked for VPUNPCKHBW inum 4906
	REARRANGE needs to juggle: VPUNPCKHBW inum 4907
	REARRANGE one pattern worked for VPUNPCKHBW inum 4907
	REARRANGE needs to juggle: VPUNPCKHBW inum 5570
	REARRANGE one pattern worked for VPUNPCKHBW inum 5570
	REARRANGE needs to juggle: VPUNPCKHBW inum 5571
	REARRANGE one pattern worked for VPUNPCKHBW inum 5571
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPS inum=4229  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4230  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4231  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4232  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4233  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4234  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4235  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4236  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=4906  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=4907  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=5570  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5571  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4229 -- already fine
	SKIPPING VFMADDPS inum 4230 -- already fine
	SKIPPING VFMADDPS inum 4231 -- already fine
	SKIPPING VFMADDPS inum 4232 -- already fine
	SKIPPING VFMADDPS inum 4233 -- already fine
	SKIPPING VFMADDPS inum 4234 -- already fine
	SKIPPING VFMADDPS inum 4235 -- already fine
	SKIPPING VFMADDPS inum 4236 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 4906
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPS inum 4229
	REARRANGE one pattern worked for VFMADDPS inum 4229
	REARRANGE needs to juggle: VFMADDPS inum 4230
	REARRANGE one pattern worked for VFMADDPS inum 4230
	REARRANGE needs to juggle: VFMADDPS inum 4231
	REARRANGE one pattern worked for VFMADDPS inum 4231
	REARRANGE needs to juggle: VFMADDPS inum 4232
	REARRANGE one pattern worked for VFMADDPS inum 4232
	REARRANGE needs to juggle: VFMADDPS inum 4233
	REARRANGE one pattern worked for VFMADDPS inum 4233
	REARRANGE needs to juggle: VFMADDPS inum 4234
	REARRANGE one pattern worked for VFMADDPS inum 4234
	REARRANGE needs to juggle: VFMADDPS inum 4235
	REARRANGE one pattern worked for VFMADDPS inum 4235
	REARRANGE needs to juggle: VFMADDPS inum 4236
	REARRANGE one pattern worked for VFMADDPS inum 4236
	SKIPPING VPUNPCKHBW inum 4906 -- already fine
	SKIPPING VPUNPCKHBW inum 4907 -- already fine
	SKIPPING VPUNPCKHBW inum 5570 -- already fine
	SKIPPING VPUNPCKHBW inum 5571 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=4229  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4230  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4231  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4232  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=4906  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=4907  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4229 -- already fine
	SKIPPING VFMADDPS inum 4230 -- already fine
	SKIPPING VFMADDPS inum 4231 -- already fine
	SKIPPING VFMADDPS inum 4232 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 4906
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 4229
	REARRANGE one pattern worked for VFMADDPS inum 4229
	REARRANGE needs to juggle: VFMADDPS inum 4230
	REARRANGE one pattern worked for VFMADDPS inum 4230
	REARRANGE needs to juggle: VFMADDPS inum 4231
	REARRANGE one pattern worked for VFMADDPS inum 4231
	REARRANGE needs to juggle: VFMADDPS inum 4232
	REARRANGE one pattern worked for VFMADDPS inum 4232
	SKIPPING VPUNPCKHBW inum 4906 -- already fine
	SKIPPING VPUNPCKHBW inum 4907 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=4233  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4234  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=4235  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=4236  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5570  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5571  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 4233 -- already fine
	SKIPPING VFMADDPS inum 4234 -- already fine
	SKIPPING VFMADDPS inum 4235 -- already fine
	SKIPPING VFMADDPS inum 4236 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5570
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 4233
	REARRANGE one pattern worked for VFMADDPS inum 4233
	REARRANGE needs to juggle: VFMADDPS inum 4234
	REARRANGE one pattern worked for VFMADDPS inum 4234
	REARRANGE needs to juggle: VFMADDPS inum 4235
	REARRANGE one pattern worked for VFMADDPS inum 4235
	REARRANGE needs to juggle: VFMADDPS inum 4236
	REARRANGE one pattern worked for VFMADDPS inum 4236
	SKIPPING VPUNPCKHBW inum 5570 -- already fine
	SKIPPING VPUNPCKHBW inum 5571 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDPD inum=4237  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4238  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4239  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4240  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4241  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4242  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4243  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4244  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=4908  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=4909  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=5572  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5573  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPD inum 4237 -- already fine
	SKIPPING VFMADDPD inum 4238 -- already fine
	SKIPPING VFMADDPD inum 4239 -- already fine
	SKIPPING VFMADDPD inum 4240 -- already fine
	SKIPPING VFMADDPD inum 4241 -- already fine
	SKIPPING VFMADDPD inum 4242 -- already fine
	SKIPPING VFMADDPD inum 4243 -- already fine
	SKIPPING VFMADDPD inum 4244 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 4908
	REARRANGE one pattern worked for VPUNPCKHWD inum 4908
	REARRANGE needs to juggle: VPUNPCKHWD inum 4909
	REARRANGE one pattern worked for VPUNPCKHWD inum 4909
	REARRANGE needs to juggle: VPUNPCKHWD inum 5572
	REARRANGE one pattern worked for VPUNPCKHWD inum 5572
	REARRANGE needs to juggle: VPUNPCKHWD inum 5573
	REARRANGE one pattern worked for VPUNPCKHWD inum 5573
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPD inum=4237  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4238  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4239  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4240  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4241  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4242  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4243  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4244  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=4908  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=4909  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=5572  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5573  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 4237 -- already fine
	SKIPPING VFMADDPD inum 4238 -- already fine
	SKIPPING VFMADDPD inum 4239 -- already fine
	SKIPPING VFMADDPD inum 4240 -- already fine
	SKIPPING VFMADDPD inum 4241 -- already fine
	SKIPPING VFMADDPD inum 4242 -- already fine
	SKIPPING VFMADDPD inum 4243 -- already fine
	SKIPPING VFMADDPD inum 4244 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 4908
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPD inum 4237
	REARRANGE one pattern worked for VFMADDPD inum 4237
	REARRANGE needs to juggle: VFMADDPD inum 4238
	REARRANGE one pattern worked for VFMADDPD inum 4238
	REARRANGE needs to juggle: VFMADDPD inum 4239
	REARRANGE one pattern worked for VFMADDPD inum 4239
	REARRANGE needs to juggle: VFMADDPD inum 4240
	REARRANGE one pattern worked for VFMADDPD inum 4240
	REARRANGE needs to juggle: VFMADDPD inum 4241
	REARRANGE one pattern worked for VFMADDPD inum 4241
	REARRANGE needs to juggle: VFMADDPD inum 4242
	REARRANGE one pattern worked for VFMADDPD inum 4242
	REARRANGE needs to juggle: VFMADDPD inum 4243
	REARRANGE one pattern worked for VFMADDPD inum 4243
	REARRANGE needs to juggle: VFMADDPD inum 4244
	REARRANGE one pattern worked for VFMADDPD inum 4244
	SKIPPING VPUNPCKHWD inum 4908 -- already fine
	SKIPPING VPUNPCKHWD inum 4909 -- already fine
	SKIPPING VPUNPCKHWD inum 5572 -- already fine
	SKIPPING VPUNPCKHWD inum 5573 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPD inum=4237  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4238  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4239  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4240  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=4908  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=4909  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 4237 -- already fine
	SKIPPING VFMADDPD inum 4238 -- already fine
	SKIPPING VFMADDPD inum 4239 -- already fine
	SKIPPING VFMADDPD inum 4240 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 4908
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPD inum 4237
	REARRANGE one pattern worked for VFMADDPD inum 4237
	REARRANGE needs to juggle: VFMADDPD inum 4238
	REARRANGE one pattern worked for VFMADDPD inum 4238
	REARRANGE needs to juggle: VFMADDPD inum 4239
	REARRANGE one pattern worked for VFMADDPD inum 4239
	REARRANGE needs to juggle: VFMADDPD inum 4240
	REARRANGE one pattern worked for VFMADDPD inum 4240
	SKIPPING VPUNPCKHWD inum 4908 -- already fine
	SKIPPING VPUNPCKHWD inum 4909 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPD inum=4241  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4242  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=4243  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=4244  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5572  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5573  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 4241 -- already fine
	SKIPPING VFMADDPD inum 4242 -- already fine
	SKIPPING VFMADDPD inum 4243 -- already fine
	SKIPPING VFMADDPD inum 4244 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5572
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPD inum 4241
	REARRANGE one pattern worked for VFMADDPD inum 4241
	REARRANGE needs to juggle: VFMADDPD inum 4242
	REARRANGE one pattern worked for VFMADDPD inum 4242
	REARRANGE needs to juggle: VFMADDPD inum 4243
	REARRANGE one pattern worked for VFMADDPD inum 4243
	REARRANGE needs to juggle: VFMADDPD inum 4244
	REARRANGE one pattern worked for VFMADDPD inum 4244
	SKIPPING VPUNPCKHWD inum 5572 -- already fine
	SKIPPING VPUNPCKHWD inum 5573 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPUNPCKHDQ inum=4910  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=4911  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=5574  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5575  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSS inum=4245  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4246  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=4247  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4248  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHDQ inum 4910 -- already fine
	SKIPPING VPUNPCKHDQ inum 4911 -- already fine
	SKIPPING VPUNPCKHDQ inum 5574 -- already fine
	SKIPPING VPUNPCKHDQ inum 5575 -- already fine
	REARRANGE needs to juggle: VFMADDSS inum 4245
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPUNPCKHDQ inum 4910
	REARRANGE one pattern worked for VPUNPCKHDQ inum 4910
	REARRANGE needs to juggle: VPUNPCKHDQ inum 4911
	REARRANGE one pattern worked for VPUNPCKHDQ inum 4911
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5574
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5574
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5575
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5575
	SKIPPING VFMADDSS inum 4245 -- already fine
	SKIPPING VFMADDSS inum 4246 -- already fine
	SKIPPING VFMADDSS inum 4247 -- already fine
	SKIPPING VFMADDSS inum 4248 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPUNPCKHDQ inum=4910  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=4911  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=5574  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5575  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSS inum=4245  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4246  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=4247  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=4248  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHDQ inum 4910 -- already fine
	SKIPPING VPUNPCKHDQ inum 4911 -- already fine
	SKIPPING VPUNPCKHDQ inum 5574 -- already fine
	SKIPPING VPUNPCKHDQ inum 5575 -- already fine
	REARRANGE needs to juggle: VFMADDSS inum 4245
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPUNPCKHDQ inum 4910
	REARRANGE one pattern worked for VPUNPCKHDQ inum 4910
	REARRANGE needs to juggle: VPUNPCKHDQ inum 4911
	REARRANGE one pattern worked for VPUNPCKHDQ inum 4911
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5574
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5574
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5575
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5575
	REARRANGE needs to juggle: VFMADDSS inum 4245
	REARRANGE one pattern worked for VFMADDSS inum 4245
	REARRANGE needs to juggle: VFMADDSS inum 4246
	REARRANGE one pattern worked for VFMADDSS inum 4246
	REARRANGE needs to juggle: VFMADDSS inum 4247
	REARRANGE one pattern worked for VFMADDSS inum 4247
	REARRANGE needs to juggle: VFMADDSS inum 4248
	REARRANGE one pattern worked for VFMADDSS inum 4248
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPACKSSDW inum=4796  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=4797  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=5432  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5433  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSD inum=4249  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4250  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=4251  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4252  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPACKSSDW inum 4796 -- already fine
	SKIPPING VPACKSSDW inum 4797 -- already fine
	SKIPPING VPACKSSDW inum 5432 -- already fine
	SKIPPING VPACKSSDW inum 5433 -- already fine
	REARRANGE needs to juggle: VFMADDSD inum 4249
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPACKSSDW inum 4796
	REARRANGE one pattern worked for VPACKSSDW inum 4796
	REARRANGE needs to juggle: VPACKSSDW inum 4797
	REARRANGE one pattern worked for VPACKSSDW inum 4797
	REARRANGE needs to juggle: VPACKSSDW inum 5432
	REARRANGE one pattern worked for VPACKSSDW inum 5432
	REARRANGE needs to juggle: VPACKSSDW inum 5433
	REARRANGE one pattern worked for VPACKSSDW inum 5433
	SKIPPING VFMADDSD inum 4249 -- already fine
	SKIPPING VFMADDSD inum 4250 -- already fine
	SKIPPING VFMADDSD inum 4251 -- already fine
	SKIPPING VFMADDSD inum 4252 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPACKSSDW inum=4796  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=4797  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=5432  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5433  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMADDSD inum=4249  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4250  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=4251  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=4252  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPACKSSDW inum 4796 -- already fine
	SKIPPING VPACKSSDW inum 4797 -- already fine
	SKIPPING VPACKSSDW inum 5432 -- already fine
	SKIPPING VPACKSSDW inum 5433 -- already fine
	REARRANGE needs to juggle: VFMADDSD inum 4249
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPACKSSDW inum 4796
	REARRANGE one pattern worked for VPACKSSDW inum 4796
	REARRANGE needs to juggle: VPACKSSDW inum 4797
	REARRANGE one pattern worked for VPACKSSDW inum 4797
	REARRANGE needs to juggle: VPACKSSDW inum 5432
	REARRANGE one pattern worked for VPACKSSDW inum 5432
	REARRANGE needs to juggle: VPACKSSDW inum 5433
	REARRANGE one pattern worked for VPACKSSDW inum 5433
	REARRANGE needs to juggle: VFMADDSD inum 4249
	REARRANGE one pattern worked for VFMADDSD inum 4249
	REARRANGE needs to juggle: VFMADDSD inum 4250
	REARRANGE one pattern worked for VFMADDSD inum 4250
	REARRANGE needs to juggle: VFMADDSD inum 4251
	REARRANGE one pattern worked for VFMADDSD inum 4251
	REARRANGE needs to juggle: VFMADDSD inum 4252
	REARRANGE one pattern worked for VFMADDSD inum 4252
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBPS inum=4253  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4254  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4255  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4256  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4257  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4258  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4259  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4260  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=4920  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=4921  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=5584  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5585  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBPS inum 4253 -- already fine
	SKIPPING VFMSUBPS inum 4254 -- already fine
	SKIPPING VFMSUBPS inum 4255 -- already fine
	SKIPPING VFMSUBPS inum 4256 -- already fine
	SKIPPING VFMSUBPS inum 4257 -- already fine
	SKIPPING VFMSUBPS inum 4258 -- already fine
	SKIPPING VFMSUBPS inum 4259 -- already fine
	SKIPPING VFMSUBPS inum 4260 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 4920
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 4920
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 4921
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 4921
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5584
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5584
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5585
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5585
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBPS inum=4253  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4254  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4255  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4256  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4257  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4258  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4259  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4260  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=4920  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=4921  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=5584  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5585  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4253 -- already fine
	SKIPPING VFMSUBPS inum 4254 -- already fine
	SKIPPING VFMSUBPS inum 4255 -- already fine
	SKIPPING VFMSUBPS inum 4256 -- already fine
	SKIPPING VFMSUBPS inum 4257 -- already fine
	SKIPPING VFMSUBPS inum 4258 -- already fine
	SKIPPING VFMSUBPS inum 4259 -- already fine
	SKIPPING VFMSUBPS inum 4260 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 4920
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBPS inum 4253
	REARRANGE one pattern worked for VFMSUBPS inum 4253
	REARRANGE needs to juggle: VFMSUBPS inum 4254
	REARRANGE one pattern worked for VFMSUBPS inum 4254
	REARRANGE needs to juggle: VFMSUBPS inum 4255
	REARRANGE one pattern worked for VFMSUBPS inum 4255
	REARRANGE needs to juggle: VFMSUBPS inum 4256
	REARRANGE one pattern worked for VFMSUBPS inum 4256
	REARRANGE needs to juggle: VFMSUBPS inum 4257
	REARRANGE one pattern worked for VFMSUBPS inum 4257
	REARRANGE needs to juggle: VFMSUBPS inum 4258
	REARRANGE one pattern worked for VFMSUBPS inum 4258
	REARRANGE needs to juggle: VFMSUBPS inum 4259
	REARRANGE one pattern worked for VFMSUBPS inum 4259
	REARRANGE needs to juggle: VFMSUBPS inum 4260
	REARRANGE one pattern worked for VFMSUBPS inum 4260
	SKIPPING VPUNPCKLQDQ inum 4920 -- already fine
	SKIPPING VPUNPCKLQDQ inum 4921 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5584 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5585 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=4253  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4254  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4255  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4256  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=4920  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=4921  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4253 -- already fine
	SKIPPING VFMSUBPS inum 4254 -- already fine
	SKIPPING VFMSUBPS inum 4255 -- already fine
	SKIPPING VFMSUBPS inum 4256 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 4920
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 4253
	REARRANGE one pattern worked for VFMSUBPS inum 4253
	REARRANGE needs to juggle: VFMSUBPS inum 4254
	REARRANGE one pattern worked for VFMSUBPS inum 4254
	REARRANGE needs to juggle: VFMSUBPS inum 4255
	REARRANGE one pattern worked for VFMSUBPS inum 4255
	REARRANGE needs to juggle: VFMSUBPS inum 4256
	REARRANGE one pattern worked for VFMSUBPS inum 4256
	SKIPPING VPUNPCKLQDQ inum 4920 -- already fine
	SKIPPING VPUNPCKLQDQ inum 4921 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=4257  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4258  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=4259  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=4260  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5584  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5585  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 4257 -- already fine
	SKIPPING VFMSUBPS inum 4258 -- already fine
	SKIPPING VFMSUBPS inum 4259 -- already fine
	SKIPPING VFMSUBPS inum 4260 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5584
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 4257
	REARRANGE one pattern worked for VFMSUBPS inum 4257
	REARRANGE needs to juggle: VFMSUBPS inum 4258
	REARRANGE one pattern worked for VFMSUBPS inum 4258
	REARRANGE needs to juggle: VFMSUBPS inum 4259
	REARRANGE one pattern worked for VFMSUBPS inum 4259
	REARRANGE needs to juggle: VFMSUBPS inum 4260
	REARRANGE one pattern worked for VFMSUBPS inum 4260
	SKIPPING VPUNPCKLQDQ inum 5584 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5585 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPUNPCKHQDQ inum=4912  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=4913  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHQDQ inum=5576  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5577  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMSUBPD inum=4261  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4262  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4263  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4264  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4265  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4266  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4267  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4268  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPUNPCKHQDQ inum 4912 -- already fine
	SKIPPING VPUNPCKHQDQ inum 4913 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5576 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5577 -- already fine
	REARRANGE needs to juggle: VFMSUBPD inum 4261
	REARRANGE one pattern worked for VFMSUBPD inum 4261
	REARRANGE needs to juggle: VFMSUBPD inum 4262
	REARRANGE one pattern worked for VFMSUBPD inum 4262
	REARRANGE needs to juggle: VFMSUBPD inum 4263
	REARRANGE one pattern worked for VFMSUBPD inum 4263
	REARRANGE needs to juggle: VFMSUBPD inum 4264
	REARRANGE one pattern worked for VFMSUBPD inum 4264
	REARRANGE needs to juggle: VFMSUBPD inum 4265
	REARRANGE one pattern worked for VFMSUBPD inum 4265
	REARRANGE needs to juggle: VFMSUBPD inum 4266
	REARRANGE one pattern worked for VFMSUBPD inum 4266
	REARRANGE needs to juggle: VFMSUBPD inum 4267
	REARRANGE one pattern worked for VFMSUBPD inum 4267
	REARRANGE needs to juggle: VFMSUBPD inum 4268
	REARRANGE one pattern worked for VFMSUBPD inum 4268
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VPUNPCKHQDQ inum=4912  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=4913  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMSUBPD inum=4261  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4262  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4263  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4264  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPUNPCKHQDQ inum 4912 -- already fine
	SKIPPING VPUNPCKHQDQ inum 4913 -- already fine
	REARRANGE needs to juggle: VFMSUBPD inum 4261
	REARRANGE one pattern worked for VFMSUBPD inum 4261
	REARRANGE needs to juggle: VFMSUBPD inum 4262
	REARRANGE one pattern worked for VFMSUBPD inum 4262
	REARRANGE needs to juggle: VFMSUBPD inum 4263
	REARRANGE one pattern worked for VFMSUBPD inum 4263
	REARRANGE needs to juggle: VFMSUBPD inum 4264
	REARRANGE one pattern worked for VFMSUBPD inum 4264
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VPUNPCKHQDQ inum=5576  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5577  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFMSUBPD inum=4265  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4266  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=4267  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=4268  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPUNPCKHQDQ inum 5576 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5577 -- already fine
	REARRANGE needs to juggle: VFMSUBPD inum 4265
	REARRANGE one pattern worked for VFMSUBPD inum 4265
	REARRANGE needs to juggle: VFMSUBPD inum 4266
	REARRANGE one pattern worked for VFMSUBPD inum 4266
	REARRANGE needs to juggle: VFMSUBPD inum 4267
	REARRANGE one pattern worked for VFMSUBPD inum 4267
	REARRANGE needs to juggle: VFMSUBPD inum 4268
	REARRANGE one pattern worked for VFMSUBPD inum 4268
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VMOVQ inum=4736  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4737  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVD inum=4728  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4729  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4732  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4733  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VFMSUBSS inum=4269  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4270  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=4271  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4272  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVQ inum 4736 -- already fine
	SKIPPING VMOVQ inum 4737 -- already fine
	SKIPPING VMOVD inum 4728 -- already fine
	SKIPPING VMOVD inum 4729 -- already fine
	SKIPPING VMOVD inum 4732 -- already fine
	SKIPPING VMOVD inum 4733 -- already fine
	REARRANGE needs to juggle: VFMSUBSS inum 4269
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMOVQ inum 4736
	REARRANGE one pattern worked for VMOVQ inum 4736
	REARRANGE needs to juggle: VMOVQ inum 4737
	REARRANGE one pattern worked for VMOVQ inum 4737
	REARRANGE needs to juggle: VMOVD inum 4728
	REARRANGE one pattern worked for VMOVD inum 4728
	REARRANGE needs to juggle: VMOVD inum 4729
	REARRANGE one pattern worked for VMOVD inum 4729
	REARRANGE needs to juggle: VMOVD inum 4732
	REARRANGE one pattern worked for VMOVD inum 4732
	REARRANGE needs to juggle: VMOVD inum 4733
	REARRANGE one pattern worked for VMOVD inum 4733
	SKIPPING VFMSUBSS inum 4269 -- already fine
	SKIPPING VFMSUBSS inum 4270 -- already fine
	SKIPPING VFMSUBSS inum 4271 -- already fine
	SKIPPING VFMSUBSS inum 4272 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VMOVQ inum=4736  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4737  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVD inum=4728  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4729  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4732  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4733  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VFMSUBSS inum=4269  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4270  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=4271  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=4272  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVQ inum 4736 -- already fine
	SKIPPING VMOVQ inum 4737 -- already fine
	SKIPPING VMOVD inum 4728 -- already fine
	SKIPPING VMOVD inum 4729 -- already fine
	SKIPPING VMOVD inum 4732 -- already fine
	SKIPPING VMOVD inum 4733 -- already fine
	REARRANGE needs to juggle: VFMSUBSS inum 4269
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VMOVQ inum 4736
	REARRANGE one pattern worked for VMOVQ inum 4736
	REARRANGE needs to juggle: VMOVQ inum 4737
	REARRANGE one pattern worked for VMOVQ inum 4737
	REARRANGE needs to juggle: VMOVD inum 4728
	REARRANGE one pattern worked for VMOVD inum 4728
	REARRANGE needs to juggle: VMOVD inum 4729
	REARRANGE one pattern worked for VMOVD inum 4729
	REARRANGE needs to juggle: VMOVD inum 4732
	REARRANGE one pattern worked for VMOVD inum 4732
	REARRANGE needs to juggle: VMOVD inum 4733
	REARRANGE one pattern worked for VMOVD inum 4733
	REARRANGE needs to juggle: VFMSUBSS inum 4269
	REARRANGE one pattern worked for VFMSUBSS inum 4269
	REARRANGE needs to juggle: VFMSUBSS inum 4270
	REARRANGE one pattern worked for VFMSUBSS inum 4270
	REARRANGE needs to juggle: VFMSUBSS inum 4271
	REARRANGE one pattern worked for VFMSUBSS inum 4271
	REARRANGE needs to juggle: VFMSUBSS inum 4272
	REARRANGE one pattern worked for VFMSUBSS inum 4272
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VMOVDQA inum=4748  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4749  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4752  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4753  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4756  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4757  iform_input=VMOVDQU_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4758  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4759  iform_input=VMOVDQU_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VFMSUBSD inum=4273  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4274  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=4275  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4276  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVDQA inum 4748 -- already fine
	SKIPPING VMOVDQA inum 4749 -- already fine
	SKIPPING VMOVDQA inum 4752 -- already fine
	SKIPPING VMOVDQA inum 4753 -- already fine
	SKIPPING VMOVDQU inum 4756 -- already fine
	SKIPPING VMOVDQU inum 4757 -- already fine
	SKIPPING VMOVDQU inum 4758 -- already fine
	SKIPPING VMOVDQU inum 4759 -- already fine
	REARRANGE needs to juggle: VFMSUBSD inum 4273
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMOVDQA inum 4748
	REARRANGE one pattern worked for VMOVDQA inum 4748
	REARRANGE needs to juggle: VMOVDQA inum 4749
	REARRANGE one pattern worked for VMOVDQA inum 4749
	REARRANGE needs to juggle: VMOVDQA inum 4752
	REARRANGE one pattern worked for VMOVDQA inum 4752
	REARRANGE needs to juggle: VMOVDQA inum 4753
	REARRANGE one pattern worked for VMOVDQA inum 4753
	REARRANGE needs to juggle: VMOVDQU inum 4756
	REARRANGE one pattern worked for VMOVDQU inum 4756
	REARRANGE needs to juggle: VMOVDQU inum 4757
	REARRANGE one pattern worked for VMOVDQU inum 4757
	REARRANGE needs to juggle: VMOVDQU inum 4758
	REARRANGE one pattern worked for VMOVDQU inum 4758
	REARRANGE needs to juggle: VMOVDQU inum 4759
	REARRANGE one pattern worked for VMOVDQU inum 4759
	SKIPPING VFMSUBSD inum 4273 -- already fine
	SKIPPING VFMSUBSD inum 4274 -- already fine
	SKIPPING VFMSUBSD inum 4275 -- already fine
	SKIPPING VFMSUBSD inum 4276 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VMOVDQA inum=4748  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4749  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4752  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4753  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VFMSUBSD inum=4273  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4274  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=4275  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=4276  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVDQA inum 4748 -- already fine
	SKIPPING VMOVDQA inum 4749 -- already fine
	SKIPPING VMOVDQA inum 4752 -- already fine
	SKIPPING VMOVDQA inum 4753 -- already fine
	REARRANGE needs to juggle: VFMSUBSD inum 4273
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VMOVDQA inum 4748
	REARRANGE one pattern worked for VMOVDQA inum 4748
	REARRANGE needs to juggle: VMOVDQA inum 4749
	REARRANGE one pattern worked for VMOVDQA inum 4749
	REARRANGE needs to juggle: VMOVDQA inum 4752
	REARRANGE one pattern worked for VMOVDQA inum 4752
	REARRANGE needs to juggle: VMOVDQA inum 4753
	REARRANGE one pattern worked for VMOVDQA inum 4753
	REARRANGE needs to juggle: VFMSUBSD inum 4273
	REARRANGE one pattern worked for VFMSUBSD inum 4273
	REARRANGE needs to juggle: VFMSUBSD inum 4274
	REARRANGE one pattern worked for VFMSUBSD inum 4274
	REARRANGE needs to juggle: VFMSUBSD inum 4275
	REARRANGE one pattern worked for VFMSUBSD inum 4275
	REARRANGE needs to juggle: VFMSUBSD inum 4276
	REARRANGE one pattern worked for VFMSUBSD inum 4276
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPBROADCASTB inum=5669  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5670  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=5671  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5672  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPS inum=4277  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4278  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4279  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4280  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4281  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4282  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4283  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4284  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPBROADCASTB inum 5669 -- already fine
	SKIPPING VPBROADCASTB inum 5670 -- already fine
	SKIPPING VPBROADCASTB inum 5671 -- already fine
	SKIPPING VPBROADCASTB inum 5672 -- already fine
	REARRANGE needs to juggle: VFNMADDPS inum 4277
	REARRANGE one pattern worked for VFNMADDPS inum 4277
	REARRANGE needs to juggle: VFNMADDPS inum 4278
	REARRANGE one pattern worked for VFNMADDPS inum 4278
	REARRANGE needs to juggle: VFNMADDPS inum 4279
	REARRANGE one pattern worked for VFNMADDPS inum 4279
	REARRANGE needs to juggle: VFNMADDPS inum 4280
	REARRANGE one pattern worked for VFNMADDPS inum 4280
	REARRANGE needs to juggle: VFNMADDPS inum 4281
	REARRANGE one pattern worked for VFNMADDPS inum 4281
	REARRANGE needs to juggle: VFNMADDPS inum 4282
	REARRANGE one pattern worked for VFNMADDPS inum 4282
	REARRANGE needs to juggle: VFNMADDPS inum 4283
	REARRANGE one pattern worked for VFNMADDPS inum 4283
	REARRANGE needs to juggle: VFNMADDPS inum 4284
	REARRANGE one pattern worked for VFNMADDPS inum 4284
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VPBROADCASTB inum=5669  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5670  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPS inum=4277  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4278  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4279  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4280  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPBROADCASTB inum 5669 -- already fine
	SKIPPING VPBROADCASTB inum 5670 -- already fine
	REARRANGE needs to juggle: VFNMADDPS inum 4277
	REARRANGE one pattern worked for VFNMADDPS inum 4277
	REARRANGE needs to juggle: VFNMADDPS inum 4278
	REARRANGE one pattern worked for VFNMADDPS inum 4278
	REARRANGE needs to juggle: VFNMADDPS inum 4279
	REARRANGE one pattern worked for VFNMADDPS inum 4279
	REARRANGE needs to juggle: VFNMADDPS inum 4280
	REARRANGE one pattern worked for VFNMADDPS inum 4280
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VPBROADCASTB inum=5671  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=5672  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPS inum=4281  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4282  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=4283  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=4284  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPBROADCASTB inum 5671 -- already fine
	SKIPPING VPBROADCASTB inum 5672 -- already fine
	REARRANGE needs to juggle: VFNMADDPS inum 4281
	REARRANGE one pattern worked for VFNMADDPS inum 4281
	REARRANGE needs to juggle: VFNMADDPS inum 4282
	REARRANGE one pattern worked for VFNMADDPS inum 4282
	REARRANGE needs to juggle: VFNMADDPS inum 4283
	REARRANGE one pattern worked for VFNMADDPS inum 4283
	REARRANGE needs to juggle: VFNMADDPS inum 4284
	REARRANGE one pattern worked for VFNMADDPS inum 4284
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPBROADCASTW inum=5673  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5674  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTW inum=5675  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5676  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPD inum=4285  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4286  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4287  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4288  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4289  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4290  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4291  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4292  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPBROADCASTW inum 5673 -- already fine
	SKIPPING VPBROADCASTW inum 5674 -- already fine
	SKIPPING VPBROADCASTW inum 5675 -- already fine
	SKIPPING VPBROADCASTW inum 5676 -- already fine
	REARRANGE needs to juggle: VFNMADDPD inum 4285
	REARRANGE one pattern worked for VFNMADDPD inum 4285
	REARRANGE needs to juggle: VFNMADDPD inum 4286
	REARRANGE one pattern worked for VFNMADDPD inum 4286
	REARRANGE needs to juggle: VFNMADDPD inum 4287
	REARRANGE one pattern worked for VFNMADDPD inum 4287
	REARRANGE needs to juggle: VFNMADDPD inum 4288
	REARRANGE one pattern worked for VFNMADDPD inum 4288
	REARRANGE needs to juggle: VFNMADDPD inum 4289
	REARRANGE one pattern worked for VFNMADDPD inum 4289
	REARRANGE needs to juggle: VFNMADDPD inum 4290
	REARRANGE one pattern worked for VFNMADDPD inum 4290
	REARRANGE needs to juggle: VFNMADDPD inum 4291
	REARRANGE one pattern worked for VFNMADDPD inum 4291
	REARRANGE needs to juggle: VFNMADDPD inum 4292
	REARRANGE one pattern worked for VFNMADDPD inum 4292
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VPBROADCASTW inum=5673  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5674  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPD inum=4285  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4286  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4287  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4288  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPBROADCASTW inum 5673 -- already fine
	SKIPPING VPBROADCASTW inum 5674 -- already fine
	REARRANGE needs to juggle: VFNMADDPD inum 4285
	REARRANGE one pattern worked for VFNMADDPD inum 4285
	REARRANGE needs to juggle: VFNMADDPD inum 4286
	REARRANGE one pattern worked for VFNMADDPD inum 4286
	REARRANGE needs to juggle: VFNMADDPD inum 4287
	REARRANGE one pattern worked for VFNMADDPD inum 4287
	REARRANGE needs to juggle: VFNMADDPD inum 4288
	REARRANGE one pattern worked for VFNMADDPD inum 4288
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VPBROADCASTW inum=5675  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=5676  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VFNMADDPD inum=4289  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4290  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=4291  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=4292  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPBROADCASTW inum 5675 -- already fine
	SKIPPING VPBROADCASTW inum 5676 -- already fine
	REARRANGE needs to juggle: VFNMADDPD inum 4289
	REARRANGE one pattern worked for VFNMADDPD inum 4289
	REARRANGE needs to juggle: VFNMADDPD inum 4290
	REARRANGE one pattern worked for VFNMADDPD inum 4290
	REARRANGE needs to juggle: VFNMADDPD inum 4291
	REARRANGE one pattern worked for VFNMADDPD inum 4291
	REARRANGE needs to juggle: VFNMADDPD inum 4292
	REARRANGE one pattern worked for VFNMADDPD inum 4292
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VHADDPD inum=4624  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4625  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=4626  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4627  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=4628  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=4629  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=4630  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=4631  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPS inum=4301  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4302  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4303  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4304  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4305  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4306  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4307  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4308  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VHADDPD inum 4624 -- already fine
	SKIPPING VHADDPD inum 4625 -- already fine
	SKIPPING VHADDPD inum 4626 -- already fine
	SKIPPING VHADDPD inum 4627 -- already fine
	SKIPPING VHADDPS inum 4628 -- already fine
	SKIPPING VHADDPS inum 4629 -- already fine
	SKIPPING VHADDPS inum 4630 -- already fine
	SKIPPING VHADDPS inum 4631 -- already fine
	REARRANGE needs to juggle: VFNMSUBPS inum 4301
	REARRANGE one pattern worked for VFNMSUBPS inum 4301
	REARRANGE needs to juggle: VFNMSUBPS inum 4302
	REARRANGE one pattern worked for VFNMSUBPS inum 4302
	REARRANGE needs to juggle: VFNMSUBPS inum 4303
	REARRANGE one pattern worked for VFNMSUBPS inum 4303
	REARRANGE needs to juggle: VFNMSUBPS inum 4304
	REARRANGE one pattern worked for VFNMSUBPS inum 4304
	REARRANGE needs to juggle: VFNMSUBPS inum 4305
	REARRANGE one pattern worked for VFNMSUBPS inum 4305
	REARRANGE needs to juggle: VFNMSUBPS inum 4306
	REARRANGE one pattern worked for VFNMSUBPS inum 4306
	REARRANGE needs to juggle: VFNMSUBPS inum 4307
	REARRANGE one pattern worked for VFNMSUBPS inum 4307
	REARRANGE needs to juggle: VFNMSUBPS inum 4308
	REARRANGE one pattern worked for VFNMSUBPS inum 4308
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VHADDPD inum=4624  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4625  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPS inum=4301  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4302  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4303  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4304  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VHADDPD inum 4624 -- already fine
	SKIPPING VHADDPD inum 4625 -- already fine
	REARRANGE needs to juggle: VFNMSUBPS inum 4301
	REARRANGE one pattern worked for VFNMSUBPS inum 4301
	REARRANGE needs to juggle: VFNMSUBPS inum 4302
	REARRANGE one pattern worked for VFNMSUBPS inum 4302
	REARRANGE needs to juggle: VFNMSUBPS inum 4303
	REARRANGE one pattern worked for VFNMSUBPS inum 4303
	REARRANGE needs to juggle: VFNMSUBPS inum 4304
	REARRANGE one pattern worked for VFNMSUBPS inum 4304
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VHADDPD inum=4626  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=4627  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPS inum=4305  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4306  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=4307  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=4308  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VHADDPD inum 4626 -- already fine
	SKIPPING VHADDPD inum 4627 -- already fine
	REARRANGE needs to juggle: VFNMSUBPS inum 4305
	REARRANGE one pattern worked for VFNMSUBPS inum 4305
	REARRANGE needs to juggle: VFNMSUBPS inum 4306
	REARRANGE one pattern worked for VFNMSUBPS inum 4306
	REARRANGE needs to juggle: VFNMSUBPS inum 4307
	REARRANGE one pattern worked for VFNMSUBPS inum 4307
	REARRANGE needs to juggle: VFNMSUBPS inum 4308
	REARRANGE one pattern worked for VFNMSUBPS inum 4308
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VHSUBPD inum=4632  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4633  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPD inum=4634  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4635  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=4636  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=4637  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=4638  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=4639  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPD inum=4309  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4310  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4311  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4312  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4313  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4314  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4315  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4316  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VHSUBPD inum 4632 -- already fine
	SKIPPING VHSUBPD inum 4633 -- already fine
	SKIPPING VHSUBPD inum 4634 -- already fine
	SKIPPING VHSUBPD inum 4635 -- already fine
	SKIPPING VHSUBPS inum 4636 -- already fine
	SKIPPING VHSUBPS inum 4637 -- already fine
	SKIPPING VHSUBPS inum 4638 -- already fine
	SKIPPING VHSUBPS inum 4639 -- already fine
	REARRANGE needs to juggle: VFNMSUBPD inum 4309
	REARRANGE one pattern worked for VFNMSUBPD inum 4309
	REARRANGE needs to juggle: VFNMSUBPD inum 4310
	REARRANGE one pattern worked for VFNMSUBPD inum 4310
	REARRANGE needs to juggle: VFNMSUBPD inum 4311
	REARRANGE one pattern worked for VFNMSUBPD inum 4311
	REARRANGE needs to juggle: VFNMSUBPD inum 4312
	REARRANGE one pattern worked for VFNMSUBPD inum 4312
	REARRANGE needs to juggle: VFNMSUBPD inum 4313
	REARRANGE one pattern worked for VFNMSUBPD inum 4313
	REARRANGE needs to juggle: VFNMSUBPD inum 4314
	REARRANGE one pattern worked for VFNMSUBPD inum 4314
	REARRANGE needs to juggle: VFNMSUBPD inum 4315
	REARRANGE one pattern worked for VFNMSUBPD inum 4315
	REARRANGE needs to juggle: VFNMSUBPD inum 4316
	REARRANGE one pattern worked for VFNMSUBPD inum 4316
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
VHSUBPD inum=4632  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4633  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPD inum=4309  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4310  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4311  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4312  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VHSUBPD inum 4632 -- already fine
	SKIPPING VHSUBPD inum 4633 -- already fine
	REARRANGE needs to juggle: VFNMSUBPD inum 4309
	REARRANGE one pattern worked for VFNMSUBPD inum 4309
	REARRANGE needs to juggle: VFNMSUBPD inum 4310
	REARRANGE one pattern worked for VFNMSUBPD inum 4310
	REARRANGE needs to juggle: VFNMSUBPD inum 4311
	REARRANGE one pattern worked for VFNMSUBPD inum 4311
	REARRANGE needs to juggle: VFNMSUBPD inum 4312
	REARRANGE one pattern worked for VFNMSUBPD inum 4312
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VHSUBPD inum=4634  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=4635  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VFNMSUBPD inum=4313  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4314  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=4315  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=4316  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VHSUBPD inum 4634 -- already fine
	SKIPPING VHSUBPD inum 4635 -- already fine
	REARRANGE needs to juggle: VFNMSUBPD inum 4313
	REARRANGE one pattern worked for VFNMSUBPD inum 4313
	REARRANGE needs to juggle: VFNMSUBPD inum 4314
	REARRANGE one pattern worked for VFNMSUBPD inum 4314
	REARRANGE needs to juggle: VFNMSUBPD inum 4315
	REARRANGE one pattern worked for VFNMSUBPD inum 4315
	REARRANGE needs to juggle: VFNMSUBPD inum 4316
	REARRANGE one pattern worked for VFNMSUBPD inum 4316
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VMOVQ inum=4738  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4739  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=4740  iform_input=VMOVQ_XMMdq_MEMq_7E  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVQ inum=4741  iform_input=VMOVQ_XMMdq_XMMq_7E  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVD inum=4730  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4731  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4734  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4735  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VFNMSUBSS inum=4317  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4318  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=4319  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4320  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVQ inum 4738 -- already fine
	SKIPPING VMOVQ inum 4739 -- already fine
	SKIPPING VMOVQ inum 4740 -- already fine
	SKIPPING VMOVQ inum 4741 -- already fine
	SKIPPING VMOVD inum 4730 -- already fine
	SKIPPING VMOVD inum 4731 -- already fine
	SKIPPING VMOVD inum 4734 -- already fine
	SKIPPING VMOVD inum 4735 -- already fine
	REARRANGE needs to juggle: VFNMSUBSS inum 4317
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMOVQ inum 4738
	REARRANGE one pattern worked for VMOVQ inum 4738
	REARRANGE needs to juggle: VMOVQ inum 4739
	REARRANGE one pattern worked for VMOVQ inum 4739
	REARRANGE needs to juggle: VMOVQ inum 4740
	REARRANGE one pattern worked for VMOVQ inum 4740
	REARRANGE needs to juggle: VMOVQ inum 4741
	REARRANGE one pattern worked for VMOVQ inum 4741
	REARRANGE needs to juggle: VMOVD inum 4730
	REARRANGE one pattern worked for VMOVD inum 4730
	REARRANGE needs to juggle: VMOVD inum 4731
	REARRANGE one pattern worked for VMOVD inum 4731
	REARRANGE needs to juggle: VMOVD inum 4734
	REARRANGE one pattern worked for VMOVD inum 4734
	REARRANGE needs to juggle: VMOVD inum 4735
	REARRANGE one pattern worked for VMOVD inum 4735
	SKIPPING VFNMSUBSS inum 4317 -- already fine
	SKIPPING VFNMSUBSS inum 4318 -- already fine
	SKIPPING VFNMSUBSS inum 4319 -- already fine
	SKIPPING VFNMSUBSS inum 4320 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VMOVQ inum=4738  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=4739  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVD inum=4730  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=4731  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=4734  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=4735  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VFNMSUBSS inum=4317  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4318  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=4319  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=4320  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVQ inum 4738 -- already fine
	SKIPPING VMOVQ inum 4739 -- already fine
	SKIPPING VMOVD inum 4730 -- already fine
	SKIPPING VMOVD inum 4731 -- already fine
	SKIPPING VMOVD inum 4734 -- already fine
	SKIPPING VMOVD inum 4735 -- already fine
	REARRANGE needs to juggle: VFNMSUBSS inum 4317
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VMOVQ inum 4738
	REARRANGE one pattern worked for VMOVQ inum 4738
	REARRANGE needs to juggle: VMOVQ inum 4739
	REARRANGE one pattern worked for VMOVQ inum 4739
	REARRANGE needs to juggle: VMOVD inum 4730
	REARRANGE one pattern worked for VMOVD inum 4730
	REARRANGE needs to juggle: VMOVD inum 4731
	REARRANGE one pattern worked for VMOVD inum 4731
	REARRANGE needs to juggle: VMOVD inum 4734
	REARRANGE one pattern worked for VMOVD inum 4734
	REARRANGE needs to juggle: VMOVD inum 4735
	REARRANGE one pattern worked for VMOVD inum 4735
	REARRANGE needs to juggle: VFNMSUBSS inum 4317
	REARRANGE one pattern worked for VFNMSUBSS inum 4317
	REARRANGE needs to juggle: VFNMSUBSS inum 4318
	REARRANGE one pattern worked for VFNMSUBSS inum 4318
	REARRANGE needs to juggle: VFNMSUBSS inum 4319
	REARRANGE one pattern worked for VFNMSUBSS inum 4319
	REARRANGE needs to juggle: VFNMSUBSS inum 4320
	REARRANGE one pattern worked for VFNMSUBSS inum 4320
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VMOVDQA inum=4750  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4751  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4754  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4755  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4760  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4761  iform_input=VMOVDQU_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=4762  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=4763  iform_input=VMOVDQU_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VFNMSUBSD inum=4321  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4322  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=4323  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4324  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVDQA inum 4750 -- already fine
	SKIPPING VMOVDQA inum 4751 -- already fine
	SKIPPING VMOVDQA inum 4754 -- already fine
	SKIPPING VMOVDQA inum 4755 -- already fine
	SKIPPING VMOVDQU inum 4760 -- already fine
	SKIPPING VMOVDQU inum 4761 -- already fine
	SKIPPING VMOVDQU inum 4762 -- already fine
	SKIPPING VMOVDQU inum 4763 -- already fine
	REARRANGE needs to juggle: VFNMSUBSD inum 4321
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMOVDQA inum 4750
	REARRANGE one pattern worked for VMOVDQA inum 4750
	REARRANGE needs to juggle: VMOVDQA inum 4751
	REARRANGE one pattern worked for VMOVDQA inum 4751
	REARRANGE needs to juggle: VMOVDQA inum 4754
	REARRANGE one pattern worked for VMOVDQA inum 4754
	REARRANGE needs to juggle: VMOVDQA inum 4755
	REARRANGE one pattern worked for VMOVDQA inum 4755
	REARRANGE needs to juggle: VMOVDQU inum 4760
	REARRANGE one pattern worked for VMOVDQU inum 4760
	REARRANGE needs to juggle: VMOVDQU inum 4761
	REARRANGE one pattern worked for VMOVDQU inum 4761
	REARRANGE needs to juggle: VMOVDQU inum 4762
	REARRANGE one pattern worked for VMOVDQU inum 4762
	REARRANGE needs to juggle: VMOVDQU inum 4763
	REARRANGE one pattern worked for VMOVDQU inum 4763
	SKIPPING VFNMSUBSD inum 4321 -- already fine
	SKIPPING VFNMSUBSD inum 4322 -- already fine
	SKIPPING VFNMSUBSD inum 4323 -- already fine
	SKIPPING VFNMSUBSD inum 4324 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VMOVDQA inum=4750  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4751  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=4754  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=4755  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VFNMSUBSD inum=4321  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4322  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=4323  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=4324  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVDQA inum 4750 -- already fine
	SKIPPING VMOVDQA inum 4751 -- already fine
	SKIPPING VMOVDQA inum 4754 -- already fine
	SKIPPING VMOVDQA inum 4755 -- already fine
	REARRANGE needs to juggle: VFNMSUBSD inum 4321
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VMOVDQA inum 4750
	REARRANGE one pattern worked for VMOVDQA inum 4750
	REARRANGE needs to juggle: VMOVDQA inum 4751
	REARRANGE one pattern worked for VMOVDQA inum 4751
	REARRANGE needs to juggle: VMOVDQA inum 4754
	REARRANGE one pattern worked for VMOVDQA inum 4754
	REARRANGE needs to juggle: VMOVDQA inum 4755
	REARRANGE one pattern worked for VMOVDQA inum 4755
	REARRANGE needs to juggle: VFNMSUBSD inum 4321
	REARRANGE one pattern worked for VFNMSUBSD inum 4321
	REARRANGE needs to juggle: VFNMSUBSD inum 4322
	REARRANGE one pattern worked for VFNMSUBSD inum 4322
	REARRANGE needs to juggle: VFNMSUBSD inum 4323
	REARRANGE one pattern worked for VFNMSUBSD inum 4323
	REARRANGE needs to juggle: VFNMSUBSD inum 4324
	REARRANGE one pattern worked for VFNMSUBSD inum 4324
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KMOVB inum=8637  iform_input=KMOVB_MASKmskw_MASKu8_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8638  iform_input=KMOVB_MASKmskw_MEMu8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8642  iform_input=KMOVD_MASKmskw_MASKu32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8643  iform_input=KMOVD_MASKmskw_MEMu32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8649  iform_input=KMOVQ_MASKmskw_MASKu64_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8650  iform_input=KMOVQ_MASKmskw_MEMu64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVW inum=6798  iform_input=KMOVW_MASKmskw_MASKu16_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVW inum=6799  iform_input=KMOVW_MASKmskw_MEMu16_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERDD inum=5418  iform_input=VPGATHERDD_YMMu32_MEMd_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERDD inum=5419  iform_input=VPGATHERDD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5416  iform_input=VPGATHERDQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5417  iform_input=VPGATHERDQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KMOVB inum 8637 -- already fine
	SKIPPING KMOVB inum 8638 -- already fine
	SKIPPING KMOVD inum 8642 -- already fine
	SKIPPING KMOVD inum 8643 -- already fine
	SKIPPING KMOVQ inum 8649 -- already fine
	SKIPPING KMOVQ inum 8650 -- already fine
	SKIPPING KMOVW inum 6798 -- already fine
	SKIPPING KMOVW inum 6799 -- already fine
	REARRANGE needs to juggle: VPGATHERDD inum 5418
	REARRANGE one pattern worked for VPGATHERDD inum 5418
	REARRANGE needs to juggle: VPGATHERDD inum 5419
	REARRANGE one pattern worked for VPGATHERDD inum 5419
	REARRANGE needs to juggle: VPGATHERDQ inum 5416
	REARRANGE one pattern worked for VPGATHERDQ inum 5416
	REARRANGE needs to juggle: VPGATHERDQ inum 5417
	REARRANGE one pattern worked for VPGATHERDQ inum 5417
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KMOVB inum=8637  iform_input=KMOVB_MASKmskw_MASKu8_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=8638  iform_input=KMOVB_MASKmskw_MEMu8_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8642  iform_input=KMOVD_MASKmskw_MASKu32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8643  iform_input=KMOVD_MASKmskw_MEMu32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERDD inum=5418  iform_input=VPGATHERDD_YMMu32_MEMd_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERDD inum=5419  iform_input=VPGATHERDD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5416  iform_input=VPGATHERDQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=5417  iform_input=VPGATHERDQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KMOVB inum 8637 -- already fine
	SKIPPING KMOVB inum 8638 -- already fine
	SKIPPING KMOVD inum 8642 -- already fine
	SKIPPING KMOVD inum 8643 -- already fine
	REARRANGE needs to juggle: VPGATHERDD inum 5418
	REARRANGE one pattern worked for VPGATHERDD inum 5418
	REARRANGE needs to juggle: VPGATHERDD inum 5419
	REARRANGE one pattern worked for VPGATHERDD inum 5419
	REARRANGE needs to juggle: VPGATHERDQ inum 5416
	REARRANGE one pattern worked for VPGATHERDQ inum 5416
	REARRANGE needs to juggle: VPGATHERDQ inum 5417
	REARRANGE one pattern worked for VPGATHERDQ inum 5417
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KMOVB inum=8639  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8644  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=8651  iform_input=KMOVQ_MEMu64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVW inum=6800  iform_input=KMOVW_MEMu16_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERQD inum=5422  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=5423  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERQQ inum=5420  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=5421  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KMOVB inum 8639 -- already fine
	SKIPPING KMOVD inum 8644 -- already fine
	SKIPPING KMOVQ inum 8651 -- already fine
	SKIPPING KMOVW inum 6800 -- already fine
	REARRANGE needs to juggle: VPGATHERQD inum 5422
	REARRANGE one pattern worked for VPGATHERQD inum 5422
	REARRANGE needs to juggle: VPGATHERQD inum 5423
	REARRANGE one pattern worked for VPGATHERQD inum 5423
	REARRANGE needs to juggle: VPGATHERQQ inum 5420
	REARRANGE one pattern worked for VPGATHERQQ inum 5420
	REARRANGE needs to juggle: VPGATHERQQ inum 5421
	REARRANGE one pattern worked for VPGATHERQQ inum 5421
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KMOVB inum=8639  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8644  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

VPGATHERQD inum=5422  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=5423  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERQQ inum=5420  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=5421  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KMOVB inum 8639 -- already fine
	SKIPPING KMOVD inum 8644 -- already fine
	REARRANGE needs to juggle: VPGATHERQD inum 5422
	REARRANGE one pattern worked for VPGATHERQD inum 5422
	REARRANGE needs to juggle: VPGATHERQD inum 5423
	REARRANGE one pattern worked for VPGATHERQD inum 5423
	REARRANGE needs to juggle: VPGATHERQQ inum 5420
	REARRANGE one pattern worked for VPGATHERQQ inum 5420
	REARRANGE needs to juggle: VPGATHERQQ inum 5421
	REARRANGE one pattern worked for VPGATHERQQ inum 5421
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
KMOVB inum=8640  iform_input=KMOVB_MASKmskw_GPR32u32_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=8645  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8646  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8652  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVW inum=6801  iform_input=KMOVW_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VGATHERDPS inum=5410  iform_input=VGATHERDPS_YMMf32_MEMf32_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERDPS inum=5411  iform_input=VGATHERDPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5408  iform_input=VGATHERDPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5409  iform_input=VGATHERDPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KMOVB inum 8640 -- already fine
	SKIPPING KMOVD inum 8645 -- already fine
	SKIPPING KMOVD inum 8646 -- already fine
	SKIPPING KMOVQ inum 8652 -- already fine
	SKIPPING KMOVW inum 6801 -- already fine
	REARRANGE needs to juggle: VGATHERDPS inum 5410
	REARRANGE one pattern worked for VGATHERDPS inum 5410
	REARRANGE needs to juggle: VGATHERDPS inum 5411
	REARRANGE one pattern worked for VGATHERDPS inum 5411
	REARRANGE needs to juggle: VGATHERDPD inum 5408
	REARRANGE one pattern worked for VGATHERDPD inum 5408
	REARRANGE needs to juggle: VGATHERDPD inum 5409
	REARRANGE one pattern worked for VGATHERDPD inum 5409
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KMOVB inum=8640  iform_input=KMOVB_MASKmskw_GPR32u32_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VGATHERDPS inum=5410  iform_input=VGATHERDPS_YMMf32_MEMf32_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERDPS inum=5411  iform_input=VGATHERDPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5408  iform_input=VGATHERDPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=5409  iform_input=VGATHERDPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KMOVB inum 8640 -- already fine
	REARRANGE needs to juggle: VGATHERDPS inum 5410
	REARRANGE one pattern worked for VGATHERDPS inum 5410
	REARRANGE needs to juggle: VGATHERDPS inum 5411
	REARRANGE one pattern worked for VGATHERDPS inum 5411
	REARRANGE needs to juggle: VGATHERDPD inum 5408
	REARRANGE one pattern worked for VGATHERDPD inum 5408
	REARRANGE needs to juggle: VGATHERDPD inum 5409
	REARRANGE one pattern worked for VGATHERDPD inum 5409
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8645  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8646  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8652  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8645 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8646
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8645
	REARRANGE one pattern worked for KMOVD inum 8645
	SKIPPING KMOVD inum 8646 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8652
	REARRANGE one pattern worked for KMOVQ inum 8652
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
KMOVB inum=8641  iform_input=KMOVB_GPR32u32_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VGATHERQPD inum=5412  iform_input=VGATHERQPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPD inum=5413  iform_input=VGATHERQPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERQPS inum=5414  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPS inum=5415  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVD inum=8647  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8648  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8653  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVW inum=6802  iform_input=KMOVW_GPR32u32_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KMOVB inum 8641 -- already fine
	REARRANGE needs to juggle: VGATHERQPD inum 5412
	REARRANGE one pattern worked for VGATHERQPD inum 5412
	REARRANGE needs to juggle: VGATHERQPD inum 5413
	REARRANGE one pattern worked for VGATHERQPD inum 5413
	REARRANGE needs to juggle: VGATHERQPS inum 5414
	REARRANGE one pattern worked for VGATHERQPS inum 5414
	REARRANGE needs to juggle: VGATHERQPS inum 5415
	REARRANGE one pattern worked for VGATHERQPS inum 5415
	SKIPPING KMOVD inum 8647 -- already fine
	SKIPPING KMOVD inum 8648 -- already fine
	SKIPPING KMOVQ inum 8653 -- already fine
	SKIPPING KMOVW inum 6802 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KMOVB inum=8641  iform_input=KMOVB_GPR32u32_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VGATHERQPD inum=5412  iform_input=VGATHERQPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPD inum=5413  iform_input=VGATHERQPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERQPS inum=5414  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPS inum=5415  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KMOVB inum 8641 -- already fine
	REARRANGE needs to juggle: VGATHERQPD inum 5412
	REARRANGE one pattern worked for VGATHERQPD inum 5412
	REARRANGE needs to juggle: VGATHERQPD inum 5413
	REARRANGE one pattern worked for VGATHERQPD inum 5413
	REARRANGE needs to juggle: VGATHERQPS inum 5414
	REARRANGE one pattern worked for VGATHERQPS inum 5414
	REARRANGE needs to juggle: VGATHERQPS inum 5415
	REARRANGE one pattern worked for VGATHERQPS inum 5415
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=8647  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=8648  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=8653  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 8647 -- already fine
	REARRANGE needs to juggle: KMOVD inum 8648
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 8647
	REARRANGE one pattern worked for KMOVD inum 8647
	SKIPPING KMOVD inum 8648 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 8653
	REARRANGE one pattern worked for KMOVQ inum 8653
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
KORTESTW inum=6804  iform_input=KORTESTW_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTQ inum=8662  iform_input=KORTESTQ_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTD inum=8661  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTB inum=8660  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VFMADD132PD inum=5216  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5217  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=5218  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5219  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5220  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5221  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5222  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5223  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING KORTESTW inum 6804 -- already fine
	SKIPPING KORTESTQ inum 8662 -- already fine
	SKIPPING KORTESTD inum 8661 -- already fine
	SKIPPING KORTESTB inum 8660 -- already fine
	REARRANGE needs to juggle: VFMADD132PD inum 5216
	REARRANGE one pattern worked for VFMADD132PD inum 5216
	REARRANGE needs to juggle: VFMADD132PD inum 5217
	REARRANGE one pattern worked for VFMADD132PD inum 5217
	REARRANGE needs to juggle: VFMADD132PD inum 5218
	REARRANGE one pattern worked for VFMADD132PD inum 5218
	REARRANGE needs to juggle: VFMADD132PD inum 5219
	REARRANGE one pattern worked for VFMADD132PD inum 5219
	REARRANGE needs to juggle: VFMADD132PS inum 5220
	REARRANGE one pattern worked for VFMADD132PS inum 5220
	REARRANGE needs to juggle: VFMADD132PS inum 5221
	REARRANGE one pattern worked for VFMADD132PS inum 5221
	REARRANGE needs to juggle: VFMADD132PS inum 5222
	REARRANGE one pattern worked for VFMADD132PS inum 5222
	REARRANGE needs to juggle: VFMADD132PS inum 5223
	REARRANGE one pattern worked for VFMADD132PS inum 5223
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
KORTESTD inum=8661  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTB inum=8660  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOP pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

VFMADD132PD inum=5216  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5217  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=5218  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=5219  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5220  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5221  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=5222  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=5223  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING KORTESTD inum 8661 -- already fine
	SKIPPING KORTESTB inum 8660 -- already fine
	REARRANGE needs to juggle: VFMADD132PD inum 5216
	REARRANGE one pattern worked for VFMADD132PD inum 5216
	REARRANGE needs to juggle: VFMADD132PD inum 5217
	REARRANGE one pattern worked for VFMADD132PD inum 5217
	REARRANGE needs to juggle: VFMADD132PD inum 5218
	REARRANGE one pattern worked for VFMADD132PD inum 5218
	REARRANGE needs to juggle: VFMADD132PD inum 5219
	REARRANGE one pattern worked for VFMADD132PD inum 5219
	REARRANGE needs to juggle: VFMADD132PS inum 5220
	REARRANGE one pattern worked for VFMADD132PS inum 5220
	REARRANGE needs to juggle: VFMADD132PS inum 5221
	REARRANGE one pattern worked for VFMADD132PS inum 5221
	REARRANGE needs to juggle: VFMADD132PS inum 5222
	REARRANGE one pattern worked for VFMADD132PS inum 5222
	REARRANGE needs to juggle: VFMADD132PS inum 5223
	REARRANGE one pattern worked for VFMADD132PS inum 5223
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VAESENC inum=5196  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=5197  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=8929  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=8930  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPADDUSB inum=4830  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=4831  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=5466  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5467  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VAESENC inum 5196 -- already fine
	SKIPPING VAESENC inum 5197 -- already fine
	SKIPPING VAESENC inum 8929 -- already fine
	SKIPPING VAESENC inum 8930 -- already fine
	REARRANGE needs to juggle: VPADDUSB inum 4830
	REARRANGE one pattern worked for VPADDUSB inum 4830
	REARRANGE needs to juggle: VPADDUSB inum 4831
	REARRANGE one pattern worked for VPADDUSB inum 4831
	REARRANGE needs to juggle: VPADDUSB inum 5466
	REARRANGE one pattern worked for VPADDUSB inum 5466
	REARRANGE needs to juggle: VPADDUSB inum 5467
	REARRANGE one pattern worked for VPADDUSB inum 5467
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VAESENC inum=5196  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=5197  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=8929  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=8930  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPADDUSB inum=4830  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=4831  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=5466  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5467  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VAESENC inum 5196 -- already fine
	SKIPPING VAESENC inum 5197 -- already fine
	SKIPPING VAESENC inum 8929 -- already fine
	SKIPPING VAESENC inum 8930 -- already fine
	REARRANGE needs to juggle: VPADDUSB inum 4830
	REARRANGE one pattern worked for VPADDUSB inum 4830
	REARRANGE needs to juggle: VPADDUSB inum 4831
	REARRANGE one pattern worked for VPADDUSB inum 4831
	REARRANGE needs to juggle: VPADDUSB inum 5466
	REARRANGE one pattern worked for VPADDUSB inum 5466
	REARRANGE needs to juggle: VPADDUSB inum 5467
	REARRANGE one pattern worked for VPADDUSB inum 5467
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VAESENCLAST inum=5198  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENCLAST inum=5199  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENCLAST inum=8931  iform_input=VAESENCLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENCLAST inum=8932  iform_input=VAESENCLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPADDUSW inum=4832  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=4833  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSW inum=5468  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5469  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VAESENCLAST inum 5198 -- already fine
	SKIPPING VAESENCLAST inum 5199 -- already fine
	SKIPPING VAESENCLAST inum 8931 -- already fine
	SKIPPING VAESENCLAST inum 8932 -- already fine
	REARRANGE needs to juggle: VPADDUSW inum 4832
	REARRANGE one pattern worked for VPADDUSW inum 4832
	REARRANGE needs to juggle: VPADDUSW inum 4833
	REARRANGE one pattern worked for VPADDUSW inum 4833
	REARRANGE needs to juggle: VPADDUSW inum 5468
	REARRANGE one pattern worked for VPADDUSW inum 5468
	REARRANGE needs to juggle: VPADDUSW inum 5469
	REARRANGE one pattern worked for VPADDUSW inum 5469
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VAESENCLAST inum=5198  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENCLAST inum=5199  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENCLAST inum=8931  iform_input=VAESENCLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENCLAST inum=8932  iform_input=VAESENCLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPADDUSW inum=4832  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=4833  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSW inum=5468  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5469  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VAESENCLAST inum 5198 -- already fine
	SKIPPING VAESENCLAST inum 5199 -- already fine
	SKIPPING VAESENCLAST inum 8931 -- already fine
	SKIPPING VAESENCLAST inum 8932 -- already fine
	REARRANGE needs to juggle: VPADDUSW inum 4832
	REARRANGE one pattern worked for VPADDUSW inum 4832
	REARRANGE needs to juggle: VPADDUSW inum 4833
	REARRANGE one pattern worked for VPADDUSW inum 4833
	REARRANGE needs to juggle: VPADDUSW inum 5468
	REARRANGE one pattern worked for VPADDUSW inum 5468
	REARRANGE needs to juggle: VPADDUSW inum 5469
	REARRANGE one pattern worked for VPADDUSW inum 5469
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VAESDEC inum=5200  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=5201  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=8925  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=8926  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPMAXUB inum=5020  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5021  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=5512  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5513  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VAESDEC inum 5200 -- already fine
	SKIPPING VAESDEC inum 5201 -- already fine
	SKIPPING VAESDEC inum 8925 -- already fine
	SKIPPING VAESDEC inum 8926 -- already fine
	REARRANGE needs to juggle: VPMAXUB inum 5020
	REARRANGE one pattern worked for VPMAXUB inum 5020
	REARRANGE needs to juggle: VPMAXUB inum 5021
	REARRANGE one pattern worked for VPMAXUB inum 5021
	REARRANGE needs to juggle: VPMAXUB inum 5512
	REARRANGE one pattern worked for VPMAXUB inum 5512
	REARRANGE needs to juggle: VPMAXUB inum 5513
	REARRANGE one pattern worked for VPMAXUB inum 5513
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VAESDEC inum=5200  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=5201  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=8925  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=8926  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPMAXUB inum=5020  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5021  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=5512  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5513  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VAESDEC inum 5200 -- already fine
	SKIPPING VAESDEC inum 5201 -- already fine
	SKIPPING VAESDEC inum 8925 -- already fine
	SKIPPING VAESDEC inum 8926 -- already fine
	REARRANGE needs to juggle: VPMAXUB inum 5020
	REARRANGE one pattern worked for VPMAXUB inum 5020
	REARRANGE needs to juggle: VPMAXUB inum 5021
	REARRANGE one pattern worked for VPMAXUB inum 5021
	REARRANGE needs to juggle: VPMAXUB inum 5512
	REARRANGE one pattern worked for VPMAXUB inum 5512
	REARRANGE needs to juggle: VPMAXUB inum 5513
	REARRANGE one pattern worked for VPMAXUB inum 5513
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VAESDECLAST inum=5202  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDECLAST inum=5203  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDECLAST inum=8927  iform_input=VAESDECLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDECLAST inum=8928  iform_input=VAESDECLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPANDN inum=4776  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=4777  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPANDN inum=5596  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=5597  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESKEYGENASSIST inum=5194  isa_set=AVXAES pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()   

VAESKEYGENASSIST inum=5195  isa_set=AVXAES pattern len=25
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VAESDECLAST inum 5202 -- already fine
	SKIPPING VAESDECLAST inum 5203 -- already fine
	SKIPPING VAESDECLAST inum 8927 -- already fine
	SKIPPING VAESDECLAST inum 8928 -- already fine
	REARRANGE needs to juggle: VPANDN inum 4776
	REARRANGE one pattern worked for VPANDN inum 4776
	REARRANGE needs to juggle: VPANDN inum 4777
	REARRANGE one pattern worked for VPANDN inum 4777
	REARRANGE needs to juggle: VPANDN inum 5596
	REARRANGE one pattern worked for VPANDN inum 5596
	REARRANGE needs to juggle: VPANDN inum 5597
	REARRANGE one pattern worked for VPANDN inum 5597
	REARRANGE needs to juggle: VAESKEYGENASSIST inum 5194
	REARRANGE one pattern worked for VAESKEYGENASSIST inum 5194
	REARRANGE needs to juggle: VAESKEYGENASSIST inum 5195
	REARRANGE one pattern worked for VAESKEYGENASSIST inum 5195
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VAESDECLAST inum=5202  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDECLAST inum=5203  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDECLAST inum=8927  iform_input=VAESDECLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDECLAST inum=8928  iform_input=VAESDECLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VPANDN inum=4776  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=4777  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPANDN inum=5596  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=5597  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESKEYGENASSIST inum=5194  isa_set=AVXAES pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()   

VAESKEYGENASSIST inum=5195  isa_set=AVXAES pattern len=25
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VAESDECLAST inum 5202 -- already fine
	SKIPPING VAESDECLAST inum 5203 -- already fine
	SKIPPING VAESDECLAST inum 8927 -- already fine
	SKIPPING VAESDECLAST inum 8928 -- already fine
	REARRANGE needs to juggle: VPANDN inum 4776
	REARRANGE one pattern worked for VPANDN inum 4776
	REARRANGE needs to juggle: VPANDN inum 4777
	REARRANGE one pattern worked for VPANDN inum 4777
	REARRANGE needs to juggle: VPANDN inum 5596
	REARRANGE one pattern worked for VPANDN inum 5596
	REARRANGE needs to juggle: VPANDN inum 5597
	REARRANGE one pattern worked for VPANDN inum 5597
	REARRANGE needs to juggle: VAESKEYGENASSIST inum 5194
	REARRANGE one pattern worked for VAESKEYGENASSIST inum 5194
	REARRANGE needs to juggle: VAESKEYGENASSIST inum 5195
	REARRANGE one pattern worked for VAESKEYGENASSIST inum 5195
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VLDDQU inum=4666  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VLDDQU inum=4667  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

RORX inum=5782  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5783  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5784  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5785  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5786  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5787  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VLDDQU inum 4666 -- already fine
	SKIPPING VLDDQU inum 4667 -- already fine
	REARRANGE needs to juggle: RORX inum 5782
	REARRANGE one pattern worked for RORX inum 5782
	REARRANGE needs to juggle: RORX inum 5783
	REARRANGE one pattern worked for RORX inum 5783
	REARRANGE needs to juggle: RORX inum 5784
	REARRANGE one pattern worked for RORX inum 5784
	REARRANGE needs to juggle: RORX inum 5785
	REARRANGE one pattern worked for RORX inum 5785
	REARRANGE needs to juggle: RORX inum 5786
	REARRANGE one pattern worked for RORX inum 5786
	REARRANGE needs to juggle: RORX inum 5787
	REARRANGE one pattern worked for RORX inum 5787
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
RORX inum=5782  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=5783  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5784  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=5785  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=5786  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=5787  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING RORX inum 5782 -- already fine
	REARRANGE needs to juggle: RORX inum 5783
	REARRANGE one pattern worked for RORX inum 5783
	SKIPPING RORX inum 5784 -- already fine
	REARRANGE needs to juggle: RORX inum 5785
	REARRANGE one pattern worked for RORX inum 5785
	REARRANGE needs to juggle: RORX inum 5786
	REARRANGE one pattern worked for RORX inum 5786
	REARRANGE needs to juggle: RORX inum 5787
	REARRANGE one pattern worked for RORX inum 5787
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLD inum=4804  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=4805  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLD inum=5440  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5441  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5722  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5723  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5724  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

ANDN inum=5725  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

ANDN inum=5726  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5727  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLD inum 4804 -- already fine
	SKIPPING VPSLLD inum 4805 -- already fine
	SKIPPING VPSLLD inum 5440 -- already fine
	SKIPPING VPSLLD inum 5441 -- already fine
	REARRANGE needs to juggle: ANDN inum 5722
	REARRANGE one pattern worked for ANDN inum 5722
	REARRANGE needs to juggle: ANDN inum 5723
	REARRANGE one pattern worked for ANDN inum 5723
	REARRANGE needs to juggle: ANDN inum 5724
	REARRANGE one pattern worked for ANDN inum 5724
	REARRANGE needs to juggle: ANDN inum 5725
	REARRANGE one pattern worked for ANDN inum 5725
	REARRANGE needs to juggle: ANDN inum 5726
	REARRANGE one pattern worked for ANDN inum 5726
	REARRANGE needs to juggle: ANDN inum 5727
	REARRANGE one pattern worked for ANDN inum 5727
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLD inum=4804  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=4805  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=5722  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5723  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5724  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5725  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5726  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5727  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLD inum 4804 -- already fine
	SKIPPING VPSLLD inum 4805 -- already fine
	REARRANGE needs to juggle: ANDN inum 5722
	REARRANGE one pattern worked for ANDN inum 5722
	REARRANGE needs to juggle: ANDN inum 5723
	REARRANGE one pattern worked for ANDN inum 5723
	REARRANGE needs to juggle: ANDN inum 5724
	REARRANGE one pattern worked for ANDN inum 5724
	REARRANGE needs to juggle: ANDN inum 5725
	REARRANGE one pattern worked for ANDN inum 5725
	REARRANGE needs to juggle: ANDN inum 5726
	REARRANGE one pattern worked for ANDN inum 5726
	REARRANGE needs to juggle: ANDN inum 5727
	REARRANGE one pattern worked for ANDN inum 5727
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
ANDN inum=5722  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=5723  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5724  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=5725  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=5726  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=5727  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING ANDN inum 5722 -- already fine
	REARRANGE needs to juggle: ANDN inum 5723
	REARRANGE one pattern worked for ANDN inum 5723
	SKIPPING ANDN inum 5724 -- already fine
	REARRANGE needs to juggle: ANDN inum 5725
	REARRANGE one pattern worked for ANDN inum 5725
	REARRANGE needs to juggle: ANDN inum 5726
	REARRANGE one pattern worked for ANDN inum 5726
	REARRANGE needs to juggle: ANDN inum 5727
	REARRANGE one pattern worked for ANDN inum 5727
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
BLSMSK inum=5734  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5735  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5736  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5737  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5738  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5739  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 0    n n n

VPSLLQ inum=4806  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=4807  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLQ inum=5442  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5443  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSI inum=5740  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5741  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5742  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5743  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 1    n n n

BLSI inum=5744  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5745  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSR inum=5728  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5729  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5730  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5731  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 0 1    n n n

BLSR inum=5732  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5733  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 0 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING BLSMSK inum 5734 -- already fine
	SKIPPING BLSMSK inum 5735 -- already fine
	SKIPPING BLSMSK inum 5736 -- already fine
	SKIPPING BLSMSK inum 5737 -- already fine
	SKIPPING BLSMSK inum 5738 -- already fine
	SKIPPING BLSMSK inum 5739 -- already fine
	REARRANGE needs to juggle: VPSLLQ inum 4806
	REARRANGE one pattern worked for VPSLLQ inum 4806
	REARRANGE needs to juggle: VPSLLQ inum 4807
	REARRANGE one pattern worked for VPSLLQ inum 4807
	REARRANGE needs to juggle: VPSLLQ inum 5442
	REARRANGE one pattern worked for VPSLLQ inum 5442
	REARRANGE needs to juggle: VPSLLQ inum 5443
	REARRANGE one pattern worked for VPSLLQ inum 5443
	SKIPPING BLSI inum 5740 -- already fine
	SKIPPING BLSI inum 5741 -- already fine
	SKIPPING BLSI inum 5742 -- already fine
	SKIPPING BLSI inum 5743 -- already fine
	SKIPPING BLSI inum 5744 -- already fine
	SKIPPING BLSI inum 5745 -- already fine
	SKIPPING BLSR inum 5728 -- already fine
	SKIPPING BLSR inum 5729 -- already fine
	SKIPPING BLSR inum 5730 -- already fine
	SKIPPING BLSR inum 5731 -- already fine
	SKIPPING BLSR inum 5732 -- already fine
	SKIPPING BLSR inum 5733 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
BLSMSK inum=5734  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=5735  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5736  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=5737  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=5738  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=5739  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=5740  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=5741  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5742  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 1 n    n n

BLSI inum=5743  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 1    n n n

BLSI inum=5744  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=5745  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSR inum=5728  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=5729  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5730  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 0 1 n    n n

BLSR inum=5731  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 0 1    n n n

BLSR inum=5732  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=5733  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 0 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BLSMSK inum 5734 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5735
	REARRANGE one pattern worked for BLSMSK inum 5735
	SKIPPING BLSMSK inum 5736 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 5737
	REARRANGE one pattern worked for BLSMSK inum 5737
	REARRANGE needs to juggle: BLSMSK inum 5738
	REARRANGE one pattern worked for BLSMSK inum 5738
	REARRANGE needs to juggle: BLSMSK inum 5739
	REARRANGE one pattern worked for BLSMSK inum 5739
	SKIPPING BLSI inum 5740 -- already fine
	REARRANGE needs to juggle: BLSI inum 5741
	REARRANGE one pattern worked for BLSI inum 5741
	SKIPPING BLSI inum 5742 -- already fine
	REARRANGE needs to juggle: BLSI inum 5743
	REARRANGE one pattern worked for BLSI inum 5743
	REARRANGE needs to juggle: BLSI inum 5744
	REARRANGE one pattern worked for BLSI inum 5744
	REARRANGE needs to juggle: BLSI inum 5745
	REARRANGE one pattern worked for BLSI inum 5745
	SKIPPING BLSR inum 5728 -- already fine
	REARRANGE needs to juggle: BLSR inum 5729
	REARRANGE one pattern worked for BLSR inum 5729
	SKIPPING BLSR inum 5730 -- already fine
	REARRANGE needs to juggle: BLSR inum 5731
	REARRANGE one pattern worked for BLSR inum 5731
	REARRANGE needs to juggle: BLSR inum 5732
	REARRANGE one pattern worked for BLSR inum 5732
	REARRANGE needs to juggle: BLSR inum 5733
	REARRANGE one pattern worked for BLSR inum 5733
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
BZHI inum=5746  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5747  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5748  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=5749  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=5750  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5751  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=5710  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5711  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5712  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=5713  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=5714  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5715  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=5716  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5717  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5718  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=5719  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=5720  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5721  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

VPMADDWD inum=5038  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5039  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMADDWD inum=5502  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5503  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING BZHI inum 5746 -- already fine
	SKIPPING BZHI inum 5747 -- already fine
	SKIPPING BZHI inum 5748 -- already fine
	SKIPPING BZHI inum 5749 -- already fine
	SKIPPING BZHI inum 5750 -- already fine
	SKIPPING BZHI inum 5751 -- already fine
	SKIPPING PDEP inum 5710 -- already fine
	SKIPPING PDEP inum 5711 -- already fine
	SKIPPING PDEP inum 5712 -- already fine
	SKIPPING PDEP inum 5713 -- already fine
	SKIPPING PDEP inum 5714 -- already fine
	SKIPPING PDEP inum 5715 -- already fine
	SKIPPING PEXT inum 5716 -- already fine
	SKIPPING PEXT inum 5717 -- already fine
	SKIPPING PEXT inum 5718 -- already fine
	SKIPPING PEXT inum 5719 -- already fine
	SKIPPING PEXT inum 5720 -- already fine
	SKIPPING PEXT inum 5721 -- already fine
	REARRANGE needs to juggle: VPMADDWD inum 5038
	REARRANGE one pattern worked for VPMADDWD inum 5038
	REARRANGE needs to juggle: VPMADDWD inum 5039
	REARRANGE one pattern worked for VPMADDWD inum 5039
	REARRANGE needs to juggle: VPMADDWD inum 5502
	REARRANGE one pattern worked for VPMADDWD inum 5502
	REARRANGE needs to juggle: VPMADDWD inum 5503
	REARRANGE one pattern worked for VPMADDWD inum 5503
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
BZHI inum=5746  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=5747  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5748  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=5749  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=5750  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=5751  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BZHI inum 5746 -- already fine
	REARRANGE needs to juggle: BZHI inum 5747
	REARRANGE one pattern worked for BZHI inum 5747
	SKIPPING BZHI inum 5748 -- already fine
	REARRANGE needs to juggle: BZHI inum 5749
	REARRANGE one pattern worked for BZHI inum 5749
	REARRANGE needs to juggle: BZHI inum 5750
	REARRANGE one pattern worked for BZHI inum 5750
	REARRANGE needs to juggle: BZHI inum 5751
	REARRANGE one pattern worked for BZHI inum 5751
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
PDEP inum=5710  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=5711  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5712  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=5713  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=5714  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=5715  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PDEP inum 5710 -- already fine
	REARRANGE needs to juggle: PDEP inum 5711
	REARRANGE one pattern worked for PDEP inum 5711
	SKIPPING PDEP inum 5712 -- already fine
	REARRANGE needs to juggle: PDEP inum 5713
	REARRANGE one pattern worked for PDEP inum 5713
	REARRANGE needs to juggle: PDEP inum 5714
	REARRANGE one pattern worked for PDEP inum 5714
	REARRANGE needs to juggle: PDEP inum 5715
	REARRANGE one pattern worked for PDEP inum 5715
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
PEXT inum=5716  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=5717  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5718  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=5719  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=5720  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=5721  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PEXT inum 5716 -- already fine
	REARRANGE needs to juggle: PEXT inum 5717
	REARRANGE one pattern worked for PEXT inum 5717
	SKIPPING PEXT inum 5718 -- already fine
	REARRANGE needs to juggle: PEXT inum 5719
	REARRANGE one pattern worked for PEXT inum 5719
	REARRANGE needs to juggle: PEXT inum 5720
	REARRANGE one pattern worked for PEXT inum 5720
	REARRANGE needs to juggle: PEXT inum 5721
	REARRANGE one pattern worked for PEXT inum 5721
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
MULX inum=5776  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=5777  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=5778  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5779  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5780  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5781  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

VPSADBW inum=4880  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=4881  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSADBW inum=5544  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5545  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING MULX inum 5776 -- already fine
	SKIPPING MULX inum 5777 -- already fine
	SKIPPING MULX inum 5778 -- already fine
	SKIPPING MULX inum 5779 -- already fine
	SKIPPING MULX inum 5780 -- already fine
	SKIPPING MULX inum 5781 -- already fine
	REARRANGE needs to juggle: VPSADBW inum 4880
	REARRANGE one pattern worked for VPSADBW inum 4880
	REARRANGE needs to juggle: VPSADBW inum 4881
	REARRANGE one pattern worked for VPSADBW inum 4881
	REARRANGE needs to juggle: VPSADBW inum 5544
	REARRANGE one pattern worked for VPSADBW inum 5544
	REARRANGE needs to juggle: VPSADBW inum 5545
	REARRANGE one pattern worked for VPSADBW inum 5545
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 11
Others: 
MULX inum=5776  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=5777  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=5778  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=5779  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=5780  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=5781  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING MULX inum 5776 -- already fine
	REARRANGE needs to juggle: MULX inum 5777
	REARRANGE one pattern worked for MULX inum 5777
	SKIPPING MULX inum 5778 -- already fine
	REARRANGE needs to juggle: MULX inum 5779
	REARRANGE one pattern worked for MULX inum 5779
	REARRANGE needs to juggle: MULX inum 5780
	REARRANGE one pattern worked for MULX inum 5780
	REARRANGE needs to juggle: MULX inum 5781
	REARRANGE one pattern worked for MULX inum 5781
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
BEXTR inum=5752  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BEXTR inum=5753  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5754  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BEXTR inum=5755  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BEXTR inum=5756  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=5757  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BEXTR inum 5752 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5753
	REARRANGE one pattern worked for BEXTR inum 5753
	SKIPPING BEXTR inum 5754 -- already fine
	REARRANGE needs to juggle: BEXTR inum 5755
	REARRANGE one pattern worked for BEXTR inum 5755
	REARRANGE needs to juggle: BEXTR inum 5756
	REARRANGE one pattern worked for BEXTR inum 5756
	REARRANGE needs to juggle: BEXTR inum 5757
	REARRANGE one pattern worked for BEXTR inum 5757
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHLX inum=5758  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHLX inum=5759  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5760  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHLX inum=5761  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHLX inum=5762  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=5763  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHLX inum 5758 -- already fine
	REARRANGE needs to juggle: SHLX inum 5759
	REARRANGE one pattern worked for SHLX inum 5759
	SKIPPING SHLX inum 5760 -- already fine
	REARRANGE needs to juggle: SHLX inum 5761
	REARRANGE one pattern worked for SHLX inum 5761
	REARRANGE needs to juggle: SHLX inum 5762
	REARRANGE one pattern worked for SHLX inum 5762
	REARRANGE needs to juggle: SHLX inum 5763
	REARRANGE one pattern worked for SHLX inum 5763
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHRX inum=5770  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHRX inum=5771  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5772  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHRX inum=5773  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHRX inum=5774  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=5775  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHRX inum 5770 -- already fine
	REARRANGE needs to juggle: SHRX inum 5771
	REARRANGE one pattern worked for SHRX inum 5771
	SKIPPING SHRX inum 5772 -- already fine
	REARRANGE needs to juggle: SHRX inum 5773
	REARRANGE one pattern worked for SHRX inum 5773
	REARRANGE needs to juggle: SHRX inum 5774
	REARRANGE one pattern worked for SHRX inum 5774
	REARRANGE needs to juggle: SHRX inum 5775
	REARRANGE one pattern worked for SHRX inum 5775
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SARX inum=5764  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SARX inum=5765  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5766  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SARX inum=5767  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SARX inum=5768  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=5769  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SARX inum 5764 -- already fine
	REARRANGE needs to juggle: SARX inum 5765
	REARRANGE one pattern worked for SARX inum 5765
	SKIPPING SARX inum 5766 -- already fine
	REARRANGE needs to juggle: SARX inum 5767
	REARRANGE one pattern worked for SARX inum 5767
	REARRANGE needs to juggle: SARX inum 5768
	REARRANGE one pattern worked for SARX inum 5768
	REARRANGE needs to juggle: SARX inum 5769
	REARRANGE one pattern worked for SARX inum 5769
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 22
Others: 
VPEXTRD inum=7809  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0    UIMM8()

VPEXTRD inum=7810  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

VPEXTRQ inum=7813  iform_input=VPEXTRQ_GPR64u64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 7809 -- already fine
	SKIPPING VPEXTRD inum 7810 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 7813
	REARRANGE one pattern worked for VPEXTRQ inum 7813
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPEXTRD inum=7811  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=32
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8() ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VPEXTRD inum=7812  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_WRITER_STORE()

VPEXTRQ inum=7814  iform_input=VPEXTRQ_MEMu64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_64_BITS()    NELEM_GPR_WRITER_STORE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 7811 -- already fine
	SKIPPING VPEXTRD inum 7812 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 7814
	REARRANGE one pattern worked for VPEXTRQ inum 7814
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPINSRD inum=7829  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 ZEROING=0    MASK=0 UIMM8()

VPINSRD inum=7830  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    ZEROING=0 MASK=0 UIMM8()

VPINSRQ inum=7833  iform_input=VPINSRQ_XMMu64_XMMu64_GPR64u64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    ZEROING=0 MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 7829 -- already fine
	SKIPPING VPINSRD inum 7830 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 7833
	REARRANGE one pattern worked for VPINSRQ inum 7833
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VPINSRD inum=7831  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_READER()

VPINSRD inum=7832  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 ZEROING=0 MASK=0 UIMM8()    ESIZE_32_BITS() NELEM_GPR_READER()

VPINSRQ inum=7834  iform_input=VPINSRQ_XMMu64_XMMu64_MEMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 ZEROING=0 MASK=0 UIMM8()    ESIZE_64_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 7831 -- already fine
	SKIPPING VPINSRD inum 7832 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 7834
	REARRANGE one pattern worked for VPINSRQ inum 7834
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VMOVQ inum=6409  iform_input=VMOVQ_XMMu64_GPR64u64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVD inum=6369  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6370  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VMOVQ inum 6409 -- already fine
	REARRANGE needs to juggle: VMOVD inum 6369
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VMOVQ inum 6409
	REARRANGE one pattern worked for VMOVQ inum 6409
	SKIPPING VMOVD inum 6369 -- already fine
	SKIPPING VMOVD inum 6370 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVQ inum=6410  iform_input=VMOVQ_XMMu64_MEMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_READER()   

VMOVD inum=6371  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()

VMOVD inum=6372  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VMOVQ inum 6410 -- already fine
	REARRANGE needs to juggle: VMOVD inum 6371
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VMOVQ inum 6410
	REARRANGE one pattern worked for VMOVQ inum 6410
	SKIPPING VMOVD inum 6371 -- already fine
	SKIPPING VMOVD inum 6372 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7600  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7601  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7612  iform_input=VPBROADCASTQ_XMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7600 -- already fine
	SKIPPING VPBROADCASTD inum 7601 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7612
	REARRANGE one pattern worked for VPBROADCASTQ inum 7612
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VPBROADCASTD inum=7604  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=7605  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTQ inum=7615  iform_input=VPBROADCASTQ_YMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 r    r r n n    n VL=1 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 7604 -- already fine
	SKIPPING VPBROADCASTD inum 7605 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 7615
	REARRANGE one pattern worked for VPBROADCASTQ inum 7615
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 22
Others: 
VMOVQ inum=6411  iform_input=VMOVQ_GPR64u64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 REXW=1 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVD inum=6373  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE!=2 VEXDEST3=0b1    VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0 MASK=0   

VMOVD inum=6374  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 r    r r n n    n VL=0 MODE=2 REXW=0    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VMOVQ inum 6411 -- already fine
	REARRANGE needs to juggle: VMOVD inum 6373
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VMOVQ inum 6411
	REARRANGE one pattern worked for VMOVQ inum 6411
	SKIPPING VMOVD inum 6373 -- already fine
	SKIPPING VMOVD inum 6374 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 22
FUNKY SPOT: bitpos 23
Others: 
VMOVQ inum=6412  iform_input=VMOVQ_MEMu64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_64_BITS() NELEM_GPR_WRITER_STORE()   

VMOVD inum=6375  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()

VMOVD inum=6376  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    BCRC=0 MODRM() VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VMOVQ inum 6412 -- already fine
	REARRANGE needs to juggle: VMOVD inum 6375
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VMOVQ inum 6412
	REARRANGE one pattern worked for VMOVQ inum 6412
	SKIPPING VMOVD inum 6375 -- already fine
	SKIPPING VMOVD inum 6376 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
[NUMBER OF CONVERT PATTERNS] 5
FE:EMIT_FILE obj/xed-operand-convert-init.c
emit_iclass_enum_info
FE:EMIT_FILE obj/xed-iclass-enum.txt
FE:EMIT_FILE obj/xed-iclass-enum.c
FE:EMIT_FILE obj/xed-iclass-enum.h
NOREP KEYS: [103, 104, 106, 108, 277, 278, 281, 383, 384, 385, 386, 438, 439, 443, 445, 480, 481, 482, 726, 727, 728, 729, 779, 780, 781, 782]
REP KEYS: [672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705]
key - 672
h(x) = linear(x - 672)
FOUND PERFECT HASH FUNCTION FOR repinst
((24*key % 179) % 52)
x = Sigma(Ti << bit_shift)
FKS(x) = (24x mod 179) mod 52
FOUND PERFECT HASH FUNCTION FOR norepinst
FE:EMIT_FILE obj/xed-rep-map.c
FE:EMIT_FILE obj/xed-iform-enum.txt
FE:EMIT_FILE obj/xed-iform-enum.c
FE:EMIT_FILE obj/xed-iform-enum.h
FE:EMIT_FILE obj/xed-iformfl-enum.txt
FE:EMIT_FILE obj/xed-iformfl-enum.c
FE:EMIT_FILE obj/xed-iformfl-enum.h
FE:EMIT_FILE obj/xed-iform-max.c
FE:EMIT_FILE obj/xed-iclass-string.c
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] JNLE_RELBRb
[DUPLICATE IFORM] BNDMOV_BND_MEMq
[DUPLICATE IFORM] BNDMOV_BND_BND
[DUPLICATE IFORM] BNDMOV_MEMq_BND
[DUPLICATE IFORM] JNS_RELBRb
[DUPLICATE IFORM] JL_RELBRb
[DUPLICATE IFORM] JNP_RELBRb
[DUPLICATE IFORM] JNZ_RELBRb
[DUPLICATE IFORM] JNB_RELBRb
[DUPLICATE IFORM] SYSEXIT
[DUPLICATE IFORM] JNO_RELBRb
[DUPLICATE IFORM] JNL_RELBRb
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] NOP_90
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1A
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] BSR_GPRv_MEMv
[DUPLICATE IFORM] BSR_GPRv_GPRv
[DUPLICATE IFORM] JNBE_RELBRb
[DUPLICATE IFORM] SYSENTER
[DUPLICATE IFORM] REP_LODSQ
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSB
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] WBINVD
[DUPLICATE IFORM] REP_MOVSQ
[DUPLICATE IFORM] JBE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSB
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSB
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSQ
[DUPLICATE IFORM] JZ_RELBRb
[DUPLICATE IFORM] JP_RELBRb
[DUPLICATE IFORM] JS_RELBRb
[DUPLICATE IFORM] JO_RELBRb
[DUPLICATE IFORM] JB_RELBRb
[DUPLICATE IFORM] PCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] JECXZ_RELBRb
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSB
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] XCHG_MEMb_GPR8
[DUPLICATE IFORM] XCHG_MEMv_GPRv
[DUPLICATE IFORM] XCHG_GPRv_OrAX
[DUPLICATE IFORM] JLE_RELBRb
[DUPLICATE IFORM] MOVDIR64B_GPRa_MEM
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSB
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] MOVD_XMMdq_MEMd
[DUPLICATE IFORM] MOVD_XMMdq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_XMMd
[DUPLICATE IFORM] MOVD_GPR32_XMMd
[DUPLICATE IFORM] MOVD_MMXq_MEMd
[DUPLICATE IFORM] MOVD_MMXq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_MMXd
[DUPLICATE IFORM] MOVD_GPR32_MMXd
[DUPLICATE IFORM] PCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] JMP_RELBRb
[DUPLICATE IFORM] SYSRET
[DUPLICATE IFORM] CMPXCHG8B_MEMq
[DUPLICATE IFORM] CMPXCHG8B_LOCK_MEMq
[DUPLICATE IFORM] BSF_GPRv_MEMv
[DUPLICATE IFORM] BSF_GPRv_GPRv
[DUPLICATE IFORM] VPSHAD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPPERM_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPCMOV_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPCMOV_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VMOVD_XMMdq_MEMd
[DUPLICATE IFORM] VMOVD_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_MEMd_XMMd
[DUPLICATE IFORM] VMOVD_GPR32d_XMMd
[DUPLICATE IFORM] VFMADDSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] BLSMSK_VGPR32d_MEMd
[DUPLICATE IFORM] BLSMSK_VGPR32d_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHRX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SARX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VPERMIL2PS_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PS_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] BZHI_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BZHI_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PDEP_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] KMOVD_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] KMOVD_GPR32u32_MASKmskw_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VFNMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] RORX_VGPR32d_VGPR32d_IMMb
[DUPLICATE IFORM] RORX_VGPR32d_MEMd_IMMb
[DUPLICATE IFORM] VFMADDSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VFMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPEXTRD_MEMd_XMMdq_IMMb
[DUPLICATE IFORM] VPEXTRD_GPR32d_XMMdq_IMMb
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] ANDN_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] MULX_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_MEMd_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_GPR32d_IMMb
[DUPLICATE IFORM] SHLX_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] SHLX_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFNMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VFNMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] BEXTR_VGPR32d_MEMd_VGPR32d
[DUPLICATE IFORM] BEXTR_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_MEMd
[DUPLICATE IFORM] PEXT_VGPR32d_VGPR32d_VGPR32d
[DUPLICATE IFORM] VFMSUBADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] BLSI_VGPR32d_MEMd
[DUPLICATE IFORM] BLSI_VGPR32d_VGPR32d
[DUPLICATE IFORM] BLSR_VGPR32d_MEMd
[DUPLICATE IFORM] BLSR_VGPR32d_VGPR32d
[DUPLICATE IFORM] VMOVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VREDUCEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCVTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VRANGESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_MEMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_MEMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_GPR32u32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_MEMu32_AVX512
[DUPLICATE IFORM] VMOVD_GPR32u32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVD_MEMu32_XMMu32_AVX512
[DUPLICATE IFORM] VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPH2PS_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMAXSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VPEXTRW_GPR32u16_XMMu16_IMM8_AVX512_C5
[DUPLICATE IFORM] VMULSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVDQU32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMULSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512
[DUPLICATE IFORM] VMULPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VGETMANTSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCVTTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VGETMANTSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMAXSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VSQRTSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSQRTSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SD_XMMf64_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR64u64_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR64u64_AVX512
[DUPLICATE IFORM] VDIVPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCMPSS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCMPSD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VRCP28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VSUBSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSQRTPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VRCP28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VSQRTPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VSUBSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PD_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VMULPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VGETMANTPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMAXPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMAXPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VRSQRT28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VPBROADCASTD_ZMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVDQU8_XMMu8_MASKmskw_XMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_YMMu8_MASKmskw_YMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_ZMMu8_MASKmskw_ZMMu8_AVX512
[DUPLICATE IFORM] VRNDSCALESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVUPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VFMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTUQQ2PD_ZMMf64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VRNDSCALESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VMOVUPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VCVTTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VDIVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VDIVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTUQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VFNMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VGETEXPSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCMPPS_MASKmskw_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCMPPD_MASKmskw_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VSUBPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VMINSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VSUBPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VMINSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VEXP2PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VEXP2PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VRNDSCALEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VGETEXPPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VGETEXPPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VRNDSCALEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRSQRT28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRD_MEMu32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VCVTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VADDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VADDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VRCP28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VUCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VRCP28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VUCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VREDUCESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVDQU16_XMMu16_MASKmskw_XMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_YMMu16_MASKmskw_YMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_ZMMu16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VFMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VDIVPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVDQU64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTUDQ2PS_ZMMf32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCVTTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMINPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTDQ2PS_ZMMf32_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMINPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR64i64_AVX512
[DUPLICATE IFORM] VRANGEPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTSD2SS_XMMf32_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VRANGEPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VSCALEFSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VGETEXPSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVDQA32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VCVTTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2PS_YMMf32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VADDSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2PH_YMMf16_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VADDSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PD_ZMMf64_MASKmskw_YMMf32_AVX512
FE:EMIT_FILE obj/xed-iform-map-init.c
FE:EMIT_FILE obj/xed-exception-enum.txt
FE:EMIT_FILE obj/xed-exception-enum.c
FE:EMIT_FILE obj/xed-exception-enum.h
[Unique Operand Sequences] 2545
[Number of required operand sequence pointers] 8028
[Number of reused operand sequence pointers] 6380
[Number of required operands] 1369
[MAX OPERAND COUNT 11] 
[INVALID WIDTH CODE]  REP    imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REP    imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  LOCK   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x4] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  IMM0SIGNED imm_const [0x1] r EXPLICIT INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x10] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x20] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x40] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x8] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x0] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar8 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar9 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArDX INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar10 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar11 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT rIPa INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar14 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar15 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar13 INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_ESI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EDI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EBP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BX] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_SI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_DI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_INVALID] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArSP INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar12 INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_BP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_SI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_DI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_ESP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_RSP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_ESP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_EBP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_ESI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_EDI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_IP] rw SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT SEG_MOV INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_R INVALID
[INVALID WIDTH CODE]  BASE1  nt_lookup_fn r SUPPRESSED A_GPR_R INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_SP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_BP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_SI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_DI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_EBP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_ESI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_EDI] w SUPPRESSED INVALID
FE:EMIT_FILE obj/xed-init-operand-data.c
FE:EMIT_FILE obj/xed-init-operand-sequences.c
FE:EMIT_FILE obj/xed-init-inst-table-data.c
FE:EMIT_FILE obj/xed-init-inst-table-0.c
FE:EMIT_FILE obj/xed-init-inst-table.c
emit_enum_info
OPERAND-NAMES SIB LAST_F2F3 DISP_WIDTH USING_DEFAULT_SEGMENT0 USING_DEFAULT_SEGMENT1 HINT SAE MODE_FIRST_PREFIX UIMM1 UIMM0 SMODE RM CHIP AMD3DNOW MAP SIBINDEX AGEN NOMINAL_OPCODE SEG1 SEG0 CLDEMOTE NPREFIXES INDEX ILD_F2 SCALE LLRC ESRC NREXES POS_SIB OSZ HAS_SIB EOSZ ELEMENT_SIZE POS_DISP UBIT VEXDEST210 VEXDEST3 CET PTR P4 MODEP55C ICLASS IMM_WIDTH BCRC ERROR NELEM IMM0SIGNED REG8 REG6 REG7 REG4 REG5 REG2 REG3 REG0 REG1 BASE0 BASE1 MOD DISP REX REXB POS_IMM REP REXW ILD_F3 REXR ENCODER_PREFERRED REG POS_NOMINAL_OPCODE REXX PREFIX66 REXRR ASZ MASK MEM1 EASZ POS_IMM1 MEM_WIDTH LZCNT MEM0 BRDISP_WIDTH IMM1_BYTES TZCNT DF64 LOCK HAS_MODRM ZEROING SRM VEXVALID NEEDREX SKIP_OSZ OUTREG DEFAULT_SEG NSEG_PREFIXES VEX_C4 POS_MODRM BCAST TYPE SEG_OVD VEX_PREFIX DUMMY NOREX ROUNDC SIBBASE NEED_MEMDISP OUT_OF_BYTES IMM1 IMM0 NO_SCALE_DISP8 RELBR ILD_SEG DF32 REALMODE MODRM_BYTE MODE MPXMODE SIBSCALE VL WBNOINVD MAX_BYTES MODEP5 FIRST_F2F3 VEXDEST4
FE:EMIT_FILE obj/xed-attributes-list.c
FE:EMIT_FILE obj/xed-nonterminal-enum.txt
FE:EMIT_FILE obj/xed-nonterminal-enum.c
FE:EMIT_FILE obj/xed-nonterminal-enum.h
FE:EMIT_FILE obj/xed-operand-enum.txt
FE:EMIT_FILE obj/xed-operand-enum.c
FE:EMIT_FILE obj/xed-operand-enum.h
FE:EMIT_FILE obj/xed-operand-type-enum.txt
FE:EMIT_FILE obj/xed-operand-type-enum.c
FE:EMIT_FILE obj/xed-operand-type-enum.h
FE:EMIT_FILE obj/xed-attribute-enum.txt
FE:EMIT_FILE obj/xed-attribute-enum.c
FE:EMIT_FILE obj/xed-attribute-enum.h
FE:EMIT_FILE obj/xed-category-enum.txt
FE:EMIT_FILE obj/xed-category-enum.c
FE:EMIT_FILE obj/xed-category-enum.h
FE:EMIT_FILE obj/xed-extension-enum.txt
FE:EMIT_FILE obj/xed-extension-enum.c
FE:EMIT_FILE obj/xed-extension-enum.h
PREFAB-ENUM: ./datafiles/xed-error-enum.txt
FE:EMIT_FILE obj/xed-error-enum.c
FE:EMIT_FILE obj/xed-error-enum.h
PREFAB-ENUM: ./datafiles/xed-syntax-enum.txt
FE:EMIT_FILE obj/xed-syntax-enum.c
FE:EMIT_FILE obj/xed-syntax-enum.h
PREFAB-ENUM: ./datafiles/xed-addr-width-enum.txt
FE:EMIT_FILE obj/xed-address-width-enum.c
FE:EMIT_FILE obj/xed-address-width-enum.h
PREFAB-ENUM: ./datafiles/xed-flag-action-enum.txt
FE:EMIT_FILE obj/xed-flag-action-enum.c
FE:EMIT_FILE obj/xed-flag-action-enum.h
PREFAB-ENUM: ./datafiles/xed-flag-enum.txt
FE:EMIT_FILE obj/xed-flag-enum.c
FE:EMIT_FILE obj/xed-flag-enum.h
PREFAB-ENUM: ./datafiles/xed-reg-role.enum.txt
FE:EMIT_FILE obj/xed-reg-role-enum.c
FE:EMIT_FILE obj/xed-reg-role-enum.h
PREFAB-ENUM: ./datafiles/xed-operand-action-enum.txt
FE:EMIT_FILE obj/xed-operand-action-enum.c
FE:EMIT_FILE obj/xed-operand-action-enum.h
PREFAB-ENUM: ./datafiles/xed-machine-modes-enum.txt
FE:EMIT_FILE obj/xed-machine-mode-enum.c
FE:EMIT_FILE obj/xed-machine-mode-enum.h
PREFAB-ENUM: ./datafiles/xed-operand-visibility-enum.txt
FE:EMIT_FILE obj/xed-operand-visibility-enum.c
FE:EMIT_FILE obj/xed-operand-visibility-enum.h
FE:EMIT_FILE obj/xed-attributes-init.c
FE:EMIT_FILE obj/xed-gen-table-defs.h
FE:EMIT_FILE obj/cdata.txt
FE:EMIT_FILE obj/xed-chip-enum.txt
FE:EMIT_FILE obj/xed-chip-enum.c
FE:EMIT_FILE obj/xed-chip-enum.h
FE:EMIT_FILE obj/xed-isa-set-enum.txt
FE:EMIT_FILE obj/xed-isa-set-enum.c
FE:EMIT_FILE obj/xed-isa-set-enum.h
FE:EMIT_FILE obj/xed-chip-features-table.c
FE:EMIT_FILE obj/include-private/xed-chip-features-table.h
Created files: obj/cdata.txt obj/xed-chip-enum.h obj/xed-chip-enum.c obj/xed-isa-set-enum.h obj/xed-isa-set-enum.c obj/include-private/xed-chip-features-table.h obj/xed-chip-features-table.c
[FROM CHIP MODEL] ['INVALID', '3DNOW', 'ADOX_ADCX', 'AES', 'AMD', 'AVX', 'AVX2', 'AVX2GATHER', 'AVX512BW_128', 'AVX512BW_128N', 'AVX512BW_256', 'AVX512BW_512', 'AVX512BW_KOP', 'AVX512CD_128', 'AVX512CD_256', 'AVX512CD_512', 'AVX512DQ_128', 'AVX512DQ_128N', 'AVX512DQ_256', 'AVX512DQ_512', 'AVX512DQ_KOP', 'AVX512DQ_SCALAR', 'AVX512ER_512', 'AVX512ER_SCALAR', 'AVX512F_128', 'AVX512F_128N', 'AVX512F_256', 'AVX512F_512', 'AVX512F_KOP', 'AVX512F_SCALAR', 'AVX512PF_512', 'AVX512_4FMAPS_512', 'AVX512_4FMAPS_SCALAR', 'AVX512_4VNNIW_512', 'AVX512_BITALG_128', 'AVX512_BITALG_256', 'AVX512_BITALG_512', 'AVX512_GFNI_128', 'AVX512_GFNI_256', 'AVX512_GFNI_512', 'AVX512_IFMA_128', 'AVX512_IFMA_256', 'AVX512_IFMA_512', 'AVX512_VAES_128', 'AVX512_VAES_256', 'AVX512_VAES_512', 'AVX512_VBMI2_128', 'AVX512_VBMI2_256', 'AVX512_VBMI2_512', 'AVX512_VBMI_128', 'AVX512_VBMI_256', 'AVX512_VBMI_512', 'AVX512_VNNI_128', 'AVX512_VNNI_256', 'AVX512_VNNI_512', 'AVX512_VPCLMULQDQ_128', 'AVX512_VPCLMULQDQ_256', 'AVX512_VPCLMULQDQ_512', 'AVX512_VPOPCNTDQ_128', 'AVX512_VPOPCNTDQ_256', 'AVX512_VPOPCNTDQ_512', 'AVXAES', 'AVX_GFNI', 'BMI1', 'BMI2', 'CET', 'CLDEMOTE', 'CLFLUSHOPT', 'CLFSH', 'CLWB', 'CLZERO', 'CMOV', 'CMPXCHG16B', 'ENCLV', 'F16C', 'FAT_NOP', 'FCMOV', 'FMA', 'FMA4', 'FXSAVE', 'FXSAVE64', 'GFNI', 'I186', 'I286PROTECTED', 'I286REAL', 'I386', 'I486', 'I486REAL', 'I86', 'INVPCID', 'LAHF', 'LONGMODE', 'LZCNT', 'MONITOR', 'MONITORX', 'MOVBE', 'MOVDIR', 'MPX', 'PAUSE', 'PCLMULQDQ', 'PCONFIG', 'PENTIUMMMX', 'PENTIUMREAL', 'PKU', 'POPCNT', 'PPRO', 'PREFETCHW', 'PREFETCHWT1', 'PREFETCH_NOP', 'PT', 'RDPID', 'RDPMC', 'RDRAND', 'RDSEED', 'RDTSCP', 'RDWRFSGS', 'RTM', 'SGX', 'SGX_ENCLV', 'SHA', 'SMAP', 'SMX', 'SSE', 'SSE2', 'SSE2MMX', 'SSE3', 'SSE3X87', 'SSE4', 'SSE42', 'SSE4A', 'SSEMXCSR', 'SSE_PREFETCH', 'SSSE3', 'SSSE3MMX', 'SVM', 'TBM', 'VAES', 'VMFUNC', 'VPCLMULQDQ', 'VTX', 'WAITPKG', 'WBNOINVD', 'X87', 'XOP', 'XSAVE', 'XSAVEC', 'XSAVEOPT', 'XSAVES']
[FROM INSTRUCTIONS ] set(['CLDEMOTE', 'AVX512_VPOPCNTDQ_256', 'AVX512_VAES_256', 'AVX512F_KOP', 'POPCNT', 'F16C', 'CMOV', 'AVX512DQ_512', 'SSE_PREFETCH', 'I486', 'VPCLMULQDQ', 'AVX512_IFMA_128', 'MOVDIR', 'AVX512_VBMI2_128', 'AVX2', 'AVX512_VPOPCNTDQ_512', 'AVX512_GFNI_128', 'AVX512ER_SCALAR', 'CLWB', 'RDPID', 'AVX512F_128N', 'AVX512_GFNI_512', 'MOVBE', 'AVX512_VPCLMULQDQ_512', 'AVX512_BITALG_256', 'XSAVEC', 'AVX512F_512', 'FXSAVE', 'XSAVES', 'I386', 'AVX512BW_256', 'AVX512DQ_KOP', 'RDRAND', 'I286PROTECTED', 'SGX_ENCLV', 'FAT_NOP', 'AES', 'AVX512PF_512', 'AVX512BW_KOP', 'SSEMXCSR', 'CLFSH', 'MONITORX', 'AVX_GFNI', 'AVX512_VNNI_256', 'AVX512_4FMAPS_512', 'PT', 'PKU', 'RTM', 'AVX512DQ_128', 'AMD', 'CET', 'LAHF', 'RDWRFSGS', 'SMAP', 'MONITOR', 'AVX512_VNNI_512', 'BMI1', 'SHA', 'AVX512_VBMI2_256', 'VMFUNC', 'AVX512_IFMA_256', 'WAITPKG', 'LONGMODE', 'RDTSCP', 'AVX', 'AVX512CD_256', 'RDPMC', 'INVPCID', 'TBM', 'I486REAL', 'AVX512_VPOPCNTDQ_128', 'SSE', 'AVX512_IFMA_512', 'MPX', 'AVX512_VBMI2_512', 'AVX512_GFNI_256', 'AVX512F_256', 'SMX', 'AVX512F_SCALAR', 'AVX512_4VNNIW_512', 'XSAVEOPT', 'AVX512CD_128', 'FXSAVE64', 'AVX512BW_128N', 'FMA4', 'PREFETCHWT1', 'AVX512DQ_128N', 'LZCNT', 'PCLMULQDQ', 'RDSEED', 'SSE3X87', 'VTX', 'AVX512_BITALG_128', 'PREFETCH_NOP', 'SSE2MMX', '3DNOW', 'FMA', 'I186', 'ADOX_ADCX', 'SSSE3', 'AVX512BW_512', 'XSAVE', 'AVX512_VPCLMULQDQ_128', 'AVX512_VAES_128', 'AVX512_VPCLMULQDQ_256', 'CLZERO', 'SSE4', 'AVX512ER_512', 'SSE3', 'SSE2', 'SSE4A', 'SVM', 'AVX512_4FMAPS_SCALAR', 'PENTIUMMMX', 'I86', 'AVXAES', 'SSSE3MMX', 'X87', 'AVX512_VAES_512', 'AVX512_VBMI_256', 'AVX512_VNNI_128', 'VAES', 'PENTIUMREAL', 'CMPXCHG16B', 'AVX512F_128', 'PAUSE', 'XOP', 'SGX', 'FCMOV', 'PCONFIG', 'BMI2', 'I286REAL', 'WBNOINVD', 'AVX2GATHER', 'AVX512DQ_SCALAR', 'PPRO', 'AVX512CD_512', 'CLFLUSHOPT', 'AVX512_VBMI_512', 'AVX512DQ_256', 'GFNI', 'SSE42', 'AVX512_BITALG_512', 'AVX512BW_128', 'AVX512_VBMI_128'])
FE:EMIT_FILE obj/xed-operand-convert-enum.txt
FE:EMIT_FILE obj/xed-operand-convert-enum.c
FE:EMIT_FILE obj/xed-operand-convert-enum.h
FE:EMIT_FILE obj/xed-convert-table-init.c
FE:EMIT_FILE obj/xed-convert-table-init.h
FE:EMIT_FILE obj/xed-operand-storage.h
FE:EMIT_FILE obj/xed-classifiers.c
FE:EMIT_FILE obj/include-private/xed-ild-modrm.h
FE:EMIT_FILE obj/ild_oesz_debug.txt
FE:EMIT_FILE obj/ild_eosz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-eosz.c
FE:EMIT_FILE obj/include-private/xed-ild-eosz.h
FE:EMIT_FILE obj/include-private/xed-ild-eosz-getters.h
FE:EMIT_FILE obj/ild_easz_debug.txt
FE:EMIT_FILE obj/ild_easz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-easz.c
FE:EMIT_FILE obj/include-private/xed-ild-easz.h
FE:EMIT_FILE obj/include-private/xed-ild-easz-getters.h
FE:EMIT_FILE obj/xed-operand-accessors.h
FE:EMIT_FILE obj/xed-operand-accessors.c
FE:EMIT_FILE obj/xed-ild-imm-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-imm-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf6 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf7 map 0x0
FE:EMIT_FILE obj/include-private/xed-ild-imm-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-bytes.h
FE:EMIT_FILE obj/xed-ild-disp-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-disp-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe8 map 0x0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe8 map 0x0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe8 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe9 map 0x0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe9 map 0x0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe9 map 0x0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x80 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x80 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x80 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x81 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x81 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x81 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x82 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x82 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x82 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x83 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x83 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x83 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x84 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x84 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x84 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x85 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x85 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x85 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x86 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x86 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x86 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x87 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x87 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x87 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x88 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x88 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x88 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x89 map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x89 map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x89 map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8a map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8a map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8a map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8b map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8b map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8b map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8c map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8c map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8c map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8d map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8d map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8d map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8e map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8e map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8e map 0x0F
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8f map 0x0F
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8f map 0x0F
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8f map 0x0F
FE:EMIT_FILE obj/include-private/xed-ild-disp-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-bytes.h
FE:EMIT_FILE obj/include-private/xed-ild-scanners.h
FE:EMIT_FILE obj/include-private/xed-ild-getters.h
[ALL ZEROS] VV=0 MAP=XMAPA
[ALL ZEROS] VV=0 MAP=XMAP9
[ALL ZEROS] VV=0 MAP=XMAP8
[ALL ZEROS] VV=0 MAP=MAP6
[ALL ZEROS] VV=0 MAP=MAP4
[ALL ZEROS] VV=0 MAP=MAP5
FE:EMIT_FILE obj/include-private/xed3-phash-vv0.h
FE:EMIT_FILE obj/xed3-phash-lu-vv0.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv0.h
[ALL ZEROS] VV=1 MAP=XMAPA
[ALL ZEROS] VV=1 MAP=0x0
[ALL ZEROS] VV=1 MAP=XMAP9
[ALL ZEROS] VV=1 MAP=XMAP8
[ALL ZEROS] VV=1 MAP=MAP6
[ALL ZEROS] VV=1 MAP=MAP4
[ALL ZEROS] VV=1 MAP=MAP5
[ALL ZEROS] VV=1 MAP=0x0F0F
FE:EMIT_FILE obj/include-private/xed3-phash-vv1.h
FE:EMIT_FILE obj/xed3-phash-lu-vv1.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv1.h
[ALL ZEROS] VV=2 MAP=XMAPA
[ALL ZEROS] VV=2 MAP=0x0
[ALL ZEROS] VV=2 MAP=XMAP9
[ALL ZEROS] VV=2 MAP=XMAP8
[ALL ZEROS] VV=2 MAP=MAP6
[ALL ZEROS] VV=2 MAP=MAP4
[ALL ZEROS] VV=2 MAP=MAP5
[ALL ZEROS] VV=2 MAP=0x0F0F
FE:EMIT_FILE obj/include-private/xed3-phash-vv2.h
FE:EMIT_FILE obj/xed3-phash-lu-vv2.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv2.h
[ALL ZEROS] VV=3 MAP=0x0F38
[ALL ZEROS] VV=3 MAP=0x0
[ALL ZEROS] VV=3 MAP=MAP6
[ALL ZEROS] VV=3 MAP=MAP4
[ALL ZEROS] VV=3 MAP=MAP5
[ALL ZEROS] VV=3 MAP=0x0F
[ALL ZEROS] VV=3 MAP=0x0F3A
[ALL ZEROS] VV=3 MAP=0x0F0F
FE:EMIT_FILE obj/include-private/xed3-phash-vv3.h
FE:EMIT_FILE obj/xed3-phash-lu-vv3.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv3.h
FE:EMIT_FILE obj/include-private/xed3-operand-lu.h
FE:EMIT_FILE obj/xed3-operand-lu.c
FE:EMIT_FILE obj/include-private/xed3-phash.h
FE:EMIT_FILE obj/include-private/xed3-nt-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-dynamic-part1-capture.h
FE:EMIT_FILE obj/xed-cpuid-bit-enum.txt
FE:EMIT_FILE obj/xed-cpuid-bit-enum.c
FE:EMIT_FILE obj/xed-cpuid-bit-enum.h
ISASET:  INVALID
ISASET:  3DNOW
ISASET:  ADOX_ADCX
ISASET:  AES
ISASET:  AMD
ISASET:  AVX
ISASET:  AVX2
ISASET:  AVX2GATHER
ISASET:  AVX512BW_128
ISASET:  AVX512BW_128N
ISASET:  AVX512BW_256
ISASET:  AVX512BW_512
ISASET:  AVX512BW_KOP
ISASET:  AVX512CD_128
ISASET:  AVX512CD_256
ISASET:  AVX512CD_512
ISASET:  AVX512DQ_128
ISASET:  AVX512DQ_128N
ISASET:  AVX512DQ_256
ISASET:  AVX512DQ_512
ISASET:  AVX512DQ_KOP
ISASET:  AVX512DQ_SCALAR
ISASET:  AVX512ER_512
ISASET:  AVX512ER_SCALAR
ISASET:  AVX512F_128
ISASET:  AVX512F_128N
ISASET:  AVX512F_256
ISASET:  AVX512F_512
ISASET:  AVX512F_KOP
ISASET:  AVX512F_SCALAR
ISASET:  AVX512PF_512
ISASET:  AVX512_4FMAPS_512
ISASET:  AVX512_4FMAPS_SCALAR
ISASET:  AVX512_4VNNIW_512
ISASET:  AVX512_BITALG_128
ISASET:  AVX512_BITALG_256
ISASET:  AVX512_BITALG_512
ISASET:  AVX512_GFNI_128
ISASET:  AVX512_GFNI_256
ISASET:  AVX512_GFNI_512
ISASET:  AVX512_IFMA_128
ISASET:  AVX512_IFMA_256
ISASET:  AVX512_IFMA_512
ISASET:  AVX512_VAES_128
ISASET:  AVX512_VAES_256
ISASET:  AVX512_VAES_512
ISASET:  AVX512_VBMI2_128
ISASET:  AVX512_VBMI2_256
ISASET:  AVX512_VBMI2_512
ISASET:  AVX512_VBMI_128
ISASET:  AVX512_VBMI_256
ISASET:  AVX512_VBMI_512
ISASET:  AVX512_VNNI_128
ISASET:  AVX512_VNNI_256
ISASET:  AVX512_VNNI_512
ISASET:  AVX512_VPCLMULQDQ_128
ISASET:  AVX512_VPCLMULQDQ_256
ISASET:  AVX512_VPCLMULQDQ_512
ISASET:  AVX512_VPOPCNTDQ_128
ISASET:  AVX512_VPOPCNTDQ_256
ISASET:  AVX512_VPOPCNTDQ_512
ISASET:  AVXAES
ISASET:  AVX_GFNI
ISASET:  BMI1
ISASET:  BMI2
ISASET:  CET
ISASET:  CLDEMOTE
ISASET:  CLFLUSHOPT
ISASET:  CLFSH
ISASET:  CLWB
ISASET:  CLZERO
ISASET:  CMOV
ISASET:  CMPXCHG16B
ISASET:  ENCLV
ISASET:  F16C
ISASET:  FAT_NOP
ISASET:  FCMOV
ISASET:  FMA
ISASET:  FMA4
ISASET:  FXSAVE
ISASET:  FXSAVE64
ISASET:  GFNI
ISASET:  I186
ISASET:  I286PROTECTED
ISASET:  I286REAL
ISASET:  I386
ISASET:  I486
ISASET:  I486REAL
ISASET:  I86
ISASET:  INVPCID
ISASET:  LAHF
ISASET:  LONGMODE
ISASET:  LZCNT
ISASET:  MONITOR
ISASET:  MONITORX
ISASET:  MOVBE
ISASET:  MOVDIR
ISASET:  MPX
ISASET:  PAUSE
ISASET:  PCLMULQDQ
ISASET:  PCONFIG
ISASET:  PENTIUMMMX
ISASET:  PENTIUMREAL
ISASET:  PKU
ISASET:  POPCNT
ISASET:  PPRO
ISASET:  PREFETCHW
ISASET:  PREFETCHWT1
ISASET:  PREFETCH_NOP
ISASET:  PT
ISASET:  RDPID
ISASET:  RDPMC
ISASET:  RDRAND
ISASET:  RDSEED
ISASET:  RDTSCP
ISASET:  RDWRFSGS
ISASET:  RTM
ISASET:  SGX
ISASET:  SGX_ENCLV
ISASET:  SHA
ISASET:  SMAP
ISASET:  SMX
ISASET:  SSE
ISASET:  SSE2
ISASET:  SSE2MMX
ISASET:  SSE3
ISASET:  SSE3X87
ISASET:  SSE4
ISASET:  SSE42
ISASET:  SSE4A
ISASET:  SSEMXCSR
ISASET:  SSE_PREFETCH
ISASET:  SSSE3
ISASET:  SSSE3MMX
ISASET:  SVM
ISASET:  TBM
ISASET:  VAES
ISASET:  VMFUNC
ISASET:  VPCLMULQDQ
ISASET:  VTX
ISASET:  WAITPKG
ISASET:  WBNOINVD
ISASET:  X87
ISASET:  XOP
ISASET:  XSAVE
ISASET:  XSAVEC
ISASET:  XSAVEOPT
ISASET:  XSAVES
FE:EMIT_FILE obj/xed-cpuid-tables.c
FE: Closing an already-closed file: obj/xed-init-inst-table.c
FE:EMIT_FILE obj/xed-flags-simple.c
FE:EMIT_FILE obj/xed-flags-complex.c
FE:EMIT_FILE obj/xed-flags-actions.c
FE: Closing an already-closed file: obj/xed-operand-convert-init.c
FE: Closing an already-closed file: obj/xed-iclass-string.c
FE: Closing an already-closed file: obj/xed-iform-map-init.c
FE: Closing an already-closed file: obj/xed-init-inst-table-0.c
FE: Closing an already-closed file: obj/xed-attributes-init.c
